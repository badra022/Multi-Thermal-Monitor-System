
application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001588  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00001588  0000161c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  00800078  00800078  00001634  2**0
                  ALLOC
  3 .stab         000023c4  00000000  00000000  00001634  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017ce  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000051c6  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000051d8  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00005214  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  00005742  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00005c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  00005c43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3b       	cpi	r26, 0xB5	; 181
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
      8a:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BLUETOOTH_init>:
#include "uart.h"
#include <stdlib.h>
#define MAX_MESSEGE 50
uint8 output[MAX_MESSEGE];
void BLUETOOTH_init(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <BLUETOOTH_init+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <BLUETOOTH_init+0x8>
      9a:	00 d0       	rcall	.+0      	; 0x9c <BLUETOOTH_init+0xa>
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
	 * 			speed x or U2x
	 * 			type  Sync or Async
	 * 	[DEFAULT] : Baudrate -> 9600 bps
	 ***************************************************/

	UART_ConfigType UART_configStruct = {	UART_PARITY_BIT_DISABLE ,
      a0:	26 e0       	ldi	r18, 0x06	; 6
      a2:	e0 e6       	ldi	r30, 0x60	; 96
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	ce 01       	movw	r24, r28
      a8:	01 96       	adiw	r24, 0x01	; 1
      aa:	dc 01       	movw	r26, r24
      ac:	01 90       	ld	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	2a 95       	dec	r18
      b2:	e1 f7       	brne	.-8      	; 0xac <BLUETOOTH_init+0x1a>
			UART_1_STOP_BIT ,
			UART_8_BIT ,
			UART_2X ,
			UART_ASYNCHRONOUS_OPERATION ,};

	UART_init(&UART_configStruct);
      b4:	ce 01       	movw	r24, r28
      b6:	01 96       	adiw	r24, 0x01	; 1
      b8:	0e 94 5f 07 	call	0xebe	; 0xebe <UART_init>
}
      bc:	00 00       	nop
      be:	26 96       	adiw	r28, 0x06	; 6
      c0:	0f b6       	in	r0, 0x3f	; 63
      c2:	f8 94       	cli
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	0f be       	out	0x3f, r0	; 63
      c8:	cd bf       	out	0x3d, r28	; 61
      ca:	df 91       	pop	r29
      cc:	cf 91       	pop	r28
      ce:	08 95       	ret

000000d0 <BLUETOOTH_receiveMessege>:

void BLUETOOTH_receiveMessege(uint8* str)
{
      d0:	cf 93       	push	r28
      d2:	df 93       	push	r29
      d4:	00 d0       	rcall	.+0      	; 0xd6 <BLUETOOTH_receiveMessege+0x6>
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	9a 83       	std	Y+2, r25	; 0x02
      dc:	89 83       	std	Y+1, r24	; 0x01

	/* messege must be terminated by # to be sent */
	UART_receiveString(str);
      de:	89 81       	ldd	r24, Y+1	; 0x01
      e0:	9a 81       	ldd	r25, Y+2	; 0x02
      e2:	0e 94 4b 08 	call	0x1096	; 0x1096 <UART_receiveString>

}
      e6:	00 00       	nop
      e8:	0f 90       	pop	r0
      ea:	0f 90       	pop	r0
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	08 95       	ret

000000f2 <BLUETOOTH_sendMessege>:
void BLUETOOTH_sendMessege(uint8* str)
{
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	00 d0       	rcall	.+0      	; 0xf8 <BLUETOOTH_sendMessege+0x6>
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
      fc:	9a 83       	std	Y+2, r25	; 0x02
      fe:	89 83       	std	Y+1, r24	; 0x01

	/* messege must be terminated by # to be sent */
	UART_sendString(str);
     100:	89 81       	ldd	r24, Y+1	; 0x01
     102:	9a 81       	ldd	r25, Y+2	; 0x02
     104:	0e 94 21 08 	call	0x1042	; 0x1042 <UART_sendString>

}
     108:	00 00       	nop
     10a:	0f 90       	pop	r0
     10c:	0f 90       	pop	r0
     10e:	df 91       	pop	r29
     110:	cf 91       	pop	r28
     112:	08 95       	ret

00000114 <BLUETOOTH_sendByte>:
void BLUETOOTH_sendByte(uint8 character)
{
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	1f 92       	push	r1
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
     11e:	89 83       	std	Y+1, r24	; 0x01

	/* sending ordinary character */
	UART_sendByte(character);
     120:	89 81       	ldd	r24, Y+1	; 0x01
     122:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <UART_sendByte>

}
     126:	00 00       	nop
     128:	0f 90       	pop	r0
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <BLUETOOTH_receiveByte>:
uint8 BLUETOOTH_receiveByte(void)
{
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62

	/* receiving ordinary character */
	return UART_receiveByte();
     138:	0e 94 fc 07 	call	0xff8	; 0xff8 <UART_receiveByte>

}
     13c:	df 91       	pop	r29
     13e:	cf 91       	pop	r28
     140:	08 95       	ret

00000142 <sensorRead>:

void sensorRead(const ADC_struct * config_ptr , ADC_channel a_channel)
{
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	00 d0       	rcall	.+0      	; 0x148 <sensorRead+0x6>
     148:	1f 92       	push	r1
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
     14e:	9a 83       	std	Y+2, r25	; 0x02
     150:	89 83       	std	Y+1, r24	; 0x01
     152:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * converting ADC2 channel in the ADC module and storing the
	 * sensor reading in "Temp" variable
	 */
	ADC_readChannel(config_ptr  ,a_channel);
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	9a 81       	ldd	r25, Y+2	; 0x02
     158:	6b 81       	ldd	r22, Y+3	; 0x03
     15a:	0e 94 8a 01 	call	0x314	; 0x314 <ADC_readChannel>
	/*
	 * displaying that sensor reading
	 */
	LCD_goToColRow(1 , 1);
     15e:	61 e0       	ldi	r22, 0x01	; 1
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	0e 94 a7 06 	call	0xd4e	; 0xd4e <LCD_goToColRow>
	LCD_displayInt(Temp);
     166:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <Temp>
     16a:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <Temp+0x1>
     16e:	a0 91 b3 00 	lds	r26, 0x00B3	; 0x8000b3 <Temp+0x2>
     172:	b0 91 b4 00 	lds	r27, 0x00B4	; 0x8000b4 <Temp+0x3>
     176:	bc 01       	movw	r22, r24
     178:	cd 01       	movw	r24, r26
     17a:	0e 94 28 09 	call	0x1250	; 0x1250 <__fixsfsi>
     17e:	dc 01       	movw	r26, r24
     180:	cb 01       	movw	r24, r22
     182:	0e 94 db 06 	call	0xdb6	; 0xdb6 <LCD_displayInt>
	LCD_displayString((uint8*)".");
     186:	86 e6       	ldi	r24, 0x66	; 102
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_displayString>
	LCD_displayInt(((uint32)(Temp*10))%10);
     18e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <Temp>
     192:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <Temp+0x1>
     196:	a0 91 b3 00 	lds	r26, 0x00B3	; 0x8000b3 <Temp+0x2>
     19a:	b0 91 b4 00 	lds	r27, 0x00B4	; 0x8000b4 <Temp+0x3>
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	40 e2       	ldi	r20, 0x20	; 32
     1a4:	51 e4       	ldi	r21, 0x41	; 65
     1a6:	bc 01       	movw	r22, r24
     1a8:	cd 01       	movw	r24, r26
     1aa:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     1ae:	dc 01       	movw	r26, r24
     1b0:	cb 01       	movw	r24, r22
     1b2:	bc 01       	movw	r22, r24
     1b4:	cd 01       	movw	r24, r26
     1b6:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     1ba:	dc 01       	movw	r26, r24
     1bc:	cb 01       	movw	r24, r22
     1be:	2a e0       	ldi	r18, 0x0A	; 10
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	bc 01       	movw	r22, r24
     1c8:	cd 01       	movw	r24, r26
     1ca:	0e 94 8f 08 	call	0x111e	; 0x111e <__udivmodsi4>
     1ce:	dc 01       	movw	r26, r24
     1d0:	cb 01       	movw	r24, r22
     1d2:	0e 94 db 06 	call	0xdb6	; 0xdb6 <LCD_displayInt>

}
     1d6:	00 00       	nop
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <main>:
int main(void)
{
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <main+0x6>
     1ea:	00 d0       	rcall	.+0      	; 0x1ec <main+0x8>
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62

	uint8 option;
	/*
	 * initializing bluetooth module
	 */
	LCD_init();
     1f0:	0e 94 31 02 	call	0x462	; 0x462 <LCD_init>

	BLUETOOTH_init();
     1f4:	0e 94 49 00 	call	0x92	; 0x92 <BLUETOOTH_init>

	/****************************ADC INIT**********************/
	/*
	 * creating configuration structure for adc driver
	 */
	ADC_struct ADC_config = { _2_56v, POLLING , F_CPU_8 };
     1f8:	83 e0       	ldi	r24, 0x03	; 3
     1fa:	8a 83       	std	Y+2, r24	; 0x02
     1fc:	1b 82       	std	Y+3, r1	; 0x03
     1fe:	83 e0       	ldi	r24, 0x03	; 3
     200:	8c 83       	std	Y+4, r24	; 0x04
	/*
	 * initiating adc driver
	 */
	ADC_init(&ADC_config);
     202:	ce 01       	movw	r24, r28
     204:	02 96       	adiw	r24, 0x02	; 2
     206:	0e 94 3a 01 	call	0x274	; 0x274 <ADC_init>
	/*
	 * to convert the result current_reading to temperature reading
	 */
	ADC_setCallBack(THERMAL_conversion);
     20a:	84 e2       	ldi	r24, 0x24	; 36
     20c:	97 e0       	ldi	r25, 0x07	; 7
     20e:	0e 94 de 01 	call	0x3bc	; 0x3bc <ADC_setCallBack>
	/*
	 *  setting I-bit for interrupt enable in case you need it
	 */
	GLOBAL_INTERRUPT_ENABLE();
     212:	8f e5       	ldi	r24, 0x5F	; 95
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	2f e5       	ldi	r18, 0x5F	; 95
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	f9 01       	movw	r30, r18
     21c:	20 81       	ld	r18, Z
     21e:	20 68       	ori	r18, 0x80	; 128
     220:	fc 01       	movw	r30, r24
     222:	20 83       	st	Z, r18
	/************************************************************/
	LCD_displayString((uint8*)"temperature = ");
     224:	88 e6       	ldi	r24, 0x68	; 104
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_displayString>
	{
		/*Application code*/
		/*
		 * taking input character from the terminal connected with bluetooth
		 */
		option = UART_receiveByte();
     22c:	0e 94 fc 07 	call	0xff8	; 0xff8 <UART_receiveByte>
     230:	89 83       	std	Y+1, r24	; 0x01
		if(option == '1')
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	81 33       	cpi	r24, 0x31	; 49
     236:	29 f4       	brne	.+10     	; 0x242 <main+0x5e>
		{
			sensorRead(&ADC_config , ADC0);
     238:	ce 01       	movw	r24, r28
     23a:	02 96       	adiw	r24, 0x02	; 2
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	0e 94 a1 00 	call	0x142	; 0x142 <sensorRead>
		}
		if(option == '2')
     242:	89 81       	ldd	r24, Y+1	; 0x01
     244:	82 33       	cpi	r24, 0x32	; 50
     246:	29 f4       	brne	.+10     	; 0x252 <main+0x6e>
		{
			sensorRead(&ADC_config , ADC1);
     248:	ce 01       	movw	r24, r28
     24a:	02 96       	adiw	r24, 0x02	; 2
     24c:	61 e0       	ldi	r22, 0x01	; 1
     24e:	0e 94 a1 00 	call	0x142	; 0x142 <sensorRead>

		}
		if(option == '3')
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	83 33       	cpi	r24, 0x33	; 51
     256:	29 f4       	brne	.+10     	; 0x262 <main+0x7e>
		{
			sensorRead(&ADC_config , ADC2);
     258:	ce 01       	movw	r24, r28
     25a:	02 96       	adiw	r24, 0x02	; 2
     25c:	62 e0       	ldi	r22, 0x02	; 2
     25e:	0e 94 a1 00 	call	0x142	; 0x142 <sensorRead>

		}

		if(option == '4')
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	84 33       	cpi	r24, 0x34	; 52
     266:	11 f7       	brne	.-60     	; 0x22c <main+0x48>
		{
			sensorRead(&ADC_config , ADC3);
     268:	ce 01       	movw	r24, r28
     26a:	02 96       	adiw	r24, 0x02	; 2
     26c:	63 e0       	ldi	r22, 0x03	; 3
     26e:	0e 94 a1 00 	call	0x142	; 0x142 <sensorRead>

		}
	}
     272:	dc cf       	rjmp	.-72     	; 0x22c <main+0x48>

00000274 <ADC_init>:
volatile uint16 current_reading;
/*********************************************************************************
* 								Functions Definition							 *
 *********************************************************************************/
void ADC_init(const ADC_struct * config_ptr)
{
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	00 d0       	rcall	.+0      	; 0x27a <ADC_init+0x6>
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	9a 83       	std	Y+2, r25	; 0x02
     280:	89 83       	std	Y+1, r24	; 0x01
	/* setting initially
	 * 1. ADC0 channel
	 * 2. reference voltage
	 * 3. no left adjust for result
	 */
	ADMUX = (config_ptr->ref)<<6;
     282:	87 e2       	ldi	r24, 0x27	; 39
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	29 81       	ldd	r18, Y+1	; 0x01
     288:	3a 81       	ldd	r19, Y+2	; 0x02
     28a:	f9 01       	movw	r30, r18
     28c:	20 81       	ld	r18, Z
     28e:	22 95       	swap	r18
     290:	22 0f       	add	r18, r18
     292:	22 0f       	add	r18, r18
     294:	20 7c       	andi	r18, 0xC0	; 192
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
	/*
	 * enable adc
	 * */
	SET_BIT(ADCSRA , ADEN);
     29a:	86 e2       	ldi	r24, 0x26	; 38
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	26 e2       	ldi	r18, 0x26	; 38
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	f9 01       	movw	r30, r18
     2a4:	20 81       	ld	r18, Z
     2a6:	20 68       	ori	r18, 0x80	; 128
     2a8:	fc 01       	movw	r30, r24
     2aa:	20 83       	st	Z, r18
	/*
	 * setting ADIE with either 0 for polling or 1 for interrupt
	 * */
	SET_VALUE(ADCSRA , ADIE , config_ptr->type);
     2ac:	86 e2       	ldi	r24, 0x26	; 38
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	26 e2       	ldi	r18, 0x26	; 38
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	f9 01       	movw	r30, r18
     2b6:	20 81       	ld	r18, Z
     2b8:	27 7f       	andi	r18, 0xF7	; 247
     2ba:	fc 01       	movw	r30, r24
     2bc:	20 83       	st	Z, r18
     2be:	86 e2       	ldi	r24, 0x26	; 38
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	26 e2       	ldi	r18, 0x26	; 38
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	f9 01       	movw	r30, r18
     2c8:	20 81       	ld	r18, Z
     2ca:	42 2f       	mov	r20, r18
     2cc:	29 81       	ldd	r18, Y+1	; 0x01
     2ce:	3a 81       	ldd	r19, Y+2	; 0x02
     2d0:	f9 01       	movw	r30, r18
     2d2:	21 81       	ldd	r18, Z+1	; 0x01
     2d4:	22 2f       	mov	r18, r18
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	22 0f       	add	r18, r18
     2da:	33 1f       	adc	r19, r19
     2dc:	22 0f       	add	r18, r18
     2de:	33 1f       	adc	r19, r19
     2e0:	22 0f       	add	r18, r18
     2e2:	33 1f       	adc	r19, r19
     2e4:	24 2b       	or	r18, r20
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
	/*
	 * setting the prescale value in ADCSRA register
	 * */
	ADCSRA =(ADCSRA & 0xF8) | config_ptr->prescaler;
     2ea:	86 e2       	ldi	r24, 0x26	; 38
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	26 e2       	ldi	r18, 0x26	; 38
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	f9 01       	movw	r30, r18
     2f4:	20 81       	ld	r18, Z
     2f6:	42 2f       	mov	r20, r18
     2f8:	48 7f       	andi	r20, 0xF8	; 248
     2fa:	29 81       	ldd	r18, Y+1	; 0x01
     2fc:	3a 81       	ldd	r19, Y+2	; 0x02
     2fe:	f9 01       	movw	r30, r18
     300:	22 81       	ldd	r18, Z+2	; 0x02
     302:	24 2b       	or	r18, r20
     304:	fc 01       	movw	r30, r24
     306:	20 83       	st	Z, r18
}
     308:	00 00       	nop
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <ADC_readChannel>:

void ADC_readChannel(const ADC_struct * config_ptr,ADC_channel a_channel)
{
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	00 d0       	rcall	.+0      	; 0x31a <ADC_readChannel+0x6>
     31a:	1f 92       	push	r1
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	9a 83       	std	Y+2, r25	; 0x02
     322:	89 83       	std	Y+1, r24	; 0x01
     324:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * setting the channel that will be converted
	 * */
	ADMUX = (ADMUX & 0xE0) |a_channel;
     326:	87 e2       	ldi	r24, 0x27	; 39
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	27 e2       	ldi	r18, 0x27	; 39
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	f9 01       	movw	r30, r18
     330:	20 81       	ld	r18, Z
     332:	32 2f       	mov	r19, r18
     334:	30 7e       	andi	r19, 0xE0	; 224
     336:	2b 81       	ldd	r18, Y+3	; 0x03
     338:	23 2b       	or	r18, r19
     33a:	fc 01       	movw	r30, r24
     33c:	20 83       	st	Z, r18
	/*
	 * start conversion
	 * */
	SET_BIT(ADCSRA , ADSC);
     33e:	86 e2       	ldi	r24, 0x26	; 38
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	26 e2       	ldi	r18, 0x26	; 38
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	f9 01       	movw	r30, r18
     348:	20 81       	ld	r18, Z
     34a:	20 64       	ori	r18, 0x40	; 64
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
	/*
	 * polling service routine
	 */
	if(config_ptr->type == POLLING)
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	9a 81       	ldd	r25, Y+2	; 0x02
     354:	fc 01       	movw	r30, r24
     356:	81 81       	ldd	r24, Z+1	; 0x01
     358:	88 23       	and	r24, r24
     35a:	49 f5       	brne	.+82     	; 0x3ae <ADC_readChannel+0x9a>
	{
		/*
		 * wait until conversion at adc module is over
		 */
		while(BIT_IS_CLEAR(ADCSRA , ADIF)){};
     35c:	00 00       	nop
     35e:	86 e2       	ldi	r24, 0x26	; 38
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	fc 01       	movw	r30, r24
     364:	80 81       	ld	r24, Z
     366:	88 2f       	mov	r24, r24
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	80 71       	andi	r24, 0x10	; 16
     36c:	99 27       	eor	r25, r25
     36e:	89 2b       	or	r24, r25
     370:	b1 f3       	breq	.-20     	; 0x35e <ADC_readChannel+0x4a>
		/*
		 * clearing the interrupt module flag
		 */
		SET_BIT(ADCSRA , ADIF);
     372:	86 e2       	ldi	r24, 0x26	; 38
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	26 e2       	ldi	r18, 0x26	; 38
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	f9 01       	movw	r30, r18
     37c:	20 81       	ld	r18, Z
     37e:	20 61       	ori	r18, 0x10	; 16
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18
		/*
		 * storing conversion result in current_reading global variable
		 */
		current_reading = ADC;
     384:	84 e2       	ldi	r24, 0x24	; 36
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	fc 01       	movw	r30, r24
     38a:	80 81       	ld	r24, Z
     38c:	91 81       	ldd	r25, Z+1	; 0x01
     38e:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <current_reading+0x1>
     392:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <current_reading>
		/*
		 * callback function of the hardware sensor conversion for result
		 */
		if(ADC_interruptFunc_ptr != NULL)
     396:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
     39a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
     39e:	89 2b       	or	r24, r25
     3a0:	31 f0       	breq	.+12     	; 0x3ae <ADC_readChannel+0x9a>
			{
				ADC_interruptFunc_ptr();
     3a2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
     3a6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
     3aa:	fc 01       	movw	r30, r24
     3ac:	09 95       	icall
			}
	}
}
     3ae:	00 00       	nop
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <ADC_setCallBack>:
void ADC_setCallBack(void (*a_ptr)(void))
{
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <ADC_setCallBack+0x6>
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	9a 83       	std	Y+2, r25	; 0x02
     3c8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * passing the address of the call back function
	 * */
	ADC_interruptFunc_ptr = a_ptr;
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	9a 81       	ldd	r25, Y+2	; 0x02
     3ce:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
     3d2:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
}
     3d6:	00 00       	nop
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <__vector_14>:
/*********************************************************************************
* 								Interrupt service routines							 *
 *********************************************************************************/
ISR(ADC_vect)
{
     3e2:	1f 92       	push	r1
     3e4:	0f 92       	push	r0
     3e6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	2f 93       	push	r18
     3f0:	3f 93       	push	r19
     3f2:	4f 93       	push	r20
     3f4:	5f 93       	push	r21
     3f6:	6f 93       	push	r22
     3f8:	7f 93       	push	r23
     3fa:	8f 93       	push	r24
     3fc:	9f 93       	push	r25
     3fe:	af 93       	push	r26
     400:	bf 93       	push	r27
     402:	ef 93       	push	r30
     404:	ff 93       	push	r31
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * storing conversion result in current_reading global variable
	 */
	current_reading = ADC;
     40e:	84 e2       	ldi	r24, 0x24	; 36
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	fc 01       	movw	r30, r24
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <current_reading+0x1>
     41c:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <current_reading>
	if(ADC_interruptFunc_ptr != NULL)
     420:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
     424:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
     428:	89 2b       	or	r24, r25
     42a:	31 f0       	breq	.+12     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	{
		ADC_interruptFunc_ptr();
     42c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
     430:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
     434:	fc 01       	movw	r30, r24
     436:	09 95       	icall
	}
}
     438:	00 00       	nop
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	ff 91       	pop	r31
     440:	ef 91       	pop	r30
     442:	bf 91       	pop	r27
     444:	af 91       	pop	r26
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	7f 91       	pop	r23
     44c:	6f 91       	pop	r22
     44e:	5f 91       	pop	r21
     450:	4f 91       	pop	r20
     452:	3f 91       	pop	r19
     454:	2f 91       	pop	r18
     456:	0f 90       	pop	r0
     458:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     45c:	0f 90       	pop	r0
     45e:	1f 90       	pop	r1
     460:	18 95       	reti

00000462 <LCD_init>:
 *******************************************************************************/
#include"lcd.h"

/*--------------------------------------FUNCTION DEFINITIONS---------------------------------------------*/
void LCD_init(void)
{
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(LCD_CTRL_DIR , RS);	/* make RS pin o/p pin*/
     46a:	8a e3       	ldi	r24, 0x3A	; 58
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	2a e3       	ldi	r18, 0x3A	; 58
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	f9 01       	movw	r30, r18
     474:	20 81       	ld	r18, Z
     476:	20 62       	ori	r18, 0x20	; 32
     478:	fc 01       	movw	r30, r24
     47a:	20 83       	st	Z, r18
	SET_BIT(LCD_CTRL_DIR , RW);	/* make RW pin o/p pin*/
     47c:	8a e3       	ldi	r24, 0x3A	; 58
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	2a e3       	ldi	r18, 0x3A	; 58
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	f9 01       	movw	r30, r18
     486:	20 81       	ld	r18, Z
     488:	20 64       	ori	r18, 0x40	; 64
     48a:	fc 01       	movw	r30, r24
     48c:	20 83       	st	Z, r18
	SET_BIT(LCD_CTRL_DIR , E);	/*make E pin o/p pin*/
     48e:	8a e3       	ldi	r24, 0x3A	; 58
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	2a e3       	ldi	r18, 0x3A	; 58
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	f9 01       	movw	r30, r18
     498:	20 81       	ld	r18, Z
     49a:	20 68       	ori	r18, 0x80	; 128
     49c:	fc 01       	movw	r30, r24
     49e:	20 83       	st	Z, r18
#endif
	LCD_sendCommand(SWITCH_4_BIT_MODE);
	LCD_sendCommand(TWO_LINE_4_BITS);
#endif
#ifndef LCD_4_BITS_MODE
	SET_UPPER(LCD_DATA_DIR);
     4a0:	84 e3       	ldi	r24, 0x34	; 52
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	24 e3       	ldi	r18, 0x34	; 52
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	f9 01       	movw	r30, r18
     4aa:	20 81       	ld	r18, Z
     4ac:	2f 60       	ori	r18, 0x0F	; 15
     4ae:	fc 01       	movw	r30, r24
     4b0:	20 83       	st	Z, r18
	SET_LOWER(LCD_DATA_DIR);				/* make data port o/p port*/
     4b2:	84 e3       	ldi	r24, 0x34	; 52
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	24 e3       	ldi	r18, 0x34	; 52
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	f9 01       	movw	r30, r18
     4bc:	20 81       	ld	r18, Z
     4be:	20 6f       	ori	r18, 0xF0	; 240
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
	LCD_sendCommand(TWO_LINE_8_BITS);		/* 2lines + 8 bits mode*/
     4c4:	88 e3       	ldi	r24, 0x38	; 56
     4c6:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_sendCommand>
#endif
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);		/* Cursor off */
     4ca:	8c e0       	ldi	r24, 0x0C	; 12
     4cc:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN);		/* clear screen*/
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_sendCommand>
}
     4d6:	00 00       	nop
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret

000004de <LCD_sendCommand>:
void LCD_sendCommand(uint8 command)
{
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	e9 97       	sbiw	r28, 0x39	; 57
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	89 af       	std	Y+57, r24	; 0x39
	/*function definition*/
	CLEAR_BIT(LCD_CTRL_OUT , RS);	/*for command mode*/
     4f4:	8b e3       	ldi	r24, 0x3B	; 59
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	2b e3       	ldi	r18, 0x3B	; 59
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	f9 01       	movw	r30, r18
     4fe:	20 81       	ld	r18, Z
     500:	2f 7d       	andi	r18, 0xDF	; 223
     502:	fc 01       	movw	r30, r24
     504:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_OUT , RW);	/*for write mode*/
     506:	8b e3       	ldi	r24, 0x3B	; 59
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	2b e3       	ldi	r18, 0x3B	; 59
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	f9 01       	movw	r30, r18
     510:	20 81       	ld	r18, Z
     512:	2f 7b       	andi	r18, 0xBF	; 191
     514:	fc 01       	movw	r30, r24
     516:	20 83       	st	Z, r18
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	a0 ea       	ldi	r26, 0xA0	; 160
     51e:	b0 e4       	ldi	r27, 0x40	; 64
     520:	89 83       	std	Y+1, r24	; 0x01
     522:	9a 83       	std	Y+2, r25	; 0x02
     524:	ab 83       	std	Y+3, r26	; 0x03
     526:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	4a e7       	ldi	r20, 0x7A	; 122
     52e:	53 e4       	ldi	r21, 0x43	; 67
     530:	69 81       	ldd	r22, Y+1	; 0x01
     532:	7a 81       	ldd	r23, Y+2	; 0x02
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	9c 81       	ldd	r25, Y+4	; 0x04
     538:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     53c:	dc 01       	movw	r26, r24
     53e:	cb 01       	movw	r24, r22
     540:	8f a7       	std	Y+47, r24	; 0x2f
     542:	98 ab       	std	Y+48, r25	; 0x30
     544:	a9 ab       	std	Y+49, r26	; 0x31
     546:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	40 e8       	ldi	r20, 0x80	; 128
     54e:	5f e3       	ldi	r21, 0x3F	; 63
     550:	6f a5       	ldd	r22, Y+47	; 0x2f
     552:	78 a9       	ldd	r23, Y+48	; 0x30
     554:	89 a9       	ldd	r24, Y+49	; 0x31
     556:	9a a9       	ldd	r25, Y+50	; 0x32
     558:	0e 94 b1 08 	call	0x1162	; 0x1162 <__cmpsf2>
     55c:	88 23       	and	r24, r24
     55e:	2c f4       	brge	.+10     	; 0x56a <LCD_sendCommand+0x8c>
		__ticks = 1;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	9c ab       	std	Y+52, r25	; 0x34
     566:	8b ab       	std	Y+51, r24	; 0x33
     568:	3f c0       	rjmp	.+126    	; 0x5e8 <LCD_sendCommand+0x10a>
	else if (__tmp > 65535)
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	3f ef       	ldi	r19, 0xFF	; 255
     56e:	4f e7       	ldi	r20, 0x7F	; 127
     570:	57 e4       	ldi	r21, 0x47	; 71
     572:	6f a5       	ldd	r22, Y+47	; 0x2f
     574:	78 a9       	ldd	r23, Y+48	; 0x30
     576:	89 a9       	ldd	r24, Y+49	; 0x31
     578:	9a a9       	ldd	r25, Y+50	; 0x32
     57a:	0e 94 10 0a 	call	0x1420	; 0x1420 <__gesf2>
     57e:	18 16       	cp	r1, r24
     580:	4c f5       	brge	.+82     	; 0x5d4 <LCD_sendCommand+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e2       	ldi	r20, 0x20	; 32
     588:	51 e4       	ldi	r21, 0x41	; 65
     58a:	69 81       	ldd	r22, Y+1	; 0x01
     58c:	7a 81       	ldd	r23, Y+2	; 0x02
     58e:	8b 81       	ldd	r24, Y+3	; 0x03
     590:	9c 81       	ldd	r25, Y+4	; 0x04
     592:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     596:	dc 01       	movw	r26, r24
     598:	cb 01       	movw	r24, r22
     59a:	bc 01       	movw	r22, r24
     59c:	cd 01       	movw	r24, r26
     59e:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     5a2:	dc 01       	movw	r26, r24
     5a4:	cb 01       	movw	r24, r22
     5a6:	9c ab       	std	Y+52, r25	; 0x34
     5a8:	8b ab       	std	Y+51, r24	; 0x33
     5aa:	0f c0       	rjmp	.+30     	; 0x5ca <LCD_sendCommand+0xec>
     5ac:	89 e1       	ldi	r24, 0x19	; 25
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	9e ab       	std	Y+54, r25	; 0x36
     5b2:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5b4:	8d a9       	ldd	r24, Y+53	; 0x35
     5b6:	9e a9       	ldd	r25, Y+54	; 0x36
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <LCD_sendCommand+0xda>
     5bc:	9e ab       	std	Y+54, r25	; 0x36
     5be:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c0:	8b a9       	ldd	r24, Y+51	; 0x33
     5c2:	9c a9       	ldd	r25, Y+52	; 0x34
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	9c ab       	std	Y+52, r25	; 0x34
     5c8:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ca:	8b a9       	ldd	r24, Y+51	; 0x33
     5cc:	9c a9       	ldd	r25, Y+52	; 0x34
     5ce:	89 2b       	or	r24, r25
     5d0:	69 f7       	brne	.-38     	; 0x5ac <LCD_sendCommand+0xce>
     5d2:	14 c0       	rjmp	.+40     	; 0x5fc <LCD_sendCommand+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5d4:	6f a5       	ldd	r22, Y+47	; 0x2f
     5d6:	78 a9       	ldd	r23, Y+48	; 0x30
     5d8:	89 a9       	ldd	r24, Y+49	; 0x31
     5da:	9a a9       	ldd	r25, Y+50	; 0x32
     5dc:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	9c ab       	std	Y+52, r25	; 0x34
     5e6:	8b ab       	std	Y+51, r24	; 0x33
     5e8:	8b a9       	ldd	r24, Y+51	; 0x33
     5ea:	9c a9       	ldd	r25, Y+52	; 0x34
     5ec:	98 af       	std	Y+56, r25	; 0x38
     5ee:	8f ab       	std	Y+55, r24	; 0x37
     5f0:	8f a9       	ldd	r24, Y+55	; 0x37
     5f2:	98 ad       	ldd	r25, Y+56	; 0x38
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <LCD_sendCommand+0x116>
     5f8:	98 af       	std	Y+56, r25	; 0x38
     5fa:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(5);					/*for write timing diagram*/
	SET_BIT(LCD_CTRL_OUT , E);		/*to enable the lcd*/
     5fc:	8b e3       	ldi	r24, 0x3B	; 59
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	2b e3       	ldi	r18, 0x3B	; 59
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	f9 01       	movw	r30, r18
     606:	20 81       	ld	r18, Z
     608:	20 68       	ori	r18, 0x80	; 128
     60a:	fc 01       	movw	r30, r24
     60c:	20 83       	st	Z, r18
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	a0 ea       	ldi	r26, 0xA0	; 160
     614:	b0 e4       	ldi	r27, 0x40	; 64
     616:	8d 83       	std	Y+5, r24	; 0x05
     618:	9e 83       	std	Y+6, r25	; 0x06
     61a:	af 83       	std	Y+7, r26	; 0x07
     61c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	4a e7       	ldi	r20, 0x7A	; 122
     624:	53 e4       	ldi	r21, 0x43	; 67
     626:	6d 81       	ldd	r22, Y+5	; 0x05
     628:	7e 81       	ldd	r23, Y+6	; 0x06
     62a:	8f 81       	ldd	r24, Y+7	; 0x07
     62c:	98 85       	ldd	r25, Y+8	; 0x08
     62e:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     632:	dc 01       	movw	r26, r24
     634:	cb 01       	movw	r24, r22
     636:	8d a3       	std	Y+37, r24	; 0x25
     638:	9e a3       	std	Y+38, r25	; 0x26
     63a:	af a3       	std	Y+39, r26	; 0x27
     63c:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e8       	ldi	r20, 0x80	; 128
     644:	5f e3       	ldi	r21, 0x3F	; 63
     646:	6d a1       	ldd	r22, Y+37	; 0x25
     648:	7e a1       	ldd	r23, Y+38	; 0x26
     64a:	8f a1       	ldd	r24, Y+39	; 0x27
     64c:	98 a5       	ldd	r25, Y+40	; 0x28
     64e:	0e 94 b1 08 	call	0x1162	; 0x1162 <__cmpsf2>
     652:	88 23       	and	r24, r24
     654:	2c f4       	brge	.+10     	; 0x660 <LCD_sendCommand+0x182>
		__ticks = 1;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	9a a7       	std	Y+42, r25	; 0x2a
     65c:	89 a7       	std	Y+41, r24	; 0x29
     65e:	3f c0       	rjmp	.+126    	; 0x6de <LCD_sendCommand+0x200>
	else if (__tmp > 65535)
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	3f ef       	ldi	r19, 0xFF	; 255
     664:	4f e7       	ldi	r20, 0x7F	; 127
     666:	57 e4       	ldi	r21, 0x47	; 71
     668:	6d a1       	ldd	r22, Y+37	; 0x25
     66a:	7e a1       	ldd	r23, Y+38	; 0x26
     66c:	8f a1       	ldd	r24, Y+39	; 0x27
     66e:	98 a5       	ldd	r25, Y+40	; 0x28
     670:	0e 94 10 0a 	call	0x1420	; 0x1420 <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	4c f5       	brge	.+82     	; 0x6ca <LCD_sendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	40 e2       	ldi	r20, 0x20	; 32
     67e:	51 e4       	ldi	r21, 0x41	; 65
     680:	6d 81       	ldd	r22, Y+5	; 0x05
     682:	7e 81       	ldd	r23, Y+6	; 0x06
     684:	8f 81       	ldd	r24, Y+7	; 0x07
     686:	98 85       	ldd	r25, Y+8	; 0x08
     688:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	bc 01       	movw	r22, r24
     692:	cd 01       	movw	r24, r26
     694:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     698:	dc 01       	movw	r26, r24
     69a:	cb 01       	movw	r24, r22
     69c:	9a a7       	std	Y+42, r25	; 0x2a
     69e:	89 a7       	std	Y+41, r24	; 0x29
     6a0:	0f c0       	rjmp	.+30     	; 0x6c0 <LCD_sendCommand+0x1e2>
     6a2:	89 e1       	ldi	r24, 0x19	; 25
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	9c a7       	std	Y+44, r25	; 0x2c
     6a8:	8b a7       	std	Y+43, r24	; 0x2b
     6aa:	8b a5       	ldd	r24, Y+43	; 0x2b
     6ac:	9c a5       	ldd	r25, Y+44	; 0x2c
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <LCD_sendCommand+0x1d0>
     6b2:	9c a7       	std	Y+44, r25	; 0x2c
     6b4:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b6:	89 a5       	ldd	r24, Y+41	; 0x29
     6b8:	9a a5       	ldd	r25, Y+42	; 0x2a
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	9a a7       	std	Y+42, r25	; 0x2a
     6be:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c0:	89 a5       	ldd	r24, Y+41	; 0x29
     6c2:	9a a5       	ldd	r25, Y+42	; 0x2a
     6c4:	89 2b       	or	r24, r25
     6c6:	69 f7       	brne	.-38     	; 0x6a2 <LCD_sendCommand+0x1c4>
     6c8:	14 c0       	rjmp	.+40     	; 0x6f2 <LCD_sendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6ca:	6d a1       	ldd	r22, Y+37	; 0x25
     6cc:	7e a1       	ldd	r23, Y+38	; 0x26
     6ce:	8f a1       	ldd	r24, Y+39	; 0x27
     6d0:	98 a5       	ldd	r25, Y+40	; 0x28
     6d2:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9a a7       	std	Y+42, r25	; 0x2a
     6dc:	89 a7       	std	Y+41, r24	; 0x29
     6de:	89 a5       	ldd	r24, Y+41	; 0x29
     6e0:	9a a5       	ldd	r25, Y+42	; 0x2a
     6e2:	9e a7       	std	Y+46, r25	; 0x2e
     6e4:	8d a7       	std	Y+45, r24	; 0x2d
     6e6:	8d a5       	ldd	r24, Y+45	; 0x2d
     6e8:	9e a5       	ldd	r25, Y+46	; 0x2e
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <LCD_sendCommand+0x20c>
     6ee:	9e a7       	std	Y+46, r25	; 0x2e
     6f0:	8d a7       	std	Y+45, r24	; 0x2d
	PUT_UPPER_IN_UPPER(LCD_DATA_OUT , command);
	#else
	PUT_UPPER_IN_LOWER(LCD_DATA_OUT , command);
	#endif
	#else
	LCD_DATA_OUT = command;			/*out the command variable*/
     6f2:	85 e3       	ldi	r24, 0x35	; 53
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	29 ad       	ldd	r18, Y+57	; 0x39
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	a0 ea       	ldi	r26, 0xA0	; 160
     702:	b0 e4       	ldi	r27, 0x40	; 64
     704:	89 87       	std	Y+9, r24	; 0x09
     706:	9a 87       	std	Y+10, r25	; 0x0a
     708:	ab 87       	std	Y+11, r26	; 0x0b
     70a:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	4a e7       	ldi	r20, 0x7A	; 122
     712:	53 e4       	ldi	r21, 0x43	; 67
     714:	69 85       	ldd	r22, Y+9	; 0x09
     716:	7a 85       	ldd	r23, Y+10	; 0x0a
     718:	8b 85       	ldd	r24, Y+11	; 0x0b
     71a:	9c 85       	ldd	r25, Y+12	; 0x0c
     71c:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     720:	dc 01       	movw	r26, r24
     722:	cb 01       	movw	r24, r22
     724:	8b 8f       	std	Y+27, r24	; 0x1b
     726:	9c 8f       	std	Y+28, r25	; 0x1c
     728:	ad 8f       	std	Y+29, r26	; 0x1d
     72a:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e8       	ldi	r20, 0x80	; 128
     732:	5f e3       	ldi	r21, 0x3F	; 63
     734:	6b 8d       	ldd	r22, Y+27	; 0x1b
     736:	7c 8d       	ldd	r23, Y+28	; 0x1c
     738:	8d 8d       	ldd	r24, Y+29	; 0x1d
     73a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     73c:	0e 94 b1 08 	call	0x1162	; 0x1162 <__cmpsf2>
     740:	88 23       	and	r24, r24
     742:	2c f4       	brge	.+10     	; 0x74e <LCD_sendCommand+0x270>
		__ticks = 1;
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	98 a3       	std	Y+32, r25	; 0x20
     74a:	8f 8f       	std	Y+31, r24	; 0x1f
     74c:	3f c0       	rjmp	.+126    	; 0x7cc <LCD_sendCommand+0x2ee>
	else if (__tmp > 65535)
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	3f ef       	ldi	r19, 0xFF	; 255
     752:	4f e7       	ldi	r20, 0x7F	; 127
     754:	57 e4       	ldi	r21, 0x47	; 71
     756:	6b 8d       	ldd	r22, Y+27	; 0x1b
     758:	7c 8d       	ldd	r23, Y+28	; 0x1c
     75a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     75c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     75e:	0e 94 10 0a 	call	0x1420	; 0x1420 <__gesf2>
     762:	18 16       	cp	r1, r24
     764:	4c f5       	brge	.+82     	; 0x7b8 <LCD_sendCommand+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	40 e2       	ldi	r20, 0x20	; 32
     76c:	51 e4       	ldi	r21, 0x41	; 65
     76e:	69 85       	ldd	r22, Y+9	; 0x09
     770:	7a 85       	ldd	r23, Y+10	; 0x0a
     772:	8b 85       	ldd	r24, Y+11	; 0x0b
     774:	9c 85       	ldd	r25, Y+12	; 0x0c
     776:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     77a:	dc 01       	movw	r26, r24
     77c:	cb 01       	movw	r24, r22
     77e:	bc 01       	movw	r22, r24
     780:	cd 01       	movw	r24, r26
     782:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     786:	dc 01       	movw	r26, r24
     788:	cb 01       	movw	r24, r22
     78a:	98 a3       	std	Y+32, r25	; 0x20
     78c:	8f 8f       	std	Y+31, r24	; 0x1f
     78e:	0f c0       	rjmp	.+30     	; 0x7ae <LCD_sendCommand+0x2d0>
     790:	89 e1       	ldi	r24, 0x19	; 25
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	9a a3       	std	Y+34, r25	; 0x22
     796:	89 a3       	std	Y+33, r24	; 0x21
     798:	89 a1       	ldd	r24, Y+33	; 0x21
     79a:	9a a1       	ldd	r25, Y+34	; 0x22
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	f1 f7       	brne	.-4      	; 0x79c <LCD_sendCommand+0x2be>
     7a0:	9a a3       	std	Y+34, r25	; 0x22
     7a2:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7a6:	98 a1       	ldd	r25, Y+32	; 0x20
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	98 a3       	std	Y+32, r25	; 0x20
     7ac:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7b0:	98 a1       	ldd	r25, Y+32	; 0x20
     7b2:	89 2b       	or	r24, r25
     7b4:	69 f7       	brne	.-38     	; 0x790 <LCD_sendCommand+0x2b2>
     7b6:	14 c0       	rjmp	.+40     	; 0x7e0 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7b8:	6b 8d       	ldd	r22, Y+27	; 0x1b
     7ba:	7c 8d       	ldd	r23, Y+28	; 0x1c
     7bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     7be:	9e 8d       	ldd	r25, Y+30	; 0x1e
     7c0:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     7c4:	dc 01       	movw	r26, r24
     7c6:	cb 01       	movw	r24, r22
     7c8:	98 a3       	std	Y+32, r25	; 0x20
     7ca:	8f 8f       	std	Y+31, r24	; 0x1f
     7cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7ce:	98 a1       	ldd	r25, Y+32	; 0x20
     7d0:	9c a3       	std	Y+36, r25	; 0x24
     7d2:	8b a3       	std	Y+35, r24	; 0x23
     7d4:	8b a1       	ldd	r24, Y+35	; 0x23
     7d6:	9c a1       	ldd	r25, Y+36	; 0x24
     7d8:	01 97       	sbiw	r24, 0x01	; 1
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <LCD_sendCommand+0x2fa>
     7dc:	9c a3       	std	Y+36, r25	; 0x24
     7de:	8b a3       	std	Y+35, r24	; 0x23
	#endif
	_delay_ms(5);					/*for write timing diagram*/
	CLEAR_BIT(LCD_CTRL_OUT , E);	/*for write timing diagram*/
     7e0:	8b e3       	ldi	r24, 0x3B	; 59
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	2b e3       	ldi	r18, 0x3B	; 59
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	f9 01       	movw	r30, r18
     7ea:	20 81       	ld	r18, Z
     7ec:	2f 77       	andi	r18, 0x7F	; 127
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 83       	st	Z, r18
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	a0 ea       	ldi	r26, 0xA0	; 160
     7f8:	b0 e4       	ldi	r27, 0x40	; 64
     7fa:	8d 87       	std	Y+13, r24	; 0x0d
     7fc:	9e 87       	std	Y+14, r25	; 0x0e
     7fe:	af 87       	std	Y+15, r26	; 0x0f
     800:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	4a e7       	ldi	r20, 0x7A	; 122
     808:	53 e4       	ldi	r21, 0x43	; 67
     80a:	6d 85       	ldd	r22, Y+13	; 0x0d
     80c:	7e 85       	ldd	r23, Y+14	; 0x0e
     80e:	8f 85       	ldd	r24, Y+15	; 0x0f
     810:	98 89       	ldd	r25, Y+16	; 0x10
     812:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     816:	dc 01       	movw	r26, r24
     818:	cb 01       	movw	r24, r22
     81a:	89 8b       	std	Y+17, r24	; 0x11
     81c:	9a 8b       	std	Y+18, r25	; 0x12
     81e:	ab 8b       	std	Y+19, r26	; 0x13
     820:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e8       	ldi	r20, 0x80	; 128
     828:	5f e3       	ldi	r21, 0x3F	; 63
     82a:	69 89       	ldd	r22, Y+17	; 0x11
     82c:	7a 89       	ldd	r23, Y+18	; 0x12
     82e:	8b 89       	ldd	r24, Y+19	; 0x13
     830:	9c 89       	ldd	r25, Y+20	; 0x14
     832:	0e 94 b1 08 	call	0x1162	; 0x1162 <__cmpsf2>
     836:	88 23       	and	r24, r24
     838:	2c f4       	brge	.+10     	; 0x844 <LCD_sendCommand+0x366>
		__ticks = 1;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	9e 8b       	std	Y+22, r25	; 0x16
     840:	8d 8b       	std	Y+21, r24	; 0x15
     842:	3f c0       	rjmp	.+126    	; 0x8c2 <LCD_sendCommand+0x3e4>
	else if (__tmp > 65535)
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	3f ef       	ldi	r19, 0xFF	; 255
     848:	4f e7       	ldi	r20, 0x7F	; 127
     84a:	57 e4       	ldi	r21, 0x47	; 71
     84c:	69 89       	ldd	r22, Y+17	; 0x11
     84e:	7a 89       	ldd	r23, Y+18	; 0x12
     850:	8b 89       	ldd	r24, Y+19	; 0x13
     852:	9c 89       	ldd	r25, Y+20	; 0x14
     854:	0e 94 10 0a 	call	0x1420	; 0x1420 <__gesf2>
     858:	18 16       	cp	r1, r24
     85a:	4c f5       	brge	.+82     	; 0x8ae <LCD_sendCommand+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	40 e2       	ldi	r20, 0x20	; 32
     862:	51 e4       	ldi	r21, 0x41	; 65
     864:	6d 85       	ldd	r22, Y+13	; 0x0d
     866:	7e 85       	ldd	r23, Y+14	; 0x0e
     868:	8f 85       	ldd	r24, Y+15	; 0x0f
     86a:	98 89       	ldd	r25, Y+16	; 0x10
     86c:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	bc 01       	movw	r22, r24
     876:	cd 01       	movw	r24, r26
     878:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	9e 8b       	std	Y+22, r25	; 0x16
     882:	8d 8b       	std	Y+21, r24	; 0x15
     884:	0f c0       	rjmp	.+30     	; 0x8a4 <LCD_sendCommand+0x3c6>
     886:	89 e1       	ldi	r24, 0x19	; 25
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	98 8f       	std	Y+24, r25	; 0x18
     88c:	8f 8b       	std	Y+23, r24	; 0x17
     88e:	8f 89       	ldd	r24, Y+23	; 0x17
     890:	98 8d       	ldd	r25, Y+24	; 0x18
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <LCD_sendCommand+0x3b4>
     896:	98 8f       	std	Y+24, r25	; 0x18
     898:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     89a:	8d 89       	ldd	r24, Y+21	; 0x15
     89c:	9e 89       	ldd	r25, Y+22	; 0x16
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	9e 8b       	std	Y+22, r25	; 0x16
     8a2:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8a4:	8d 89       	ldd	r24, Y+21	; 0x15
     8a6:	9e 89       	ldd	r25, Y+22	; 0x16
     8a8:	89 2b       	or	r24, r25
     8aa:	69 f7       	brne	.-38     	; 0x886 <LCD_sendCommand+0x3a8>
	_delay_ms(5);					/*for write timing diagram*/
}
     8ac:	14 c0       	rjmp	.+40     	; 0x8d6 <LCD_sendCommand+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ae:	69 89       	ldd	r22, Y+17	; 0x11
     8b0:	7a 89       	ldd	r23, Y+18	; 0x12
     8b2:	8b 89       	ldd	r24, Y+19	; 0x13
     8b4:	9c 89       	ldd	r25, Y+20	; 0x14
     8b6:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     8ba:	dc 01       	movw	r26, r24
     8bc:	cb 01       	movw	r24, r22
     8be:	9e 8b       	std	Y+22, r25	; 0x16
     8c0:	8d 8b       	std	Y+21, r24	; 0x15
     8c2:	8d 89       	ldd	r24, Y+21	; 0x15
     8c4:	9e 89       	ldd	r25, Y+22	; 0x16
     8c6:	9a 8f       	std	Y+26, r25	; 0x1a
     8c8:	89 8f       	std	Y+25, r24	; 0x19
     8ca:	89 8d       	ldd	r24, Y+25	; 0x19
     8cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <LCD_sendCommand+0x3f0>
     8d2:	9a 8f       	std	Y+26, r25	; 0x1a
     8d4:	89 8f       	std	Y+25, r24	; 0x19
     8d6:	00 00       	nop
     8d8:	e9 96       	adiw	r28, 0x39	; 57
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 a_data)
{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	e9 97       	sbiw	r28, 0x39	; 57
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	89 af       	std	Y+57, r24	; 0x39
	/*function definition*/
	SET_BIT(LCD_CTRL_OUT , RS);	/*for command mode*/
     900:	8b e3       	ldi	r24, 0x3B	; 59
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	2b e3       	ldi	r18, 0x3B	; 59
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	f9 01       	movw	r30, r18
     90a:	20 81       	ld	r18, Z
     90c:	20 62       	ori	r18, 0x20	; 32
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_OUT , RW);	/*for write mode*/
     912:	8b e3       	ldi	r24, 0x3B	; 59
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	2b e3       	ldi	r18, 0x3B	; 59
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	f9 01       	movw	r30, r18
     91c:	20 81       	ld	r18, Z
     91e:	2f 7b       	andi	r18, 0xBF	; 191
     920:	fc 01       	movw	r30, r24
     922:	20 83       	st	Z, r18
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 ea       	ldi	r26, 0xA0	; 160
     92a:	b0 e4       	ldi	r27, 0x40	; 64
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	9a 83       	std	Y+2, r25	; 0x02
     930:	ab 83       	std	Y+3, r26	; 0x03
     932:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	4a e7       	ldi	r20, 0x7A	; 122
     93a:	53 e4       	ldi	r21, 0x43	; 67
     93c:	69 81       	ldd	r22, Y+1	; 0x01
     93e:	7a 81       	ldd	r23, Y+2	; 0x02
     940:	8b 81       	ldd	r24, Y+3	; 0x03
     942:	9c 81       	ldd	r25, Y+4	; 0x04
     944:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     948:	dc 01       	movw	r26, r24
     94a:	cb 01       	movw	r24, r22
     94c:	8f a7       	std	Y+47, r24	; 0x2f
     94e:	98 ab       	std	Y+48, r25	; 0x30
     950:	a9 ab       	std	Y+49, r26	; 0x31
     952:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	40 e8       	ldi	r20, 0x80	; 128
     95a:	5f e3       	ldi	r21, 0x3F	; 63
     95c:	6f a5       	ldd	r22, Y+47	; 0x2f
     95e:	78 a9       	ldd	r23, Y+48	; 0x30
     960:	89 a9       	ldd	r24, Y+49	; 0x31
     962:	9a a9       	ldd	r25, Y+50	; 0x32
     964:	0e 94 b1 08 	call	0x1162	; 0x1162 <__cmpsf2>
     968:	88 23       	and	r24, r24
     96a:	2c f4       	brge	.+10     	; 0x976 <LCD_displayCharacter+0x8c>
		__ticks = 1;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	9c ab       	std	Y+52, r25	; 0x34
     972:	8b ab       	std	Y+51, r24	; 0x33
     974:	3f c0       	rjmp	.+126    	; 0x9f4 <LCD_displayCharacter+0x10a>
	else if (__tmp > 65535)
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	3f ef       	ldi	r19, 0xFF	; 255
     97a:	4f e7       	ldi	r20, 0x7F	; 127
     97c:	57 e4       	ldi	r21, 0x47	; 71
     97e:	6f a5       	ldd	r22, Y+47	; 0x2f
     980:	78 a9       	ldd	r23, Y+48	; 0x30
     982:	89 a9       	ldd	r24, Y+49	; 0x31
     984:	9a a9       	ldd	r25, Y+50	; 0x32
     986:	0e 94 10 0a 	call	0x1420	; 0x1420 <__gesf2>
     98a:	18 16       	cp	r1, r24
     98c:	4c f5       	brge	.+82     	; 0x9e0 <LCD_displayCharacter+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	40 e2       	ldi	r20, 0x20	; 32
     994:	51 e4       	ldi	r21, 0x41	; 65
     996:	69 81       	ldd	r22, Y+1	; 0x01
     998:	7a 81       	ldd	r23, Y+2	; 0x02
     99a:	8b 81       	ldd	r24, Y+3	; 0x03
     99c:	9c 81       	ldd	r25, Y+4	; 0x04
     99e:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     9a2:	dc 01       	movw	r26, r24
     9a4:	cb 01       	movw	r24, r22
     9a6:	bc 01       	movw	r22, r24
     9a8:	cd 01       	movw	r24, r26
     9aa:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	9c ab       	std	Y+52, r25	; 0x34
     9b4:	8b ab       	std	Y+51, r24	; 0x33
     9b6:	0f c0       	rjmp	.+30     	; 0x9d6 <LCD_displayCharacter+0xec>
     9b8:	89 e1       	ldi	r24, 0x19	; 25
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	9e ab       	std	Y+54, r25	; 0x36
     9be:	8d ab       	std	Y+53, r24	; 0x35
     9c0:	8d a9       	ldd	r24, Y+53	; 0x35
     9c2:	9e a9       	ldd	r25, Y+54	; 0x36
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <LCD_displayCharacter+0xda>
     9c8:	9e ab       	std	Y+54, r25	; 0x36
     9ca:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9cc:	8b a9       	ldd	r24, Y+51	; 0x33
     9ce:	9c a9       	ldd	r25, Y+52	; 0x34
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	9c ab       	std	Y+52, r25	; 0x34
     9d4:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9d6:	8b a9       	ldd	r24, Y+51	; 0x33
     9d8:	9c a9       	ldd	r25, Y+52	; 0x34
     9da:	89 2b       	or	r24, r25
     9dc:	69 f7       	brne	.-38     	; 0x9b8 <LCD_displayCharacter+0xce>
     9de:	14 c0       	rjmp	.+40     	; 0xa08 <LCD_displayCharacter+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9e0:	6f a5       	ldd	r22, Y+47	; 0x2f
     9e2:	78 a9       	ldd	r23, Y+48	; 0x30
     9e4:	89 a9       	ldd	r24, Y+49	; 0x31
     9e6:	9a a9       	ldd	r25, Y+50	; 0x32
     9e8:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     9ec:	dc 01       	movw	r26, r24
     9ee:	cb 01       	movw	r24, r22
     9f0:	9c ab       	std	Y+52, r25	; 0x34
     9f2:	8b ab       	std	Y+51, r24	; 0x33
     9f4:	8b a9       	ldd	r24, Y+51	; 0x33
     9f6:	9c a9       	ldd	r25, Y+52	; 0x34
     9f8:	98 af       	std	Y+56, r25	; 0x38
     9fa:	8f ab       	std	Y+55, r24	; 0x37
     9fc:	8f a9       	ldd	r24, Y+55	; 0x37
     9fe:	98 ad       	ldd	r25, Y+56	; 0x38
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	f1 f7       	brne	.-4      	; 0xa00 <LCD_displayCharacter+0x116>
     a04:	98 af       	std	Y+56, r25	; 0x38
     a06:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(5);					/*for write timing diagram*/
	SET_BIT(LCD_CTRL_OUT , E);		/*to enable the lcd*/
     a08:	8b e3       	ldi	r24, 0x3B	; 59
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	2b e3       	ldi	r18, 0x3B	; 59
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	f9 01       	movw	r30, r18
     a12:	20 81       	ld	r18, Z
     a14:	20 68       	ori	r18, 0x80	; 128
     a16:	fc 01       	movw	r30, r24
     a18:	20 83       	st	Z, r18
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a0 ea       	ldi	r26, 0xA0	; 160
     a20:	b0 e4       	ldi	r27, 0x40	; 64
     a22:	8d 83       	std	Y+5, r24	; 0x05
     a24:	9e 83       	std	Y+6, r25	; 0x06
     a26:	af 83       	std	Y+7, r26	; 0x07
     a28:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	4a e7       	ldi	r20, 0x7A	; 122
     a30:	53 e4       	ldi	r21, 0x43	; 67
     a32:	6d 81       	ldd	r22, Y+5	; 0x05
     a34:	7e 81       	ldd	r23, Y+6	; 0x06
     a36:	8f 81       	ldd	r24, Y+7	; 0x07
     a38:	98 85       	ldd	r25, Y+8	; 0x08
     a3a:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     a3e:	dc 01       	movw	r26, r24
     a40:	cb 01       	movw	r24, r22
     a42:	8d a3       	std	Y+37, r24	; 0x25
     a44:	9e a3       	std	Y+38, r25	; 0x26
     a46:	af a3       	std	Y+39, r26	; 0x27
     a48:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e8       	ldi	r20, 0x80	; 128
     a50:	5f e3       	ldi	r21, 0x3F	; 63
     a52:	6d a1       	ldd	r22, Y+37	; 0x25
     a54:	7e a1       	ldd	r23, Y+38	; 0x26
     a56:	8f a1       	ldd	r24, Y+39	; 0x27
     a58:	98 a5       	ldd	r25, Y+40	; 0x28
     a5a:	0e 94 b1 08 	call	0x1162	; 0x1162 <__cmpsf2>
     a5e:	88 23       	and	r24, r24
     a60:	2c f4       	brge	.+10     	; 0xa6c <LCD_displayCharacter+0x182>
		__ticks = 1;
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	9a a7       	std	Y+42, r25	; 0x2a
     a68:	89 a7       	std	Y+41, r24	; 0x29
     a6a:	3f c0       	rjmp	.+126    	; 0xaea <LCD_displayCharacter+0x200>
	else if (__tmp > 65535)
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	3f ef       	ldi	r19, 0xFF	; 255
     a70:	4f e7       	ldi	r20, 0x7F	; 127
     a72:	57 e4       	ldi	r21, 0x47	; 71
     a74:	6d a1       	ldd	r22, Y+37	; 0x25
     a76:	7e a1       	ldd	r23, Y+38	; 0x26
     a78:	8f a1       	ldd	r24, Y+39	; 0x27
     a7a:	98 a5       	ldd	r25, Y+40	; 0x28
     a7c:	0e 94 10 0a 	call	0x1420	; 0x1420 <__gesf2>
     a80:	18 16       	cp	r1, r24
     a82:	4c f5       	brge	.+82     	; 0xad6 <LCD_displayCharacter+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 e2       	ldi	r20, 0x20	; 32
     a8a:	51 e4       	ldi	r21, 0x41	; 65
     a8c:	6d 81       	ldd	r22, Y+5	; 0x05
     a8e:	7e 81       	ldd	r23, Y+6	; 0x06
     a90:	8f 81       	ldd	r24, Y+7	; 0x07
     a92:	98 85       	ldd	r25, Y+8	; 0x08
     a94:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     a98:	dc 01       	movw	r26, r24
     a9a:	cb 01       	movw	r24, r22
     a9c:	bc 01       	movw	r22, r24
     a9e:	cd 01       	movw	r24, r26
     aa0:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     aa4:	dc 01       	movw	r26, r24
     aa6:	cb 01       	movw	r24, r22
     aa8:	9a a7       	std	Y+42, r25	; 0x2a
     aaa:	89 a7       	std	Y+41, r24	; 0x29
     aac:	0f c0       	rjmp	.+30     	; 0xacc <LCD_displayCharacter+0x1e2>
     aae:	89 e1       	ldi	r24, 0x19	; 25
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	9c a7       	std	Y+44, r25	; 0x2c
     ab4:	8b a7       	std	Y+43, r24	; 0x2b
     ab6:	8b a5       	ldd	r24, Y+43	; 0x2b
     ab8:	9c a5       	ldd	r25, Y+44	; 0x2c
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	f1 f7       	brne	.-4      	; 0xaba <LCD_displayCharacter+0x1d0>
     abe:	9c a7       	std	Y+44, r25	; 0x2c
     ac0:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac2:	89 a5       	ldd	r24, Y+41	; 0x29
     ac4:	9a a5       	ldd	r25, Y+42	; 0x2a
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	9a a7       	std	Y+42, r25	; 0x2a
     aca:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     acc:	89 a5       	ldd	r24, Y+41	; 0x29
     ace:	9a a5       	ldd	r25, Y+42	; 0x2a
     ad0:	89 2b       	or	r24, r25
     ad2:	69 f7       	brne	.-38     	; 0xaae <LCD_displayCharacter+0x1c4>
     ad4:	14 c0       	rjmp	.+40     	; 0xafe <LCD_displayCharacter+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ad6:	6d a1       	ldd	r22, Y+37	; 0x25
     ad8:	7e a1       	ldd	r23, Y+38	; 0x26
     ada:	8f a1       	ldd	r24, Y+39	; 0x27
     adc:	98 a5       	ldd	r25, Y+40	; 0x28
     ade:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     ae2:	dc 01       	movw	r26, r24
     ae4:	cb 01       	movw	r24, r22
     ae6:	9a a7       	std	Y+42, r25	; 0x2a
     ae8:	89 a7       	std	Y+41, r24	; 0x29
     aea:	89 a5       	ldd	r24, Y+41	; 0x29
     aec:	9a a5       	ldd	r25, Y+42	; 0x2a
     aee:	9e a7       	std	Y+46, r25	; 0x2e
     af0:	8d a7       	std	Y+45, r24	; 0x2d
     af2:	8d a5       	ldd	r24, Y+45	; 0x2d
     af4:	9e a5       	ldd	r25, Y+46	; 0x2e
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <LCD_displayCharacter+0x20c>
     afa:	9e a7       	std	Y+46, r25	; 0x2e
     afc:	8d a7       	std	Y+45, r24	; 0x2d
	PUT_UPPER_IN_UPPER(LCD_DATA_OUT , a_data);
	#else
	PUT_UPPER_IN_LOWER(LCD_DATA_OUT , a_data);
	#endif
	#else
	LCD_DATA_OUT = a_data;			/*out the command variable*/
     afe:	85 e3       	ldi	r24, 0x35	; 53
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	29 ad       	ldd	r18, Y+57	; 0x39
     b04:	fc 01       	movw	r30, r24
     b06:	20 83       	st	Z, r18
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	a0 ea       	ldi	r26, 0xA0	; 160
     b0e:	b0 e4       	ldi	r27, 0x40	; 64
     b10:	89 87       	std	Y+9, r24	; 0x09
     b12:	9a 87       	std	Y+10, r25	; 0x0a
     b14:	ab 87       	std	Y+11, r26	; 0x0b
     b16:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	4a e7       	ldi	r20, 0x7A	; 122
     b1e:	53 e4       	ldi	r21, 0x43	; 67
     b20:	69 85       	ldd	r22, Y+9	; 0x09
     b22:	7a 85       	ldd	r23, Y+10	; 0x0a
     b24:	8b 85       	ldd	r24, Y+11	; 0x0b
     b26:	9c 85       	ldd	r25, Y+12	; 0x0c
     b28:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     b2c:	dc 01       	movw	r26, r24
     b2e:	cb 01       	movw	r24, r22
     b30:	8b 8f       	std	Y+27, r24	; 0x1b
     b32:	9c 8f       	std	Y+28, r25	; 0x1c
     b34:	ad 8f       	std	Y+29, r26	; 0x1d
     b36:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	40 e8       	ldi	r20, 0x80	; 128
     b3e:	5f e3       	ldi	r21, 0x3F	; 63
     b40:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b42:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b44:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b46:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b48:	0e 94 b1 08 	call	0x1162	; 0x1162 <__cmpsf2>
     b4c:	88 23       	and	r24, r24
     b4e:	2c f4       	brge	.+10     	; 0xb5a <LCD_displayCharacter+0x270>
		__ticks = 1;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	98 a3       	std	Y+32, r25	; 0x20
     b56:	8f 8f       	std	Y+31, r24	; 0x1f
     b58:	3f c0       	rjmp	.+126    	; 0xbd8 <LCD_displayCharacter+0x2ee>
	else if (__tmp > 65535)
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	3f ef       	ldi	r19, 0xFF	; 255
     b5e:	4f e7       	ldi	r20, 0x7F	; 127
     b60:	57 e4       	ldi	r21, 0x47	; 71
     b62:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b64:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b68:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b6a:	0e 94 10 0a 	call	0x1420	; 0x1420 <__gesf2>
     b6e:	18 16       	cp	r1, r24
     b70:	4c f5       	brge	.+82     	; 0xbc4 <LCD_displayCharacter+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	40 e2       	ldi	r20, 0x20	; 32
     b78:	51 e4       	ldi	r21, 0x41	; 65
     b7a:	69 85       	ldd	r22, Y+9	; 0x09
     b7c:	7a 85       	ldd	r23, Y+10	; 0x0a
     b7e:	8b 85       	ldd	r24, Y+11	; 0x0b
     b80:	9c 85       	ldd	r25, Y+12	; 0x0c
     b82:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	bc 01       	movw	r22, r24
     b8c:	cd 01       	movw	r24, r26
     b8e:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     b92:	dc 01       	movw	r26, r24
     b94:	cb 01       	movw	r24, r22
     b96:	98 a3       	std	Y+32, r25	; 0x20
     b98:	8f 8f       	std	Y+31, r24	; 0x1f
     b9a:	0f c0       	rjmp	.+30     	; 0xbba <LCD_displayCharacter+0x2d0>
     b9c:	89 e1       	ldi	r24, 0x19	; 25
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	9a a3       	std	Y+34, r25	; 0x22
     ba2:	89 a3       	std	Y+33, r24	; 0x21
     ba4:	89 a1       	ldd	r24, Y+33	; 0x21
     ba6:	9a a1       	ldd	r25, Y+34	; 0x22
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <LCD_displayCharacter+0x2be>
     bac:	9a a3       	std	Y+34, r25	; 0x22
     bae:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bb2:	98 a1       	ldd	r25, Y+32	; 0x20
     bb4:	01 97       	sbiw	r24, 0x01	; 1
     bb6:	98 a3       	std	Y+32, r25	; 0x20
     bb8:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bba:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bbc:	98 a1       	ldd	r25, Y+32	; 0x20
     bbe:	89 2b       	or	r24, r25
     bc0:	69 f7       	brne	.-38     	; 0xb9c <LCD_displayCharacter+0x2b2>
     bc2:	14 c0       	rjmp	.+40     	; 0xbec <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bc4:	6b 8d       	ldd	r22, Y+27	; 0x1b
     bc6:	7c 8d       	ldd	r23, Y+28	; 0x1c
     bc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bca:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bcc:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	98 a3       	std	Y+32, r25	; 0x20
     bd6:	8f 8f       	std	Y+31, r24	; 0x1f
     bd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bda:	98 a1       	ldd	r25, Y+32	; 0x20
     bdc:	9c a3       	std	Y+36, r25	; 0x24
     bde:	8b a3       	std	Y+35, r24	; 0x23
     be0:	8b a1       	ldd	r24, Y+35	; 0x23
     be2:	9c a1       	ldd	r25, Y+36	; 0x24
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <LCD_displayCharacter+0x2fa>
     be8:	9c a3       	std	Y+36, r25	; 0x24
     bea:	8b a3       	std	Y+35, r24	; 0x23
	#endif
	_delay_ms(5);					/*for write timing diagram*/
	CLEAR_BIT(LCD_CTRL_OUT , E);	/*for write timing diagram*/
     bec:	8b e3       	ldi	r24, 0x3B	; 59
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	2b e3       	ldi	r18, 0x3B	; 59
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	f9 01       	movw	r30, r18
     bf6:	20 81       	ld	r18, Z
     bf8:	2f 77       	andi	r18, 0x7F	; 127
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	a0 ea       	ldi	r26, 0xA0	; 160
     c04:	b0 e4       	ldi	r27, 0x40	; 64
     c06:	8d 87       	std	Y+13, r24	; 0x0d
     c08:	9e 87       	std	Y+14, r25	; 0x0e
     c0a:	af 87       	std	Y+15, r26	; 0x0f
     c0c:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	4a e7       	ldi	r20, 0x7A	; 122
     c14:	53 e4       	ldi	r21, 0x43	; 67
     c16:	6d 85       	ldd	r22, Y+13	; 0x0d
     c18:	7e 85       	ldd	r23, Y+14	; 0x0e
     c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c1c:	98 89       	ldd	r25, Y+16	; 0x10
     c1e:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	89 8b       	std	Y+17, r24	; 0x11
     c28:	9a 8b       	std	Y+18, r25	; 0x12
     c2a:	ab 8b       	std	Y+19, r26	; 0x13
     c2c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e8       	ldi	r20, 0x80	; 128
     c34:	5f e3       	ldi	r21, 0x3F	; 63
     c36:	69 89       	ldd	r22, Y+17	; 0x11
     c38:	7a 89       	ldd	r23, Y+18	; 0x12
     c3a:	8b 89       	ldd	r24, Y+19	; 0x13
     c3c:	9c 89       	ldd	r25, Y+20	; 0x14
     c3e:	0e 94 b1 08 	call	0x1162	; 0x1162 <__cmpsf2>
     c42:	88 23       	and	r24, r24
     c44:	2c f4       	brge	.+10     	; 0xc50 <LCD_displayCharacter+0x366>
		__ticks = 1;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	9e 8b       	std	Y+22, r25	; 0x16
     c4c:	8d 8b       	std	Y+21, r24	; 0x15
     c4e:	3f c0       	rjmp	.+126    	; 0xcce <LCD_displayCharacter+0x3e4>
	else if (__tmp > 65535)
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	3f ef       	ldi	r19, 0xFF	; 255
     c54:	4f e7       	ldi	r20, 0x7F	; 127
     c56:	57 e4       	ldi	r21, 0x47	; 71
     c58:	69 89       	ldd	r22, Y+17	; 0x11
     c5a:	7a 89       	ldd	r23, Y+18	; 0x12
     c5c:	8b 89       	ldd	r24, Y+19	; 0x13
     c5e:	9c 89       	ldd	r25, Y+20	; 0x14
     c60:	0e 94 10 0a 	call	0x1420	; 0x1420 <__gesf2>
     c64:	18 16       	cp	r1, r24
     c66:	4c f5       	brge	.+82     	; 0xcba <LCD_displayCharacter+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e2       	ldi	r20, 0x20	; 32
     c6e:	51 e4       	ldi	r21, 0x41	; 65
     c70:	6d 85       	ldd	r22, Y+13	; 0x0d
     c72:	7e 85       	ldd	r23, Y+14	; 0x0e
     c74:	8f 85       	ldd	r24, Y+15	; 0x0f
     c76:	98 89       	ldd	r25, Y+16	; 0x10
     c78:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	bc 01       	movw	r22, r24
     c82:	cd 01       	movw	r24, r26
     c84:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	9e 8b       	std	Y+22, r25	; 0x16
     c8e:	8d 8b       	std	Y+21, r24	; 0x15
     c90:	0f c0       	rjmp	.+30     	; 0xcb0 <LCD_displayCharacter+0x3c6>
     c92:	89 e1       	ldi	r24, 0x19	; 25
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	98 8f       	std	Y+24, r25	; 0x18
     c98:	8f 8b       	std	Y+23, r24	; 0x17
     c9a:	8f 89       	ldd	r24, Y+23	; 0x17
     c9c:	98 8d       	ldd	r25, Y+24	; 0x18
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <LCD_displayCharacter+0x3b4>
     ca2:	98 8f       	std	Y+24, r25	; 0x18
     ca4:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca6:	8d 89       	ldd	r24, Y+21	; 0x15
     ca8:	9e 89       	ldd	r25, Y+22	; 0x16
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	9e 8b       	std	Y+22, r25	; 0x16
     cae:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb0:	8d 89       	ldd	r24, Y+21	; 0x15
     cb2:	9e 89       	ldd	r25, Y+22	; 0x16
     cb4:	89 2b       	or	r24, r25
     cb6:	69 f7       	brne	.-38     	; 0xc92 <LCD_displayCharacter+0x3a8>
	_delay_ms(5);					/*for write timing diagram*/
}
     cb8:	14 c0       	rjmp	.+40     	; 0xce2 <LCD_displayCharacter+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cba:	69 89       	ldd	r22, Y+17	; 0x11
     cbc:	7a 89       	ldd	r23, Y+18	; 0x12
     cbe:	8b 89       	ldd	r24, Y+19	; 0x13
     cc0:	9c 89       	ldd	r25, Y+20	; 0x14
     cc2:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	9e 8b       	std	Y+22, r25	; 0x16
     ccc:	8d 8b       	std	Y+21, r24	; 0x15
     cce:	8d 89       	ldd	r24, Y+21	; 0x15
     cd0:	9e 89       	ldd	r25, Y+22	; 0x16
     cd2:	9a 8f       	std	Y+26, r25	; 0x1a
     cd4:	89 8f       	std	Y+25, r24	; 0x19
     cd6:	89 8d       	ldd	r24, Y+25	; 0x19
     cd8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <LCD_displayCharacter+0x3f0>
     cde:	9a 8f       	std	Y+26, r25	; 0x1a
     ce0:	89 8f       	std	Y+25, r24	; 0x19
     ce2:	00 00       	nop
     ce4:	e9 96       	adiw	r28, 0x39	; 57
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <LCD_displayString>:

void LCD_displayString(uint8 * str)
{
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <LCD_displayString+0x6>
     cfc:	1f 92       	push	r1
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	9b 83       	std	Y+3, r25	; 0x03
     d04:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
     d06:	19 82       	std	Y+1, r1	; 0x01
	while(str[count] != NULL)
     d08:	0e c0       	rjmp	.+28     	; 0xd26 <LCD_displayString+0x30>
	{
		LCD_displayCharacter(str[count]);
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	88 2f       	mov	r24, r24
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	2a 81       	ldd	r18, Y+2	; 0x02
     d12:	3b 81       	ldd	r19, Y+3	; 0x03
     d14:	82 0f       	add	r24, r18
     d16:	93 1f       	adc	r25, r19
     d18:	fc 01       	movw	r30, r24
     d1a:	80 81       	ld	r24, Z
     d1c:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_displayCharacter>
		count++;
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	8f 5f       	subi	r24, 0xFF	; 255
     d24:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(uint8 * str)
{
	uint8 count = 0;
	while(str[count] != NULL)
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	2a 81       	ldd	r18, Y+2	; 0x02
     d2e:	3b 81       	ldd	r19, Y+3	; 0x03
     d30:	82 0f       	add	r24, r18
     d32:	93 1f       	adc	r25, r19
     d34:	fc 01       	movw	r30, r24
     d36:	80 81       	ld	r24, Z
     d38:	88 2f       	mov	r24, r24
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	89 2b       	or	r24, r25
     d3e:	29 f7       	brne	.-54     	; 0xd0a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[count]);
		count++;
	}
}
     d40:	00 00       	nop
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <LCD_goToColRow>:

void LCD_goToColRow(uint8 row , uint8 col)
{
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	00 d0       	rcall	.+0      	; 0xd54 <LCD_goToColRow+0x6>
     d54:	1f 92       	push	r1
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	8a 83       	std	Y+2, r24	; 0x02
     d5c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	91 05       	cpc	r25, r1
     d68:	79 f0       	breq	.+30     	; 0xd88 <LCD_goToColRow+0x3a>
     d6a:	82 30       	cpi	r24, 0x02	; 2
     d6c:	91 05       	cpc	r25, r1
     d6e:	1c f4       	brge	.+6      	; 0xd76 <LCD_goToColRow+0x28>
     d70:	89 2b       	or	r24, r25
     d72:	39 f0       	breq	.+14     	; 0xd82 <LCD_goToColRow+0x34>
     d74:	15 c0       	rjmp	.+42     	; 0xda0 <LCD_goToColRow+0x52>
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	91 05       	cpc	r25, r1
     d7a:	51 f0       	breq	.+20     	; 0xd90 <LCD_goToColRow+0x42>
     d7c:	03 97       	sbiw	r24, 0x03	; 3
     d7e:	61 f0       	breq	.+24     	; 0xd98 <LCD_goToColRow+0x4a>
     d80:	0f c0       	rjmp	.+30     	; 0xda0 <LCD_goToColRow+0x52>
	{
	case 0 :
		address = col;
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	89 83       	std	Y+1, r24	; 0x01
		break;
     d86:	0c c0       	rjmp	.+24     	; 0xda0 <LCD_goToColRow+0x52>
	case 1 :
		address = 0x40 + col;
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	80 5c       	subi	r24, 0xC0	; 192
     d8c:	89 83       	std	Y+1, r24	; 0x01
		break;
     d8e:	08 c0       	rjmp	.+16     	; 0xda0 <LCD_goToColRow+0x52>
	case 2 :
		address = 0x10 + col;
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	80 5f       	subi	r24, 0xF0	; 240
     d94:	89 83       	std	Y+1, r24	; 0x01
		break;
     d96:	04 c0       	rjmp	.+8      	; 0xda0 <LCD_goToColRow+0x52>
	case 3 :
		address = 0x50 + col;
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	80 5b       	subi	r24, 0xB0	; 176
     d9c:	89 83       	std	Y+1, r24	; 0x01
		break;
     d9e:	00 00       	nop
	}
	LCD_sendCommand(address | 0x80);
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	80 68       	ori	r24, 0x80	; 128
     da4:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_sendCommand>
}
     da8:	00 00       	nop
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	08 95       	ret

00000db6 <LCD_displayInt>:
void LCD_displayInt(int a_number)
{
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	62 97       	sbiw	r28, 0x12	; 18
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	9a 8b       	std	Y+18, r25	; 0x12
     dcc:	89 8b       	std	Y+17, r24	; 0x11
	char a_ascii[16];
	itoa(a_number , a_ascii , 10);
     dce:	89 89       	ldd	r24, Y+17	; 0x11
     dd0:	9a 89       	ldd	r25, Y+18	; 0x12
     dd2:	4a e0       	ldi	r20, 0x0A	; 10
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	9e 01       	movw	r18, r28
     dd8:	2f 5f       	subi	r18, 0xFF	; 255
     dda:	3f 4f       	sbci	r19, 0xFF	; 255
     ddc:	b9 01       	movw	r22, r18
     dde:	0e 94 82 0a 	call	0x1504	; 0x1504 <itoa>
	LCD_displayString(a_ascii);
     de2:	ce 01       	movw	r24, r28
     de4:	01 96       	adiw	r24, 0x01	; 1
     de6:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_displayString>
}
     dea:	00 00       	nop
     dec:	62 96       	adiw	r28, 0x12	; 18
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <LCD_displayOnColRow>:

void LCD_displayOnColRow(uint8 row , uint8 col , const uint8 * str)
{
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	00 d0       	rcall	.+0      	; 0xe04 <LCD_displayOnColRow+0x6>
     e04:	00 d0       	rcall	.+0      	; 0xe06 <LCD_displayOnColRow+0x8>
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	6a 83       	std	Y+2, r22	; 0x02
     e0e:	5c 83       	std	Y+4, r21	; 0x04
     e10:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToColRow(row , col);
     e12:	6a 81       	ldd	r22, Y+2	; 0x02
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	0e 94 a7 06 	call	0xd4e	; 0xd4e <LCD_goToColRow>
	LCD_displayString(str);
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	9c 81       	ldd	r25, Y+4	; 0x04
     e1e:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LCD_displayString>
}
     e22:	00 00       	nop
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	08 95       	ret

00000e32 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN);
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_sendCommand>
}
     e40:	00 00       	nop
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <THERMAL_conversion>:
 */

#include"thermal_sensor.h"
volatile double Temp;
void THERMAL_conversion(void)
{
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
	Temp =((current_reading * 2.56)/1024)*100;
     e50:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <current_reading>
     e54:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <current_reading+0x1>
     e58:	cc 01       	movw	r24, r24
     e5a:	a0 e0       	ldi	r26, 0x00	; 0
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	bc 01       	movw	r22, r24
     e60:	cd 01       	movw	r24, r26
     e62:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__floatunsisf>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	2a e0       	ldi	r18, 0x0A	; 10
     e6c:	37 ed       	ldi	r19, 0xD7	; 215
     e6e:	43 e2       	ldi	r20, 0x23	; 35
     e70:	50 e4       	ldi	r21, 0x40	; 64
     e72:	bc 01       	movw	r22, r24
     e74:	cd 01       	movw	r24, r26
     e76:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e8       	ldi	r20, 0x80	; 128
     e84:	54 e4       	ldi	r21, 0x44	; 68
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	0e 94 b6 08 	call	0x116c	; 0x116c <__divsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	48 ec       	ldi	r20, 0xC8	; 200
     e98:	52 e4       	ldi	r21, 0x42	; 66
     e9a:	bc 01       	movw	r22, r24
     e9c:	cd 01       	movw	r24, r26
     e9e:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <Temp>
     eaa:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <Temp+0x1>
     eae:	a0 93 b3 00 	sts	0x00B3, r26	; 0x8000b3 <Temp+0x2>
     eb2:	b0 93 b4 00 	sts	0x00B4, r27	; 0x8000b4 <Temp+0x3>
	//Temp = -21.87*(((uint8)current_reading * 2.56)/1024.0) + 78.03;
}
     eb6:	00 00       	nop
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	08 95       	ret

00000ebe <UART_init>:
/*********************************************************************************
 * 								Function Definitions							 *
 *********************************************************************************/

void UART_init(const UART_ConfigType * a_ptr)
{
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <UART_init+0x6>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	89 83       	std	Y+1, r24	; 0x01
	UCSRA = (a_ptr->Parity_enable <<PE) | (a_ptr->Speed << U2X);
     ecc:	8b e2       	ldi	r24, 0x2B	; 43
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	29 81       	ldd	r18, Y+1	; 0x01
     ed2:	3a 81       	ldd	r19, Y+2	; 0x02
     ed4:	f9 01       	movw	r30, r18
     ed6:	20 81       	ld	r18, Z
     ed8:	22 2f       	mov	r18, r18
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	22 0f       	add	r18, r18
     ede:	33 1f       	adc	r19, r19
     ee0:	22 0f       	add	r18, r18
     ee2:	33 1f       	adc	r19, r19
     ee4:	42 2f       	mov	r20, r18
     ee6:	29 81       	ldd	r18, Y+1	; 0x01
     ee8:	3a 81       	ldd	r19, Y+2	; 0x02
     eea:	f9 01       	movw	r30, r18
     eec:	24 81       	ldd	r18, Z+4	; 0x04
     eee:	22 2f       	mov	r18, r18
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	22 0f       	add	r18, r18
     ef4:	33 1f       	adc	r19, r19
     ef6:	24 2b       	or	r18, r20
     ef8:	fc 01       	movw	r30, r24
     efa:	20 83       	st	Z, r18

	#endif

	#ifndef RECEIVE_INTERRUPT

	CLEAR_BIT(UCSRB , RXCIE);
     efc:	8a e2       	ldi	r24, 0x2A	; 42
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	2a e2       	ldi	r18, 0x2A	; 42
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	f9 01       	movw	r30, r18
     f06:	20 81       	ld	r18, Z
     f08:	2f 77       	andi	r18, 0x7F	; 127
     f0a:	fc 01       	movw	r30, r24
     f0c:	20 83       	st	Z, r18

	#endif

	UCSRC = (a_ptr->Char_Size << UCSZ0) | (a_ptr->Parity_type << UPM0) |
     f0e:	80 e4       	ldi	r24, 0x40	; 64
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	29 81       	ldd	r18, Y+1	; 0x01
     f14:	3a 81       	ldd	r19, Y+2	; 0x02
     f16:	f9 01       	movw	r30, r18
     f18:	23 81       	ldd	r18, Z+3	; 0x03
     f1a:	22 2f       	mov	r18, r18
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	22 0f       	add	r18, r18
     f20:	33 1f       	adc	r19, r19
     f22:	42 2f       	mov	r20, r18
     f24:	29 81       	ldd	r18, Y+1	; 0x01
     f26:	3a 81       	ldd	r19, Y+2	; 0x02
     f28:	f9 01       	movw	r30, r18
     f2a:	21 81       	ldd	r18, Z+1	; 0x01
     f2c:	22 2f       	mov	r18, r18
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	22 95       	swap	r18
     f32:	32 95       	swap	r19
     f34:	30 7f       	andi	r19, 0xF0	; 240
     f36:	32 27       	eor	r19, r18
     f38:	20 7f       	andi	r18, 0xF0	; 240
     f3a:	32 27       	eor	r19, r18
     f3c:	24 2b       	or	r18, r20
     f3e:	42 2f       	mov	r20, r18
     f40:	40 68       	ori	r20, 0x80	; 128
			(1<<URSEL) | (a_ptr->type << UMSEL) | (a_ptr->Stop_bit << USBS);
     f42:	29 81       	ldd	r18, Y+1	; 0x01
     f44:	3a 81       	ldd	r19, Y+2	; 0x02
     f46:	f9 01       	movw	r30, r18
     f48:	25 81       	ldd	r18, Z+5	; 0x05
     f4a:	22 2f       	mov	r18, r18
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	00 24       	eor	r0, r0
     f50:	36 95       	lsr	r19
     f52:	27 95       	ror	r18
     f54:	07 94       	ror	r0
     f56:	36 95       	lsr	r19
     f58:	27 95       	ror	r18
     f5a:	07 94       	ror	r0
     f5c:	32 2f       	mov	r19, r18
     f5e:	20 2d       	mov	r18, r0

	CLEAR_BIT(UCSRB , RXCIE);

	#endif

	UCSRC = (a_ptr->Char_Size << UCSZ0) | (a_ptr->Parity_type << UPM0) |
     f60:	42 2b       	or	r20, r18
			(1<<URSEL) | (a_ptr->type << UMSEL) | (a_ptr->Stop_bit << USBS);
     f62:	29 81       	ldd	r18, Y+1	; 0x01
     f64:	3a 81       	ldd	r19, Y+2	; 0x02
     f66:	f9 01       	movw	r30, r18
     f68:	22 81       	ldd	r18, Z+2	; 0x02
     f6a:	22 2f       	mov	r18, r18
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	22 0f       	add	r18, r18
     f70:	33 1f       	adc	r19, r19
     f72:	22 0f       	add	r18, r18
     f74:	33 1f       	adc	r19, r19
     f76:	22 0f       	add	r18, r18
     f78:	33 1f       	adc	r19, r19

	CLEAR_BIT(UCSRB , RXCIE);

	#endif

	UCSRC = (a_ptr->Char_Size << UCSZ0) | (a_ptr->Parity_type << UPM0) |
     f7a:	24 2b       	or	r18, r20
     f7c:	fc 01       	movw	r30, r24
     f7e:	20 83       	st	Z, r18
			(1<<URSEL) | (a_ptr->type << UMSEL) | (a_ptr->Stop_bit << USBS);

	UBRRH = BAUD_PRESCALE >> 8;
     f80:	80 e4       	ldi	r24, 0x40	; 64
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	fc 01       	movw	r30, r24
     f86:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
     f88:	89 e2       	ldi	r24, 0x29	; 41
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	2c e0       	ldi	r18, 0x0C	; 12
     f8e:	fc 01       	movw	r30, r24
     f90:	20 83       	st	Z, r18

	SET_BIT(UCSRB , TXEN);
     f92:	8a e2       	ldi	r24, 0x2A	; 42
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	2a e2       	ldi	r18, 0x2A	; 42
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	f9 01       	movw	r30, r18
     f9c:	20 81       	ld	r18, Z
     f9e:	28 60       	ori	r18, 0x08	; 8
     fa0:	fc 01       	movw	r30, r24
     fa2:	20 83       	st	Z, r18

	SET_BIT(UCSRB , RXEN);
     fa4:	8a e2       	ldi	r24, 0x2A	; 42
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	2a e2       	ldi	r18, 0x2A	; 42
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	f9 01       	movw	r30, r18
     fae:	20 81       	ld	r18, Z
     fb0:	20 61       	ori	r18, 0x10	; 16
     fb2:	fc 01       	movw	r30, r24
     fb4:	20 83       	st	Z, r18

}
     fb6:	00 00       	nop
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <UART_sendByte>:

void UART_sendByte(uint8 data)
{
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	1f 92       	push	r1
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA , UDRE));
     fce:	00 00       	nop
     fd0:	8b e2       	ldi	r24, 0x2B	; 43
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	fc 01       	movw	r30, r24
     fd6:	80 81       	ld	r24, Z
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	80 72       	andi	r24, 0x20	; 32
     fde:	99 27       	eor	r25, r25
     fe0:	89 2b       	or	r24, r25
     fe2:	b1 f3       	breq	.-20     	; 0xfd0 <UART_sendByte+0xe>

	UDR = data;
     fe4:	8c e2       	ldi	r24, 0x2C	; 44
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	29 81       	ldd	r18, Y+1	; 0x01
     fea:	fc 01       	movw	r30, r24
     fec:	20 83       	st	Z, r18
}
     fee:	00 00       	nop
     ff0:	0f 90       	pop	r0
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	08 95       	ret

00000ff8 <UART_receiveByte>:
#ifndef RECEIVE_INTERRUPT
uint8 UART_receiveByte(void)
{
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA ,RXC));
    1000:	00 00       	nop
    1002:	8b e2       	ldi	r24, 0x2B	; 43
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	fc 01       	movw	r30, r24
    1008:	80 81       	ld	r24, Z
    100a:	88 23       	and	r24, r24
    100c:	d4 f7       	brge	.-12     	; 0x1002 <UART_receiveByte+0xa>

	//g_UART_CurrentReading = UDR;

	return UDR;
    100e:	8c e2       	ldi	r24, 0x2C	; 44
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	fc 01       	movw	r30, r24
    1014:	80 81       	ld	r24, Z
}
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	08 95       	ret

0000101c <UART_setReceiveCallBack>:
#endif
void UART_setReceiveCallBack(void (*a_ptr)(void))
{
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	00 d0       	rcall	.+0      	; 0x1022 <UART_setReceiveCallBack+0x6>
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	89 83       	std	Y+1, r24	; 0x01
	g_UART_receiveByteFunc_ptr = a_ptr;
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <g_UART_receiveByteFunc_ptr+0x1>
    1032:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <g_UART_receiveByteFunc_ptr>
}
    1036:	00 00       	nop
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	08 95       	ret

00001042 <UART_sendString>:
void UART_sendString(const uint8 * str)
{
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	00 d0       	rcall	.+0      	; 0x1048 <UART_sendString+0x6>
    1048:	1f 92       	push	r1
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	9b 83       	std	Y+3, r25	; 0x03
    1050:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    1052:	19 82       	std	Y+1, r1	; 0x01

	while(str[count] != '\0')
    1054:	0e c0       	rjmp	.+28     	; 0x1072 <UART_sendString+0x30>
	{
		UART_sendByte(str[count]);
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	88 2f       	mov	r24, r24
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	2a 81       	ldd	r18, Y+2	; 0x02
    105e:	3b 81       	ldd	r19, Y+3	; 0x03
    1060:	82 0f       	add	r24, r18
    1062:	93 1f       	adc	r25, r19
    1064:	fc 01       	movw	r30, r24
    1066:	80 81       	ld	r24, Z
    1068:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <UART_sendByte>
		count++;
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	89 83       	std	Y+1, r24	; 0x01
}
void UART_sendString(const uint8 * str)
{
	uint8 count = 0;

	while(str[count] != '\0')
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	88 2f       	mov	r24, r24
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	2a 81       	ldd	r18, Y+2	; 0x02
    107a:	3b 81       	ldd	r19, Y+3	; 0x03
    107c:	82 0f       	add	r24, r18
    107e:	93 1f       	adc	r25, r19
    1080:	fc 01       	movw	r30, r24
    1082:	80 81       	ld	r24, Z
    1084:	88 23       	and	r24, r24
    1086:	39 f7       	brne	.-50     	; 0x1056 <UART_sendString+0x14>
	{
		UART_sendByte(str[count]);
		count++;
	}
}
    1088:	00 00       	nop
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <UART_receiveString>:
void UART_receiveString(uint8 * Str)
{
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <UART_receiveString+0xa>
    10a0:	1f 92       	push	r1
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	9b 83       	std	Y+3, r25	; 0x03
    10a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    10aa:	19 82       	std	Y+1, r1	; 0x01
		Str[i] = UART_receiveByte();
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	2a 81       	ldd	r18, Y+2	; 0x02
    10b4:	3b 81       	ldd	r19, Y+3	; 0x03
    10b6:	89 01       	movw	r16, r18
    10b8:	08 0f       	add	r16, r24
    10ba:	19 1f       	adc	r17, r25
    10bc:	0e 94 fc 07 	call	0xff8	; 0xff8 <UART_receiveByte>
    10c0:	f8 01       	movw	r30, r16
    10c2:	80 83       	st	Z, r24
		while(Str[i] != '#')
    10c4:	0f c0       	rjmp	.+30     	; 0x10e4 <UART_receiveString+0x4e>
		{
			i++;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	8f 5f       	subi	r24, 0xFF	; 255
    10ca:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = UART_receiveByte();
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	88 2f       	mov	r24, r24
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	2a 81       	ldd	r18, Y+2	; 0x02
    10d4:	3b 81       	ldd	r19, Y+3	; 0x03
    10d6:	89 01       	movw	r16, r18
    10d8:	08 0f       	add	r16, r24
    10da:	19 1f       	adc	r17, r25
    10dc:	0e 94 fc 07 	call	0xff8	; 0xff8 <UART_receiveByte>
    10e0:	f8 01       	movw	r30, r16
    10e2:	80 83       	st	Z, r24
}
void UART_receiveString(uint8 * Str)
{
	uint8 i = 0;
		Str[i] = UART_receiveByte();
		while(Str[i] != '#')
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	88 2f       	mov	r24, r24
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	2a 81       	ldd	r18, Y+2	; 0x02
    10ec:	3b 81       	ldd	r19, Y+3	; 0x03
    10ee:	82 0f       	add	r24, r18
    10f0:	93 1f       	adc	r25, r19
    10f2:	fc 01       	movw	r30, r24
    10f4:	80 81       	ld	r24, Z
    10f6:	83 32       	cpi	r24, 0x23	; 35
    10f8:	31 f7       	brne	.-52     	; 0x10c6 <UART_receiveString+0x30>
		{
			i++;
			Str[i] = UART_receiveByte();
		}
		Str[i] = '\0';
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	2a 81       	ldd	r18, Y+2	; 0x02
    1102:	3b 81       	ldd	r19, Y+3	; 0x03
    1104:	82 0f       	add	r24, r18
    1106:	93 1f       	adc	r25, r19
    1108:	fc 01       	movw	r30, r24
    110a:	10 82       	st	Z, r1
	 * 		str++;
	 * 	}while(*str != '*');
	 *
	 * 	*str = '\0';
	 ***********************************************************************/
}
    110c:	00 00       	nop
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <__udivmodsi4>:
    111e:	a1 e2       	ldi	r26, 0x21	; 33
    1120:	1a 2e       	mov	r1, r26
    1122:	aa 1b       	sub	r26, r26
    1124:	bb 1b       	sub	r27, r27
    1126:	fd 01       	movw	r30, r26
    1128:	0d c0       	rjmp	.+26     	; 0x1144 <__udivmodsi4_ep>

0000112a <__udivmodsi4_loop>:
    112a:	aa 1f       	adc	r26, r26
    112c:	bb 1f       	adc	r27, r27
    112e:	ee 1f       	adc	r30, r30
    1130:	ff 1f       	adc	r31, r31
    1132:	a2 17       	cp	r26, r18
    1134:	b3 07       	cpc	r27, r19
    1136:	e4 07       	cpc	r30, r20
    1138:	f5 07       	cpc	r31, r21
    113a:	20 f0       	brcs	.+8      	; 0x1144 <__udivmodsi4_ep>
    113c:	a2 1b       	sub	r26, r18
    113e:	b3 0b       	sbc	r27, r19
    1140:	e4 0b       	sbc	r30, r20
    1142:	f5 0b       	sbc	r31, r21

00001144 <__udivmodsi4_ep>:
    1144:	66 1f       	adc	r22, r22
    1146:	77 1f       	adc	r23, r23
    1148:	88 1f       	adc	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	1a 94       	dec	r1
    114e:	69 f7       	brne	.-38     	; 0x112a <__udivmodsi4_loop>
    1150:	60 95       	com	r22
    1152:	70 95       	com	r23
    1154:	80 95       	com	r24
    1156:	90 95       	com	r25
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	bd 01       	movw	r22, r26
    115e:	cf 01       	movw	r24, r30
    1160:	08 95       	ret

00001162 <__cmpsf2>:
    1162:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fp_cmp>
    1166:	08 f4       	brcc	.+2      	; 0x116a <__cmpsf2+0x8>
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	08 95       	ret

0000116c <__divsf3>:
    116c:	0e 94 ca 08 	call	0x1194	; 0x1194 <__divsf3x>
    1170:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_round>
    1174:	0e 94 cf 09 	call	0x139e	; 0x139e <__fp_pscB>
    1178:	58 f0       	brcs	.+22     	; 0x1190 <__divsf3+0x24>
    117a:	0e 94 c8 09 	call	0x1390	; 0x1390 <__fp_pscA>
    117e:	40 f0       	brcs	.+16     	; 0x1190 <__divsf3+0x24>
    1180:	29 f4       	brne	.+10     	; 0x118c <__divsf3+0x20>
    1182:	5f 3f       	cpi	r21, 0xFF	; 255
    1184:	29 f0       	breq	.+10     	; 0x1190 <__divsf3+0x24>
    1186:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__fp_inf>
    118a:	51 11       	cpse	r21, r1
    118c:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__fp_szero>
    1190:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__fp_nan>

00001194 <__divsf3x>:
    1194:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__fp_split3>
    1198:	68 f3       	brcs	.-38     	; 0x1174 <__divsf3+0x8>

0000119a <__divsf3_pse>:
    119a:	99 23       	and	r25, r25
    119c:	b1 f3       	breq	.-20     	; 0x118a <__divsf3+0x1e>
    119e:	55 23       	and	r21, r21
    11a0:	91 f3       	breq	.-28     	; 0x1186 <__divsf3+0x1a>
    11a2:	95 1b       	sub	r25, r21
    11a4:	55 0b       	sbc	r21, r21
    11a6:	bb 27       	eor	r27, r27
    11a8:	aa 27       	eor	r26, r26
    11aa:	62 17       	cp	r22, r18
    11ac:	73 07       	cpc	r23, r19
    11ae:	84 07       	cpc	r24, r20
    11b0:	38 f0       	brcs	.+14     	; 0x11c0 <__divsf3_pse+0x26>
    11b2:	9f 5f       	subi	r25, 0xFF	; 255
    11b4:	5f 4f       	sbci	r21, 0xFF	; 255
    11b6:	22 0f       	add	r18, r18
    11b8:	33 1f       	adc	r19, r19
    11ba:	44 1f       	adc	r20, r20
    11bc:	aa 1f       	adc	r26, r26
    11be:	a9 f3       	breq	.-22     	; 0x11aa <__divsf3_pse+0x10>
    11c0:	35 d0       	rcall	.+106    	; 0x122c <__divsf3_pse+0x92>
    11c2:	0e 2e       	mov	r0, r30
    11c4:	3a f0       	brmi	.+14     	; 0x11d4 <__divsf3_pse+0x3a>
    11c6:	e0 e8       	ldi	r30, 0x80	; 128
    11c8:	32 d0       	rcall	.+100    	; 0x122e <__divsf3_pse+0x94>
    11ca:	91 50       	subi	r25, 0x01	; 1
    11cc:	50 40       	sbci	r21, 0x00	; 0
    11ce:	e6 95       	lsr	r30
    11d0:	00 1c       	adc	r0, r0
    11d2:	ca f7       	brpl	.-14     	; 0x11c6 <__divsf3_pse+0x2c>
    11d4:	2b d0       	rcall	.+86     	; 0x122c <__divsf3_pse+0x92>
    11d6:	fe 2f       	mov	r31, r30
    11d8:	29 d0       	rcall	.+82     	; 0x122c <__divsf3_pse+0x92>
    11da:	66 0f       	add	r22, r22
    11dc:	77 1f       	adc	r23, r23
    11de:	88 1f       	adc	r24, r24
    11e0:	bb 1f       	adc	r27, r27
    11e2:	26 17       	cp	r18, r22
    11e4:	37 07       	cpc	r19, r23
    11e6:	48 07       	cpc	r20, r24
    11e8:	ab 07       	cpc	r26, r27
    11ea:	b0 e8       	ldi	r27, 0x80	; 128
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <__divsf3_pse+0x56>
    11ee:	bb 0b       	sbc	r27, r27
    11f0:	80 2d       	mov	r24, r0
    11f2:	bf 01       	movw	r22, r30
    11f4:	ff 27       	eor	r31, r31
    11f6:	93 58       	subi	r25, 0x83	; 131
    11f8:	5f 4f       	sbci	r21, 0xFF	; 255
    11fa:	3a f0       	brmi	.+14     	; 0x120a <__divsf3_pse+0x70>
    11fc:	9e 3f       	cpi	r25, 0xFE	; 254
    11fe:	51 05       	cpc	r21, r1
    1200:	78 f0       	brcs	.+30     	; 0x1220 <__divsf3_pse+0x86>
    1202:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__fp_inf>
    1206:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__fp_szero>
    120a:	5f 3f       	cpi	r21, 0xFF	; 255
    120c:	e4 f3       	brlt	.-8      	; 0x1206 <__divsf3_pse+0x6c>
    120e:	98 3e       	cpi	r25, 0xE8	; 232
    1210:	d4 f3       	brlt	.-12     	; 0x1206 <__divsf3_pse+0x6c>
    1212:	86 95       	lsr	r24
    1214:	77 95       	ror	r23
    1216:	67 95       	ror	r22
    1218:	b7 95       	ror	r27
    121a:	f7 95       	ror	r31
    121c:	9f 5f       	subi	r25, 0xFF	; 255
    121e:	c9 f7       	brne	.-14     	; 0x1212 <__divsf3_pse+0x78>
    1220:	88 0f       	add	r24, r24
    1222:	91 1d       	adc	r25, r1
    1224:	96 95       	lsr	r25
    1226:	87 95       	ror	r24
    1228:	97 f9       	bld	r25, 7
    122a:	08 95       	ret
    122c:	e1 e0       	ldi	r30, 0x01	; 1
    122e:	66 0f       	add	r22, r22
    1230:	77 1f       	adc	r23, r23
    1232:	88 1f       	adc	r24, r24
    1234:	bb 1f       	adc	r27, r27
    1236:	62 17       	cp	r22, r18
    1238:	73 07       	cpc	r23, r19
    123a:	84 07       	cpc	r24, r20
    123c:	ba 07       	cpc	r27, r26
    123e:	20 f0       	brcs	.+8      	; 0x1248 <__divsf3_pse+0xae>
    1240:	62 1b       	sub	r22, r18
    1242:	73 0b       	sbc	r23, r19
    1244:	84 0b       	sbc	r24, r20
    1246:	ba 0b       	sbc	r27, r26
    1248:	ee 1f       	adc	r30, r30
    124a:	88 f7       	brcc	.-30     	; 0x122e <__divsf3_pse+0x94>
    124c:	e0 95       	com	r30
    124e:	08 95       	ret

00001250 <__fixsfsi>:
    1250:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixunssfsi>
    1254:	68 94       	set
    1256:	b1 11       	cpse	r27, r1
    1258:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__fp_szero>
    125c:	08 95       	ret

0000125e <__fixunssfsi>:
    125e:	0e 94 ef 09 	call	0x13de	; 0x13de <__fp_splitA>
    1262:	88 f0       	brcs	.+34     	; 0x1286 <__fixunssfsi+0x28>
    1264:	9f 57       	subi	r25, 0x7F	; 127
    1266:	98 f0       	brcs	.+38     	; 0x128e <__fixunssfsi+0x30>
    1268:	b9 2f       	mov	r27, r25
    126a:	99 27       	eor	r25, r25
    126c:	b7 51       	subi	r27, 0x17	; 23
    126e:	b0 f0       	brcs	.+44     	; 0x129c <__fixunssfsi+0x3e>
    1270:	e1 f0       	breq	.+56     	; 0x12aa <__fixunssfsi+0x4c>
    1272:	66 0f       	add	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	88 1f       	adc	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	1a f0       	brmi	.+6      	; 0x1282 <__fixunssfsi+0x24>
    127c:	ba 95       	dec	r27
    127e:	c9 f7       	brne	.-14     	; 0x1272 <__fixunssfsi+0x14>
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <__fixunssfsi+0x4c>
    1282:	b1 30       	cpi	r27, 0x01	; 1
    1284:	91 f0       	breq	.+36     	; 0x12aa <__fixunssfsi+0x4c>
    1286:	0e 94 09 0a 	call	0x1412	; 0x1412 <__fp_zero>
    128a:	b1 e0       	ldi	r27, 0x01	; 1
    128c:	08 95       	ret
    128e:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_zero>
    1292:	67 2f       	mov	r22, r23
    1294:	78 2f       	mov	r23, r24
    1296:	88 27       	eor	r24, r24
    1298:	b8 5f       	subi	r27, 0xF8	; 248
    129a:	39 f0       	breq	.+14     	; 0x12aa <__fixunssfsi+0x4c>
    129c:	b9 3f       	cpi	r27, 0xF9	; 249
    129e:	cc f3       	brlt	.-14     	; 0x1292 <__fixunssfsi+0x34>
    12a0:	86 95       	lsr	r24
    12a2:	77 95       	ror	r23
    12a4:	67 95       	ror	r22
    12a6:	b3 95       	inc	r27
    12a8:	d9 f7       	brne	.-10     	; 0x12a0 <__fixunssfsi+0x42>
    12aa:	3e f4       	brtc	.+14     	; 0x12ba <__fixunssfsi+0x5c>
    12ac:	90 95       	com	r25
    12ae:	80 95       	com	r24
    12b0:	70 95       	com	r23
    12b2:	61 95       	neg	r22
    12b4:	7f 4f       	sbci	r23, 0xFF	; 255
    12b6:	8f 4f       	sbci	r24, 0xFF	; 255
    12b8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ba:	08 95       	ret

000012bc <__floatunsisf>:
    12bc:	e8 94       	clt
    12be:	09 c0       	rjmp	.+18     	; 0x12d2 <__floatsisf+0x12>

000012c0 <__floatsisf>:
    12c0:	97 fb       	bst	r25, 7
    12c2:	3e f4       	brtc	.+14     	; 0x12d2 <__floatsisf+0x12>
    12c4:	90 95       	com	r25
    12c6:	80 95       	com	r24
    12c8:	70 95       	com	r23
    12ca:	61 95       	neg	r22
    12cc:	7f 4f       	sbci	r23, 0xFF	; 255
    12ce:	8f 4f       	sbci	r24, 0xFF	; 255
    12d0:	9f 4f       	sbci	r25, 0xFF	; 255
    12d2:	99 23       	and	r25, r25
    12d4:	a9 f0       	breq	.+42     	; 0x1300 <__floatsisf+0x40>
    12d6:	f9 2f       	mov	r31, r25
    12d8:	96 e9       	ldi	r25, 0x96	; 150
    12da:	bb 27       	eor	r27, r27
    12dc:	93 95       	inc	r25
    12de:	f6 95       	lsr	r31
    12e0:	87 95       	ror	r24
    12e2:	77 95       	ror	r23
    12e4:	67 95       	ror	r22
    12e6:	b7 95       	ror	r27
    12e8:	f1 11       	cpse	r31, r1
    12ea:	f8 cf       	rjmp	.-16     	; 0x12dc <__floatsisf+0x1c>
    12ec:	fa f4       	brpl	.+62     	; 0x132c <__floatsisf+0x6c>
    12ee:	bb 0f       	add	r27, r27
    12f0:	11 f4       	brne	.+4      	; 0x12f6 <__floatsisf+0x36>
    12f2:	60 ff       	sbrs	r22, 0
    12f4:	1b c0       	rjmp	.+54     	; 0x132c <__floatsisf+0x6c>
    12f6:	6f 5f       	subi	r22, 0xFF	; 255
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255
    12fa:	8f 4f       	sbci	r24, 0xFF	; 255
    12fc:	9f 4f       	sbci	r25, 0xFF	; 255
    12fe:	16 c0       	rjmp	.+44     	; 0x132c <__floatsisf+0x6c>
    1300:	88 23       	and	r24, r24
    1302:	11 f0       	breq	.+4      	; 0x1308 <__floatsisf+0x48>
    1304:	96 e9       	ldi	r25, 0x96	; 150
    1306:	11 c0       	rjmp	.+34     	; 0x132a <__floatsisf+0x6a>
    1308:	77 23       	and	r23, r23
    130a:	21 f0       	breq	.+8      	; 0x1314 <__floatsisf+0x54>
    130c:	9e e8       	ldi	r25, 0x8E	; 142
    130e:	87 2f       	mov	r24, r23
    1310:	76 2f       	mov	r23, r22
    1312:	05 c0       	rjmp	.+10     	; 0x131e <__floatsisf+0x5e>
    1314:	66 23       	and	r22, r22
    1316:	71 f0       	breq	.+28     	; 0x1334 <__floatsisf+0x74>
    1318:	96 e8       	ldi	r25, 0x86	; 134
    131a:	86 2f       	mov	r24, r22
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	2a f0       	brmi	.+10     	; 0x132c <__floatsisf+0x6c>
    1322:	9a 95       	dec	r25
    1324:	66 0f       	add	r22, r22
    1326:	77 1f       	adc	r23, r23
    1328:	88 1f       	adc	r24, r24
    132a:	da f7       	brpl	.-10     	; 0x1322 <__floatsisf+0x62>
    132c:	88 0f       	add	r24, r24
    132e:	96 95       	lsr	r25
    1330:	87 95       	ror	r24
    1332:	97 f9       	bld	r25, 7
    1334:	08 95       	ret

00001336 <__fp_cmp>:
    1336:	99 0f       	add	r25, r25
    1338:	00 08       	sbc	r0, r0
    133a:	55 0f       	add	r21, r21
    133c:	aa 0b       	sbc	r26, r26
    133e:	e0 e8       	ldi	r30, 0x80	; 128
    1340:	fe ef       	ldi	r31, 0xFE	; 254
    1342:	16 16       	cp	r1, r22
    1344:	17 06       	cpc	r1, r23
    1346:	e8 07       	cpc	r30, r24
    1348:	f9 07       	cpc	r31, r25
    134a:	c0 f0       	brcs	.+48     	; 0x137c <__fp_cmp+0x46>
    134c:	12 16       	cp	r1, r18
    134e:	13 06       	cpc	r1, r19
    1350:	e4 07       	cpc	r30, r20
    1352:	f5 07       	cpc	r31, r21
    1354:	98 f0       	brcs	.+38     	; 0x137c <__fp_cmp+0x46>
    1356:	62 1b       	sub	r22, r18
    1358:	73 0b       	sbc	r23, r19
    135a:	84 0b       	sbc	r24, r20
    135c:	95 0b       	sbc	r25, r21
    135e:	39 f4       	brne	.+14     	; 0x136e <__fp_cmp+0x38>
    1360:	0a 26       	eor	r0, r26
    1362:	61 f0       	breq	.+24     	; 0x137c <__fp_cmp+0x46>
    1364:	23 2b       	or	r18, r19
    1366:	24 2b       	or	r18, r20
    1368:	25 2b       	or	r18, r21
    136a:	21 f4       	brne	.+8      	; 0x1374 <__fp_cmp+0x3e>
    136c:	08 95       	ret
    136e:	0a 26       	eor	r0, r26
    1370:	09 f4       	brne	.+2      	; 0x1374 <__fp_cmp+0x3e>
    1372:	a1 40       	sbci	r26, 0x01	; 1
    1374:	a6 95       	lsr	r26
    1376:	8f ef       	ldi	r24, 0xFF	; 255
    1378:	81 1d       	adc	r24, r1
    137a:	81 1d       	adc	r24, r1
    137c:	08 95       	ret

0000137e <__fp_inf>:
    137e:	97 f9       	bld	r25, 7
    1380:	9f 67       	ori	r25, 0x7F	; 127
    1382:	80 e8       	ldi	r24, 0x80	; 128
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	08 95       	ret

0000138a <__fp_nan>:
    138a:	9f ef       	ldi	r25, 0xFF	; 255
    138c:	80 ec       	ldi	r24, 0xC0	; 192
    138e:	08 95       	ret

00001390 <__fp_pscA>:
    1390:	00 24       	eor	r0, r0
    1392:	0a 94       	dec	r0
    1394:	16 16       	cp	r1, r22
    1396:	17 06       	cpc	r1, r23
    1398:	18 06       	cpc	r1, r24
    139a:	09 06       	cpc	r0, r25
    139c:	08 95       	ret

0000139e <__fp_pscB>:
    139e:	00 24       	eor	r0, r0
    13a0:	0a 94       	dec	r0
    13a2:	12 16       	cp	r1, r18
    13a4:	13 06       	cpc	r1, r19
    13a6:	14 06       	cpc	r1, r20
    13a8:	05 06       	cpc	r0, r21
    13aa:	08 95       	ret

000013ac <__fp_round>:
    13ac:	09 2e       	mov	r0, r25
    13ae:	03 94       	inc	r0
    13b0:	00 0c       	add	r0, r0
    13b2:	11 f4       	brne	.+4      	; 0x13b8 <__fp_round+0xc>
    13b4:	88 23       	and	r24, r24
    13b6:	52 f0       	brmi	.+20     	; 0x13cc <__fp_round+0x20>
    13b8:	bb 0f       	add	r27, r27
    13ba:	40 f4       	brcc	.+16     	; 0x13cc <__fp_round+0x20>
    13bc:	bf 2b       	or	r27, r31
    13be:	11 f4       	brne	.+4      	; 0x13c4 <__fp_round+0x18>
    13c0:	60 ff       	sbrs	r22, 0
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <__fp_round+0x20>
    13c4:	6f 5f       	subi	r22, 0xFF	; 255
    13c6:	7f 4f       	sbci	r23, 0xFF	; 255
    13c8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ca:	9f 4f       	sbci	r25, 0xFF	; 255
    13cc:	08 95       	ret

000013ce <__fp_split3>:
    13ce:	57 fd       	sbrc	r21, 7
    13d0:	90 58       	subi	r25, 0x80	; 128
    13d2:	44 0f       	add	r20, r20
    13d4:	55 1f       	adc	r21, r21
    13d6:	59 f0       	breq	.+22     	; 0x13ee <__fp_splitA+0x10>
    13d8:	5f 3f       	cpi	r21, 0xFF	; 255
    13da:	71 f0       	breq	.+28     	; 0x13f8 <__fp_splitA+0x1a>
    13dc:	47 95       	ror	r20

000013de <__fp_splitA>:
    13de:	88 0f       	add	r24, r24
    13e0:	97 fb       	bst	r25, 7
    13e2:	99 1f       	adc	r25, r25
    13e4:	61 f0       	breq	.+24     	; 0x13fe <__fp_splitA+0x20>
    13e6:	9f 3f       	cpi	r25, 0xFF	; 255
    13e8:	79 f0       	breq	.+30     	; 0x1408 <__fp_splitA+0x2a>
    13ea:	87 95       	ror	r24
    13ec:	08 95       	ret
    13ee:	12 16       	cp	r1, r18
    13f0:	13 06       	cpc	r1, r19
    13f2:	14 06       	cpc	r1, r20
    13f4:	55 1f       	adc	r21, r21
    13f6:	f2 cf       	rjmp	.-28     	; 0x13dc <__fp_split3+0xe>
    13f8:	46 95       	lsr	r20
    13fa:	f1 df       	rcall	.-30     	; 0x13de <__fp_splitA>
    13fc:	08 c0       	rjmp	.+16     	; 0x140e <__fp_splitA+0x30>
    13fe:	16 16       	cp	r1, r22
    1400:	17 06       	cpc	r1, r23
    1402:	18 06       	cpc	r1, r24
    1404:	99 1f       	adc	r25, r25
    1406:	f1 cf       	rjmp	.-30     	; 0x13ea <__fp_splitA+0xc>
    1408:	86 95       	lsr	r24
    140a:	71 05       	cpc	r23, r1
    140c:	61 05       	cpc	r22, r1
    140e:	08 94       	sec
    1410:	08 95       	ret

00001412 <__fp_zero>:
    1412:	e8 94       	clt

00001414 <__fp_szero>:
    1414:	bb 27       	eor	r27, r27
    1416:	66 27       	eor	r22, r22
    1418:	77 27       	eor	r23, r23
    141a:	cb 01       	movw	r24, r22
    141c:	97 f9       	bld	r25, 7
    141e:	08 95       	ret

00001420 <__gesf2>:
    1420:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fp_cmp>
    1424:	08 f4       	brcc	.+2      	; 0x1428 <__gesf2+0x8>
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	08 95       	ret

0000142a <__mulsf3>:
    142a:	0e 94 28 0a 	call	0x1450	; 0x1450 <__mulsf3x>
    142e:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_round>
    1432:	0e 94 c8 09 	call	0x1390	; 0x1390 <__fp_pscA>
    1436:	38 f0       	brcs	.+14     	; 0x1446 <__mulsf3+0x1c>
    1438:	0e 94 cf 09 	call	0x139e	; 0x139e <__fp_pscB>
    143c:	20 f0       	brcs	.+8      	; 0x1446 <__mulsf3+0x1c>
    143e:	95 23       	and	r25, r21
    1440:	11 f0       	breq	.+4      	; 0x1446 <__mulsf3+0x1c>
    1442:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__fp_inf>
    1446:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__fp_nan>
    144a:	11 24       	eor	r1, r1
    144c:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__fp_szero>

00001450 <__mulsf3x>:
    1450:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__fp_split3>
    1454:	70 f3       	brcs	.-36     	; 0x1432 <__mulsf3+0x8>

00001456 <__mulsf3_pse>:
    1456:	95 9f       	mul	r25, r21
    1458:	c1 f3       	breq	.-16     	; 0x144a <__mulsf3+0x20>
    145a:	95 0f       	add	r25, r21
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	55 1f       	adc	r21, r21
    1460:	62 9f       	mul	r22, r18
    1462:	f0 01       	movw	r30, r0
    1464:	72 9f       	mul	r23, r18
    1466:	bb 27       	eor	r27, r27
    1468:	f0 0d       	add	r31, r0
    146a:	b1 1d       	adc	r27, r1
    146c:	63 9f       	mul	r22, r19
    146e:	aa 27       	eor	r26, r26
    1470:	f0 0d       	add	r31, r0
    1472:	b1 1d       	adc	r27, r1
    1474:	aa 1f       	adc	r26, r26
    1476:	64 9f       	mul	r22, r20
    1478:	66 27       	eor	r22, r22
    147a:	b0 0d       	add	r27, r0
    147c:	a1 1d       	adc	r26, r1
    147e:	66 1f       	adc	r22, r22
    1480:	82 9f       	mul	r24, r18
    1482:	22 27       	eor	r18, r18
    1484:	b0 0d       	add	r27, r0
    1486:	a1 1d       	adc	r26, r1
    1488:	62 1f       	adc	r22, r18
    148a:	73 9f       	mul	r23, r19
    148c:	b0 0d       	add	r27, r0
    148e:	a1 1d       	adc	r26, r1
    1490:	62 1f       	adc	r22, r18
    1492:	83 9f       	mul	r24, r19
    1494:	a0 0d       	add	r26, r0
    1496:	61 1d       	adc	r22, r1
    1498:	22 1f       	adc	r18, r18
    149a:	74 9f       	mul	r23, r20
    149c:	33 27       	eor	r19, r19
    149e:	a0 0d       	add	r26, r0
    14a0:	61 1d       	adc	r22, r1
    14a2:	23 1f       	adc	r18, r19
    14a4:	84 9f       	mul	r24, r20
    14a6:	60 0d       	add	r22, r0
    14a8:	21 1d       	adc	r18, r1
    14aa:	82 2f       	mov	r24, r18
    14ac:	76 2f       	mov	r23, r22
    14ae:	6a 2f       	mov	r22, r26
    14b0:	11 24       	eor	r1, r1
    14b2:	9f 57       	subi	r25, 0x7F	; 127
    14b4:	50 40       	sbci	r21, 0x00	; 0
    14b6:	9a f0       	brmi	.+38     	; 0x14de <__mulsf3_pse+0x88>
    14b8:	f1 f0       	breq	.+60     	; 0x14f6 <__mulsf3_pse+0xa0>
    14ba:	88 23       	and	r24, r24
    14bc:	4a f0       	brmi	.+18     	; 0x14d0 <__mulsf3_pse+0x7a>
    14be:	ee 0f       	add	r30, r30
    14c0:	ff 1f       	adc	r31, r31
    14c2:	bb 1f       	adc	r27, r27
    14c4:	66 1f       	adc	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	88 1f       	adc	r24, r24
    14ca:	91 50       	subi	r25, 0x01	; 1
    14cc:	50 40       	sbci	r21, 0x00	; 0
    14ce:	a9 f7       	brne	.-22     	; 0x14ba <__mulsf3_pse+0x64>
    14d0:	9e 3f       	cpi	r25, 0xFE	; 254
    14d2:	51 05       	cpc	r21, r1
    14d4:	80 f0       	brcs	.+32     	; 0x14f6 <__mulsf3_pse+0xa0>
    14d6:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__fp_inf>
    14da:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__fp_szero>
    14de:	5f 3f       	cpi	r21, 0xFF	; 255
    14e0:	e4 f3       	brlt	.-8      	; 0x14da <__mulsf3_pse+0x84>
    14e2:	98 3e       	cpi	r25, 0xE8	; 232
    14e4:	d4 f3       	brlt	.-12     	; 0x14da <__mulsf3_pse+0x84>
    14e6:	86 95       	lsr	r24
    14e8:	77 95       	ror	r23
    14ea:	67 95       	ror	r22
    14ec:	b7 95       	ror	r27
    14ee:	f7 95       	ror	r31
    14f0:	e7 95       	ror	r30
    14f2:	9f 5f       	subi	r25, 0xFF	; 255
    14f4:	c1 f7       	brne	.-16     	; 0x14e6 <__mulsf3_pse+0x90>
    14f6:	fe 2b       	or	r31, r30
    14f8:	88 0f       	add	r24, r24
    14fa:	91 1d       	adc	r25, r1
    14fc:	96 95       	lsr	r25
    14fe:	87 95       	ror	r24
    1500:	97 f9       	bld	r25, 7
    1502:	08 95       	ret

00001504 <itoa>:
    1504:	45 32       	cpi	r20, 0x25	; 37
    1506:	51 05       	cpc	r21, r1
    1508:	20 f4       	brcc	.+8      	; 0x1512 <itoa+0xe>
    150a:	42 30       	cpi	r20, 0x02	; 2
    150c:	10 f0       	brcs	.+4      	; 0x1512 <itoa+0xe>
    150e:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__itoa_ncheck>
    1512:	fb 01       	movw	r30, r22
    1514:	10 82       	st	Z, r1
    1516:	cb 01       	movw	r24, r22
    1518:	08 95       	ret

0000151a <__itoa_ncheck>:
    151a:	bb 27       	eor	r27, r27
    151c:	4a 30       	cpi	r20, 0x0A	; 10
    151e:	31 f4       	brne	.+12     	; 0x152c <__itoa_ncheck+0x12>
    1520:	99 23       	and	r25, r25
    1522:	22 f4       	brpl	.+8      	; 0x152c <__itoa_ncheck+0x12>
    1524:	bd e2       	ldi	r27, 0x2D	; 45
    1526:	90 95       	com	r25
    1528:	81 95       	neg	r24
    152a:	9f 4f       	sbci	r25, 0xFF	; 255
    152c:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <__utoa_common>

00001530 <__utoa_ncheck>:
    1530:	bb 27       	eor	r27, r27

00001532 <__utoa_common>:
    1532:	fb 01       	movw	r30, r22
    1534:	55 27       	eor	r21, r21
    1536:	aa 27       	eor	r26, r26
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	aa 1f       	adc	r26, r26
    153e:	a4 17       	cp	r26, r20
    1540:	10 f0       	brcs	.+4      	; 0x1546 <__utoa_common+0x14>
    1542:	a4 1b       	sub	r26, r20
    1544:	83 95       	inc	r24
    1546:	50 51       	subi	r21, 0x10	; 16
    1548:	b9 f7       	brne	.-18     	; 0x1538 <__utoa_common+0x6>
    154a:	a0 5d       	subi	r26, 0xD0	; 208
    154c:	aa 33       	cpi	r26, 0x3A	; 58
    154e:	08 f0       	brcs	.+2      	; 0x1552 <__utoa_common+0x20>
    1550:	a9 5d       	subi	r26, 0xD9	; 217
    1552:	a1 93       	st	Z+, r26
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	79 f7       	brne	.-34     	; 0x1536 <__utoa_common+0x4>
    1558:	b1 11       	cpse	r27, r1
    155a:	b1 93       	st	Z+, r27
    155c:	11 92       	st	Z+, r1
    155e:	cb 01       	movw	r24, r22
    1560:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <strrev>

00001564 <strrev>:
    1564:	dc 01       	movw	r26, r24
    1566:	fc 01       	movw	r30, r24
    1568:	67 2f       	mov	r22, r23
    156a:	71 91       	ld	r23, Z+
    156c:	77 23       	and	r23, r23
    156e:	e1 f7       	brne	.-8      	; 0x1568 <strrev+0x4>
    1570:	32 97       	sbiw	r30, 0x02	; 2
    1572:	04 c0       	rjmp	.+8      	; 0x157c <strrev+0x18>
    1574:	7c 91       	ld	r23, X
    1576:	6d 93       	st	X+, r22
    1578:	70 83       	st	Z, r23
    157a:	62 91       	ld	r22, -Z
    157c:	ae 17       	cp	r26, r30
    157e:	bf 07       	cpc	r27, r31
    1580:	c8 f3       	brcs	.-14     	; 0x1574 <strrev+0x10>
    1582:	08 95       	ret

00001584 <_exit>:
    1584:	f8 94       	cli

00001586 <__stop_program>:
    1586:	ff cf       	rjmp	.-2      	; 0x1586 <__stop_program>
