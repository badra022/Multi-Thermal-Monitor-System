
application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000143c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000143c  000014d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800076  00800076  000014e6  2**0
                  ALLOC
  3 .stab         00002214  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000161a  00000000  00000000  000036fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004d16  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004d28  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00004d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  00005292  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00005779  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  00005793  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8a 00 	call	0x114	; 0x114 <main>
      8a:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BLUETOOTH_init>:
#include "uart.h"

#define MAX_MESSEGE 20

void BLUETOOTH_init(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <BLUETOOTH_init+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <BLUETOOTH_init+0x8>
      9a:	00 d0       	rcall	.+0      	; 0x9c <BLUETOOTH_init+0xa>
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
	 * 			speed x or U2x
	 * 			type  Sync or Async
	 * 	[DEFAULT] : Baudrate -> 9600 bps
	 ***************************************************/

	UART_ConfigType UART_configStruct = {	UART_PARITY_BIT_DISABLE ,
      a0:	26 e0       	ldi	r18, 0x06	; 6
      a2:	e0 e6       	ldi	r30, 0x60	; 96
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	ce 01       	movw	r24, r28
      a8:	01 96       	adiw	r24, 0x01	; 1
      aa:	dc 01       	movw	r26, r24
      ac:	01 90       	ld	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	2a 95       	dec	r18
      b2:	e1 f7       	brne	.-8      	; 0xac <BLUETOOTH_init+0x1a>
			UART_1_STOP_BIT ,
			UART_8_BIT ,
			UART_2X ,
			UART_ASYNCHRONOUS_OPERATION ,};

	UART_init(&UART_configStruct);
      b4:	ce 01       	movw	r24, r28
      b6:	01 96       	adiw	r24, 0x01	; 1
      b8:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <UART_init>
}
      bc:	00 00       	nop
      be:	26 96       	adiw	r28, 0x06	; 6
      c0:	0f b6       	in	r0, 0x3f	; 63
      c2:	f8 94       	cli
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	0f be       	out	0x3f, r0	; 63
      c8:	cd bf       	out	0x3d, r28	; 61
      ca:	df 91       	pop	r29
      cc:	cf 91       	pop	r28
      ce:	08 95       	ret

000000d0 <BLUETOOTH_recieve>:

void BLUETOOTH_recieve(uint8* str)
{
      d0:	cf 93       	push	r28
      d2:	df 93       	push	r29
      d4:	00 d0       	rcall	.+0      	; 0xd6 <BLUETOOTH_recieve+0x6>
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	9a 83       	std	Y+2, r25	; 0x02
      dc:	89 83       	std	Y+1, r24	; 0x01
	UART_receiveString(str);
      de:	89 81       	ldd	r24, Y+1	; 0x01
      e0:	9a 81       	ldd	r25, Y+2	; 0x02
      e2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <UART_receiveString>
}
      e6:	00 00       	nop
      e8:	0f 90       	pop	r0
      ea:	0f 90       	pop	r0
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	08 95       	ret

000000f2 <BLUETOOTH_transmit>:
void BLUETOOTH_transmit(uint8* str)
{
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	00 d0       	rcall	.+0      	; 0xf8 <BLUETOOTH_transmit+0x6>
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
      fc:	9a 83       	std	Y+2, r25	; 0x02
      fe:	89 83       	std	Y+1, r24	; 0x01
	UART_sendString(str);
     100:	89 81       	ldd	r24, Y+1	; 0x01
     102:	9a 81       	ldd	r25, Y+2	; 0x02
     104:	0e 94 a4 07 	call	0xf48	; 0xf48 <UART_sendString>
}
     108:	00 00       	nop
     10a:	0f 90       	pop	r0
     10c:	0f 90       	pop	r0
     10e:	df 91       	pop	r29
     110:	cf 91       	pop	r28
     112:	08 95       	ret

00000114 <main>:
int main(void)
{
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
     11c:	67 97       	sbiw	r28, 0x17	; 23
     11e:	0f b6       	in	r0, 0x3f	; 63
     120:	f8 94       	cli
     122:	de bf       	out	0x3e, r29	; 62
     124:	0f be       	out	0x3f, r0	; 63
     126:	cd bf       	out	0x3d, r28	; 61
	/*initializaiton code*/
	uint8 str[MAX_MESSEGE];
	/*
	 * initializing bluetooth module
	 */
	BLUETOOTH_init();
     128:	0e 94 49 00 	call	0x92	; 0x92 <BLUETOOTH_init>
	/*
	 * creating configuration structure for adc driver
	 */
	ADC_struct ADC_config = {_2_56v , POLLING , F_CPU_8 };
     12c:	83 e0       	ldi	r24, 0x03	; 3
     12e:	8d 8b       	std	Y+21, r24	; 0x15
     130:	1e 8a       	std	Y+22, r1	; 0x16
     132:	83 e0       	ldi	r24, 0x03	; 3
     134:	8f 8b       	std	Y+23, r24	; 0x17
	/*
	 * initiating adc driver
	 */
	ADC_init(&ADC_config);
     136:	ce 01       	movw	r24, r28
     138:	45 96       	adiw	r24, 0x15	; 21
     13a:	0e 94 bd 00 	call	0x17a	; 0x17a <ADC_init>
	/*
	 * initiating lcd driver
	 */
	LCD_init();
     13e:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_init>
	/*
	 * to convert the result current_reading to temperature reading
	 */
	ADC_setCallBack(THERMAL_conversion);
     142:	87 ea       	ldi	r24, 0xA7	; 167
     144:	96 e0       	ldi	r25, 0x06	; 6
     146:	0e 94 61 01 	call	0x2c2	; 0x2c2 <ADC_setCallBack>
	//CLEAR_BIT(DDRA , 2);
	/*
	 *  setting I-bit for interrupt enable in case you need it
	 */

	GLOBAL_INTERRUPT_ENABLE();
     14a:	8f e5       	ldi	r24, 0x5F	; 95
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	2f e5       	ldi	r18, 0x5F	; 95
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	f9 01       	movw	r30, r18
     154:	20 81       	ld	r18, Z
     156:	20 68       	ori	r18, 0x80	; 128
     158:	fc 01       	movw	r30, r24
     15a:	20 83       	st	Z, r18

	LCD_displayString((uint8*)"temperature = ");
     15c:	86 e6       	ldi	r24, 0x66	; 102
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_displayString>
		LCD_displayInt(Temp);
		LCD_displayString((uint8*)".");
		LCD_displayInt(((uint32)(Temp*10))%10);
#endif

		BLUETOOTH_recieve(str);
     164:	ce 01       	movw	r24, r28
     166:	01 96       	adiw	r24, 0x01	; 1
     168:	0e 94 68 00 	call	0xd0	; 0xd0 <BLUETOOTH_recieve>
		LCD_clearScreen();
     16c:	0e 94 9c 06 	call	0xd38	; 0xd38 <LCD_clearScreen>
		LCD_displayString(str);
     170:	ce 01       	movw	r24, r28
     172:	01 96       	adiw	r24, 0x01	; 1
     174:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_displayString>
	}
     178:	f5 cf       	rjmp	.-22     	; 0x164 <main+0x50>

0000017a <ADC_init>:
volatile uint16 current_reading;
/*********************************************************************************
* 								Functions Definition							 *
 *********************************************************************************/
void ADC_init(const ADC_struct * config_ptr)
{
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	00 d0       	rcall	.+0      	; 0x180 <ADC_init+0x6>
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	9a 83       	std	Y+2, r25	; 0x02
     186:	89 83       	std	Y+1, r24	; 0x01
	/* setting initially
	 * 1. ADC0 channel
	 * 2. reference voltage
	 * 3. no left adjust for result
	 */
	ADMUX = (config_ptr->ref)<<6;
     188:	87 e2       	ldi	r24, 0x27	; 39
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	29 81       	ldd	r18, Y+1	; 0x01
     18e:	3a 81       	ldd	r19, Y+2	; 0x02
     190:	f9 01       	movw	r30, r18
     192:	20 81       	ld	r18, Z
     194:	22 95       	swap	r18
     196:	22 0f       	add	r18, r18
     198:	22 0f       	add	r18, r18
     19a:	20 7c       	andi	r18, 0xC0	; 192
     19c:	fc 01       	movw	r30, r24
     19e:	20 83       	st	Z, r18
	/*
	 * enable adc
	 * */
	SET_BIT(ADCSRA , ADEN);
     1a0:	86 e2       	ldi	r24, 0x26	; 38
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	26 e2       	ldi	r18, 0x26	; 38
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	f9 01       	movw	r30, r18
     1aa:	20 81       	ld	r18, Z
     1ac:	20 68       	ori	r18, 0x80	; 128
     1ae:	fc 01       	movw	r30, r24
     1b0:	20 83       	st	Z, r18
	/*
	 * setting ADIE with either 0 for polling or 1 for interrupt
	 * */
	SET_VALUE(ADCSRA , ADIE , config_ptr->type);
     1b2:	86 e2       	ldi	r24, 0x26	; 38
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	26 e2       	ldi	r18, 0x26	; 38
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	f9 01       	movw	r30, r18
     1bc:	20 81       	ld	r18, Z
     1be:	27 7f       	andi	r18, 0xF7	; 247
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 83       	st	Z, r18
     1c4:	86 e2       	ldi	r24, 0x26	; 38
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	26 e2       	ldi	r18, 0x26	; 38
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	f9 01       	movw	r30, r18
     1ce:	20 81       	ld	r18, Z
     1d0:	42 2f       	mov	r20, r18
     1d2:	29 81       	ldd	r18, Y+1	; 0x01
     1d4:	3a 81       	ldd	r19, Y+2	; 0x02
     1d6:	f9 01       	movw	r30, r18
     1d8:	21 81       	ldd	r18, Z+1	; 0x01
     1da:	22 2f       	mov	r18, r18
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	22 0f       	add	r18, r18
     1e0:	33 1f       	adc	r19, r19
     1e2:	22 0f       	add	r18, r18
     1e4:	33 1f       	adc	r19, r19
     1e6:	22 0f       	add	r18, r18
     1e8:	33 1f       	adc	r19, r19
     1ea:	24 2b       	or	r18, r20
     1ec:	fc 01       	movw	r30, r24
     1ee:	20 83       	st	Z, r18
	/*
	 * setting the prescale value in ADCSRA register
	 * */
	ADCSRA =(ADCSRA & 0xF8) | config_ptr->prescaler;
     1f0:	86 e2       	ldi	r24, 0x26	; 38
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	26 e2       	ldi	r18, 0x26	; 38
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	f9 01       	movw	r30, r18
     1fa:	20 81       	ld	r18, Z
     1fc:	42 2f       	mov	r20, r18
     1fe:	48 7f       	andi	r20, 0xF8	; 248
     200:	29 81       	ldd	r18, Y+1	; 0x01
     202:	3a 81       	ldd	r19, Y+2	; 0x02
     204:	f9 01       	movw	r30, r18
     206:	22 81       	ldd	r18, Z+2	; 0x02
     208:	24 2b       	or	r18, r20
     20a:	fc 01       	movw	r30, r24
     20c:	20 83       	st	Z, r18
}
     20e:	00 00       	nop
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <ADC_readChannel>:

void ADC_readChannel(const ADC_struct * config_ptr,ADC_channel a_channel)
{
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	00 d0       	rcall	.+0      	; 0x220 <ADC_readChannel+0x6>
     220:	1f 92       	push	r1
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	9a 83       	std	Y+2, r25	; 0x02
     228:	89 83       	std	Y+1, r24	; 0x01
     22a:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * setting the channel that will be converted
	 * */
	ADMUX = (ADMUX & 0xE0) |a_channel;
     22c:	87 e2       	ldi	r24, 0x27	; 39
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	27 e2       	ldi	r18, 0x27	; 39
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	f9 01       	movw	r30, r18
     236:	20 81       	ld	r18, Z
     238:	32 2f       	mov	r19, r18
     23a:	30 7e       	andi	r19, 0xE0	; 224
     23c:	2b 81       	ldd	r18, Y+3	; 0x03
     23e:	23 2b       	or	r18, r19
     240:	fc 01       	movw	r30, r24
     242:	20 83       	st	Z, r18
	/*
	 * start conversion
	 * */
	SET_BIT(ADCSRA , ADSC);
     244:	86 e2       	ldi	r24, 0x26	; 38
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	26 e2       	ldi	r18, 0x26	; 38
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	20 64       	ori	r18, 0x40	; 64
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
	/*
	 * polling service routine
	 */
	if(config_ptr->type == POLLING)
     256:	89 81       	ldd	r24, Y+1	; 0x01
     258:	9a 81       	ldd	r25, Y+2	; 0x02
     25a:	fc 01       	movw	r30, r24
     25c:	81 81       	ldd	r24, Z+1	; 0x01
     25e:	88 23       	and	r24, r24
     260:	49 f5       	brne	.+82     	; 0x2b4 <ADC_readChannel+0x9a>
	{
		/*
		 * wait until conversion at adc module is over
		 */
		while(BIT_IS_CLEAR(ADCSRA , ADIF)){};
     262:	00 00       	nop
     264:	86 e2       	ldi	r24, 0x26	; 38
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	fc 01       	movw	r30, r24
     26a:	80 81       	ld	r24, Z
     26c:	88 2f       	mov	r24, r24
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	80 71       	andi	r24, 0x10	; 16
     272:	99 27       	eor	r25, r25
     274:	89 2b       	or	r24, r25
     276:	b1 f3       	breq	.-20     	; 0x264 <ADC_readChannel+0x4a>
		/*
		 * clearing the interrupt module flag
		 */
		SET_BIT(ADCSRA , ADIF);
     278:	86 e2       	ldi	r24, 0x26	; 38
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	26 e2       	ldi	r18, 0x26	; 38
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	20 81       	ld	r18, Z
     284:	20 61       	ori	r18, 0x10	; 16
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
		/*
		 * storing conversion result in current_reading global variable
		 */
		current_reading = ADC;
     28a:	84 e2       	ldi	r24, 0x24	; 36
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	fc 01       	movw	r30, r24
     290:	80 81       	ld	r24, Z
     292:	91 81       	ldd	r25, Z+1	; 0x01
     294:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <current_reading+0x1>
     298:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <current_reading>
		/*
		 * callback function of the hardware sensor conversion for result
		 */
		if(ADC_interruptFunc_ptr != NULL)
     29c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     2a0:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
     2a4:	89 2b       	or	r24, r25
     2a6:	31 f0       	breq	.+12     	; 0x2b4 <ADC_readChannel+0x9a>
			{
				ADC_interruptFunc_ptr();
     2a8:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     2ac:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
     2b0:	fc 01       	movw	r30, r24
     2b2:	09 95       	icall
			}
	}
}
     2b4:	00 00       	nop
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <ADC_setCallBack>:
void ADC_setCallBack(void (*a_ptr)(void))
{
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <ADC_setCallBack+0x6>
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	9a 83       	std	Y+2, r25	; 0x02
     2ce:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * passing the address of the call back function
	 * */
	ADC_interruptFunc_ptr = a_ptr;
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	9a 81       	ldd	r25, Y+2	; 0x02
     2d4:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
     2d8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
}
     2dc:	00 00       	nop
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <__vector_14>:
/*********************************************************************************
* 								Interrupt service routines							 *
 *********************************************************************************/
ISR(ADC_vect)
{
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2f0:	0f 92       	push	r0
     2f2:	11 24       	eor	r1, r1
     2f4:	2f 93       	push	r18
     2f6:	3f 93       	push	r19
     2f8:	4f 93       	push	r20
     2fa:	5f 93       	push	r21
     2fc:	6f 93       	push	r22
     2fe:	7f 93       	push	r23
     300:	8f 93       	push	r24
     302:	9f 93       	push	r25
     304:	af 93       	push	r26
     306:	bf 93       	push	r27
     308:	ef 93       	push	r30
     30a:	ff 93       	push	r31
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
	/*
	 * storing conversion result in current_reading global variable
	 */
	current_reading = ADC;
     314:	84 e2       	ldi	r24, 0x24	; 36
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	fc 01       	movw	r30, r24
     31a:	80 81       	ld	r24, Z
     31c:	91 81       	ldd	r25, Z+1	; 0x01
     31e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <current_reading+0x1>
     322:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <current_reading>
	if(ADC_interruptFunc_ptr != NULL)
     326:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     32a:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
     32e:	89 2b       	or	r24, r25
     330:	31 f0       	breq	.+12     	; 0x33e <__vector_14+0x56>
	{
		ADC_interruptFunc_ptr();
     332:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     336:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
     33a:	fc 01       	movw	r30, r24
     33c:	09 95       	icall
	}
}
     33e:	00 00       	nop
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	ff 91       	pop	r31
     346:	ef 91       	pop	r30
     348:	bf 91       	pop	r27
     34a:	af 91       	pop	r26
     34c:	9f 91       	pop	r25
     34e:	8f 91       	pop	r24
     350:	7f 91       	pop	r23
     352:	6f 91       	pop	r22
     354:	5f 91       	pop	r21
     356:	4f 91       	pop	r20
     358:	3f 91       	pop	r19
     35a:	2f 91       	pop	r18
     35c:	0f 90       	pop	r0
     35e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     362:	0f 90       	pop	r0
     364:	1f 90       	pop	r1
     366:	18 95       	reti

00000368 <LCD_init>:
 *******************************************************************************/
#include"lcd.h"

/*--------------------------------------FUNCTION DEFINITIONS---------------------------------------------*/
void LCD_init(void)
{
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(LCD_CTRL_DIR , RS);	/* make RS pin o/p pin*/
     370:	84 e3       	ldi	r24, 0x34	; 52
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	24 e3       	ldi	r18, 0x34	; 52
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	f9 01       	movw	r30, r18
     37a:	20 81       	ld	r18, Z
     37c:	21 60       	ori	r18, 0x01	; 1
     37e:	fc 01       	movw	r30, r24
     380:	20 83       	st	Z, r18
	SET_BIT(LCD_CTRL_DIR , RW);	/* make RW pin o/p pin*/
     382:	84 e3       	ldi	r24, 0x34	; 52
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	24 e3       	ldi	r18, 0x34	; 52
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	f9 01       	movw	r30, r18
     38c:	20 81       	ld	r18, Z
     38e:	22 60       	ori	r18, 0x02	; 2
     390:	fc 01       	movw	r30, r24
     392:	20 83       	st	Z, r18
	SET_BIT(LCD_CTRL_DIR , E);	/*make E pin o/p pin*/
     394:	84 e3       	ldi	r24, 0x34	; 52
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	24 e3       	ldi	r18, 0x34	; 52
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	f9 01       	movw	r30, r18
     39e:	20 81       	ld	r18, Z
     3a0:	24 60       	ori	r18, 0x04	; 4
     3a2:	fc 01       	movw	r30, r24
     3a4:	20 83       	st	Z, r18
#endif
	LCD_sendCommand(SWITCH_4_BIT_MODE);
	LCD_sendCommand(TWO_LINE_4_BITS);
#endif
#ifndef LCD_4_BITS_MODE
	SET_UPPER(LCD_DATA_DIR);
     3a6:	87 e3       	ldi	r24, 0x37	; 55
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	27 e3       	ldi	r18, 0x37	; 55
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	f9 01       	movw	r30, r18
     3b0:	20 81       	ld	r18, Z
     3b2:	2f 60       	ori	r18, 0x0F	; 15
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 83       	st	Z, r18
	SET_LOWER(LCD_DATA_DIR);				/* make data port o/p port*/
     3b8:	87 e3       	ldi	r24, 0x37	; 55
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	27 e3       	ldi	r18, 0x37	; 55
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	f9 01       	movw	r30, r18
     3c2:	20 81       	ld	r18, Z
     3c4:	20 6f       	ori	r18, 0xF0	; 240
     3c6:	fc 01       	movw	r30, r24
     3c8:	20 83       	st	Z, r18
	LCD_sendCommand(TWO_LINE_8_BITS);		/* 2lines + 8 bits mode*/
     3ca:	88 e3       	ldi	r24, 0x38	; 56
     3cc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_sendCommand>
#endif
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);		/* Cursor off */
     3d0:	8c e0       	ldi	r24, 0x0C	; 12
     3d2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN);		/* clear screen*/
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_sendCommand>
}
     3dc:	00 00       	nop
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command)
{
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	e9 97       	sbiw	r28, 0x39	; 57
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	89 af       	std	Y+57, r24	; 0x39
	/*function definition*/
	CLEAR_BIT(LCD_CTRL_OUT , RS);	/*for command mode*/
     3fa:	85 e3       	ldi	r24, 0x35	; 53
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	25 e3       	ldi	r18, 0x35	; 53
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	f9 01       	movw	r30, r18
     404:	20 81       	ld	r18, Z
     406:	2e 7f       	andi	r18, 0xFE	; 254
     408:	fc 01       	movw	r30, r24
     40a:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_OUT , RW);	/*for write mode*/
     40c:	85 e3       	ldi	r24, 0x35	; 53
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	25 e3       	ldi	r18, 0x35	; 53
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	f9 01       	movw	r30, r18
     416:	20 81       	ld	r18, Z
     418:	2d 7f       	andi	r18, 0xFD	; 253
     41a:	fc 01       	movw	r30, r24
     41c:	20 83       	st	Z, r18
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	a0 e8       	ldi	r26, 0x80	; 128
     424:	bf e3       	ldi	r27, 0x3F	; 63
     426:	89 83       	std	Y+1, r24	; 0x01
     428:	9a 83       	std	Y+2, r25	; 0x02
     42a:	ab 83       	std	Y+3, r26	; 0x03
     42c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	4a e7       	ldi	r20, 0x7A	; 122
     434:	53 e4       	ldi	r21, 0x43	; 67
     436:	69 81       	ldd	r22, Y+1	; 0x01
     438:	7a 81       	ldd	r23, Y+2	; 0x02
     43a:	8b 81       	ldd	r24, Y+3	; 0x03
     43c:	9c 81       	ldd	r25, Y+4	; 0x04
     43e:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     442:	dc 01       	movw	r26, r24
     444:	cb 01       	movw	r24, r22
     446:	8f a7       	std	Y+47, r24	; 0x2f
     448:	98 ab       	std	Y+48, r25	; 0x30
     44a:	a9 ab       	std	Y+49, r26	; 0x31
     44c:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	40 e8       	ldi	r20, 0x80	; 128
     454:	5f e3       	ldi	r21, 0x3F	; 63
     456:	6f a5       	ldd	r22, Y+47	; 0x2f
     458:	78 a9       	ldd	r23, Y+48	; 0x30
     45a:	89 a9       	ldd	r24, Y+49	; 0x31
     45c:	9a a9       	ldd	r25, Y+50	; 0x32
     45e:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     462:	88 23       	and	r24, r24
     464:	2c f4       	brge	.+10     	; 0x470 <__stack+0x11>
		__ticks = 1;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	9c ab       	std	Y+52, r25	; 0x34
     46c:	8b ab       	std	Y+51, r24	; 0x33
     46e:	3f c0       	rjmp	.+126    	; 0x4ee <__stack+0x8f>
	else if (__tmp > 65535)
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	3f ef       	ldi	r19, 0xFF	; 255
     474:	4f e7       	ldi	r20, 0x7F	; 127
     476:	57 e4       	ldi	r21, 0x47	; 71
     478:	6f a5       	ldd	r22, Y+47	; 0x2f
     47a:	78 a9       	ldd	r23, Y+48	; 0x30
     47c:	89 a9       	ldd	r24, Y+49	; 0x31
     47e:	9a a9       	ldd	r25, Y+50	; 0x32
     480:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__gesf2>
     484:	18 16       	cp	r1, r24
     486:	4c f5       	brge	.+82     	; 0x4da <__stack+0x7b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e2       	ldi	r20, 0x20	; 32
     48e:	51 e4       	ldi	r21, 0x41	; 65
     490:	69 81       	ldd	r22, Y+1	; 0x01
     492:	7a 81       	ldd	r23, Y+2	; 0x02
     494:	8b 81       	ldd	r24, Y+3	; 0x03
     496:	9c 81       	ldd	r25, Y+4	; 0x04
     498:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     49c:	dc 01       	movw	r26, r24
     49e:	cb 01       	movw	r24, r22
     4a0:	bc 01       	movw	r22, r24
     4a2:	cd 01       	movw	r24, r26
     4a4:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     4a8:	dc 01       	movw	r26, r24
     4aa:	cb 01       	movw	r24, r22
     4ac:	9c ab       	std	Y+52, r25	; 0x34
     4ae:	8b ab       	std	Y+51, r24	; 0x33
     4b0:	0f c0       	rjmp	.+30     	; 0x4d0 <__stack+0x71>
     4b2:	89 e1       	ldi	r24, 0x19	; 25
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	9e ab       	std	Y+54, r25	; 0x36
     4b8:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4ba:	8d a9       	ldd	r24, Y+53	; 0x35
     4bc:	9e a9       	ldd	r25, Y+54	; 0x36
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	f1 f7       	brne	.-4      	; 0x4be <__stack+0x5f>
     4c2:	9e ab       	std	Y+54, r25	; 0x36
     4c4:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4c6:	8b a9       	ldd	r24, Y+51	; 0x33
     4c8:	9c a9       	ldd	r25, Y+52	; 0x34
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	9c ab       	std	Y+52, r25	; 0x34
     4ce:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d0:	8b a9       	ldd	r24, Y+51	; 0x33
     4d2:	9c a9       	ldd	r25, Y+52	; 0x34
     4d4:	89 2b       	or	r24, r25
     4d6:	69 f7       	brne	.-38     	; 0x4b2 <__stack+0x53>
     4d8:	14 c0       	rjmp	.+40     	; 0x502 <__stack+0xa3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4da:	6f a5       	ldd	r22, Y+47	; 0x2f
     4dc:	78 a9       	ldd	r23, Y+48	; 0x30
     4de:	89 a9       	ldd	r24, Y+49	; 0x31
     4e0:	9a a9       	ldd	r25, Y+50	; 0x32
     4e2:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     4e6:	dc 01       	movw	r26, r24
     4e8:	cb 01       	movw	r24, r22
     4ea:	9c ab       	std	Y+52, r25	; 0x34
     4ec:	8b ab       	std	Y+51, r24	; 0x33
     4ee:	8b a9       	ldd	r24, Y+51	; 0x33
     4f0:	9c a9       	ldd	r25, Y+52	; 0x34
     4f2:	98 af       	std	Y+56, r25	; 0x38
     4f4:	8f ab       	std	Y+55, r24	; 0x37
     4f6:	8f a9       	ldd	r24, Y+55	; 0x37
     4f8:	98 ad       	ldd	r25, Y+56	; 0x38
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <__stack+0x9b>
     4fe:	98 af       	std	Y+56, r25	; 0x38
     500:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);					/*for write timing diagram*/
	SET_BIT(LCD_CTRL_OUT , E);		/*to enable the lcd*/
     502:	85 e3       	ldi	r24, 0x35	; 53
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	25 e3       	ldi	r18, 0x35	; 53
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	f9 01       	movw	r30, r18
     50c:	20 81       	ld	r18, Z
     50e:	24 60       	ori	r18, 0x04	; 4
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	a0 e8       	ldi	r26, 0x80	; 128
     51a:	bf e3       	ldi	r27, 0x3F	; 63
     51c:	8d 83       	std	Y+5, r24	; 0x05
     51e:	9e 83       	std	Y+6, r25	; 0x06
     520:	af 83       	std	Y+7, r26	; 0x07
     522:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	4a e7       	ldi	r20, 0x7A	; 122
     52a:	53 e4       	ldi	r21, 0x43	; 67
     52c:	6d 81       	ldd	r22, Y+5	; 0x05
     52e:	7e 81       	ldd	r23, Y+6	; 0x06
     530:	8f 81       	ldd	r24, Y+7	; 0x07
     532:	98 85       	ldd	r25, Y+8	; 0x08
     534:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	8d a3       	std	Y+37, r24	; 0x25
     53e:	9e a3       	std	Y+38, r25	; 0x26
     540:	af a3       	std	Y+39, r26	; 0x27
     542:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	40 e8       	ldi	r20, 0x80	; 128
     54a:	5f e3       	ldi	r21, 0x3F	; 63
     54c:	6d a1       	ldd	r22, Y+37	; 0x25
     54e:	7e a1       	ldd	r23, Y+38	; 0x26
     550:	8f a1       	ldd	r24, Y+39	; 0x27
     552:	98 a5       	ldd	r25, Y+40	; 0x28
     554:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     558:	88 23       	and	r24, r24
     55a:	2c f4       	brge	.+10     	; 0x566 <__stack+0x107>
		__ticks = 1;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	9a a7       	std	Y+42, r25	; 0x2a
     562:	89 a7       	std	Y+41, r24	; 0x29
     564:	3f c0       	rjmp	.+126    	; 0x5e4 <__stack+0x185>
	else if (__tmp > 65535)
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	3f ef       	ldi	r19, 0xFF	; 255
     56a:	4f e7       	ldi	r20, 0x7F	; 127
     56c:	57 e4       	ldi	r21, 0x47	; 71
     56e:	6d a1       	ldd	r22, Y+37	; 0x25
     570:	7e a1       	ldd	r23, Y+38	; 0x26
     572:	8f a1       	ldd	r24, Y+39	; 0x27
     574:	98 a5       	ldd	r25, Y+40	; 0x28
     576:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__gesf2>
     57a:	18 16       	cp	r1, r24
     57c:	4c f5       	brge	.+82     	; 0x5d0 <__stack+0x171>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	40 e2       	ldi	r20, 0x20	; 32
     584:	51 e4       	ldi	r21, 0x41	; 65
     586:	6d 81       	ldd	r22, Y+5	; 0x05
     588:	7e 81       	ldd	r23, Y+6	; 0x06
     58a:	8f 81       	ldd	r24, Y+7	; 0x07
     58c:	98 85       	ldd	r25, Y+8	; 0x08
     58e:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	bc 01       	movw	r22, r24
     598:	cd 01       	movw	r24, r26
     59a:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     59e:	dc 01       	movw	r26, r24
     5a0:	cb 01       	movw	r24, r22
     5a2:	9a a7       	std	Y+42, r25	; 0x2a
     5a4:	89 a7       	std	Y+41, r24	; 0x29
     5a6:	0f c0       	rjmp	.+30     	; 0x5c6 <__stack+0x167>
     5a8:	89 e1       	ldi	r24, 0x19	; 25
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	9c a7       	std	Y+44, r25	; 0x2c
     5ae:	8b a7       	std	Y+43, r24	; 0x2b
     5b0:	8b a5       	ldd	r24, Y+43	; 0x2b
     5b2:	9c a5       	ldd	r25, Y+44	; 0x2c
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <__stack+0x155>
     5b8:	9c a7       	std	Y+44, r25	; 0x2c
     5ba:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5bc:	89 a5       	ldd	r24, Y+41	; 0x29
     5be:	9a a5       	ldd	r25, Y+42	; 0x2a
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	9a a7       	std	Y+42, r25	; 0x2a
     5c4:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5c6:	89 a5       	ldd	r24, Y+41	; 0x29
     5c8:	9a a5       	ldd	r25, Y+42	; 0x2a
     5ca:	89 2b       	or	r24, r25
     5cc:	69 f7       	brne	.-38     	; 0x5a8 <__stack+0x149>
     5ce:	14 c0       	rjmp	.+40     	; 0x5f8 <__stack+0x199>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5d0:	6d a1       	ldd	r22, Y+37	; 0x25
     5d2:	7e a1       	ldd	r23, Y+38	; 0x26
     5d4:	8f a1       	ldd	r24, Y+39	; 0x27
     5d6:	98 a5       	ldd	r25, Y+40	; 0x28
     5d8:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	9a a7       	std	Y+42, r25	; 0x2a
     5e2:	89 a7       	std	Y+41, r24	; 0x29
     5e4:	89 a5       	ldd	r24, Y+41	; 0x29
     5e6:	9a a5       	ldd	r25, Y+42	; 0x2a
     5e8:	9e a7       	std	Y+46, r25	; 0x2e
     5ea:	8d a7       	std	Y+45, r24	; 0x2d
     5ec:	8d a5       	ldd	r24, Y+45	; 0x2d
     5ee:	9e a5       	ldd	r25, Y+46	; 0x2e
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <__stack+0x191>
     5f4:	9e a7       	std	Y+46, r25	; 0x2e
     5f6:	8d a7       	std	Y+45, r24	; 0x2d
	PUT_UPPER_IN_UPPER(LCD_DATA_OUT , command);
	#else
	PUT_UPPER_IN_LOWER(LCD_DATA_OUT , command);
	#endif
	#else
	LCD_DATA_OUT = command;			/*out the command variable*/
     5f8:	88 e3       	ldi	r24, 0x38	; 56
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	29 ad       	ldd	r18, Y+57	; 0x39
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	a0 e8       	ldi	r26, 0x80	; 128
     608:	bf e3       	ldi	r27, 0x3F	; 63
     60a:	89 87       	std	Y+9, r24	; 0x09
     60c:	9a 87       	std	Y+10, r25	; 0x0a
     60e:	ab 87       	std	Y+11, r26	; 0x0b
     610:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	4a e7       	ldi	r20, 0x7A	; 122
     618:	53 e4       	ldi	r21, 0x43	; 67
     61a:	69 85       	ldd	r22, Y+9	; 0x09
     61c:	7a 85       	ldd	r23, Y+10	; 0x0a
     61e:	8b 85       	ldd	r24, Y+11	; 0x0b
     620:	9c 85       	ldd	r25, Y+12	; 0x0c
     622:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	8b 8f       	std	Y+27, r24	; 0x1b
     62c:	9c 8f       	std	Y+28, r25	; 0x1c
     62e:	ad 8f       	std	Y+29, r26	; 0x1d
     630:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	40 e8       	ldi	r20, 0x80	; 128
     638:	5f e3       	ldi	r21, 0x3F	; 63
     63a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     63c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     63e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     640:	9e 8d       	ldd	r25, Y+30	; 0x1e
     642:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     646:	88 23       	and	r24, r24
     648:	2c f4       	brge	.+10     	; 0x654 <__stack+0x1f5>
		__ticks = 1;
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	98 a3       	std	Y+32, r25	; 0x20
     650:	8f 8f       	std	Y+31, r24	; 0x1f
     652:	3f c0       	rjmp	.+126    	; 0x6d2 <__stack+0x273>
	else if (__tmp > 65535)
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	3f ef       	ldi	r19, 0xFF	; 255
     658:	4f e7       	ldi	r20, 0x7F	; 127
     65a:	57 e4       	ldi	r21, 0x47	; 71
     65c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     65e:	7c 8d       	ldd	r23, Y+28	; 0x1c
     660:	8d 8d       	ldd	r24, Y+29	; 0x1d
     662:	9e 8d       	ldd	r25, Y+30	; 0x1e
     664:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__gesf2>
     668:	18 16       	cp	r1, r24
     66a:	4c f5       	brge	.+82     	; 0x6be <__stack+0x25f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	40 e2       	ldi	r20, 0x20	; 32
     672:	51 e4       	ldi	r21, 0x41	; 65
     674:	69 85       	ldd	r22, Y+9	; 0x09
     676:	7a 85       	ldd	r23, Y+10	; 0x0a
     678:	8b 85       	ldd	r24, Y+11	; 0x0b
     67a:	9c 85       	ldd	r25, Y+12	; 0x0c
     67c:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     680:	dc 01       	movw	r26, r24
     682:	cb 01       	movw	r24, r22
     684:	bc 01       	movw	r22, r24
     686:	cd 01       	movw	r24, r26
     688:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	98 a3       	std	Y+32, r25	; 0x20
     692:	8f 8f       	std	Y+31, r24	; 0x1f
     694:	0f c0       	rjmp	.+30     	; 0x6b4 <__stack+0x255>
     696:	89 e1       	ldi	r24, 0x19	; 25
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	9a a3       	std	Y+34, r25	; 0x22
     69c:	89 a3       	std	Y+33, r24	; 0x21
     69e:	89 a1       	ldd	r24, Y+33	; 0x21
     6a0:	9a a1       	ldd	r25, Y+34	; 0x22
     6a2:	01 97       	sbiw	r24, 0x01	; 1
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <__stack+0x243>
     6a6:	9a a3       	std	Y+34, r25	; 0x22
     6a8:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6ac:	98 a1       	ldd	r25, Y+32	; 0x20
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	98 a3       	std	Y+32, r25	; 0x20
     6b2:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6b6:	98 a1       	ldd	r25, Y+32	; 0x20
     6b8:	89 2b       	or	r24, r25
     6ba:	69 f7       	brne	.-38     	; 0x696 <__stack+0x237>
     6bc:	14 c0       	rjmp	.+40     	; 0x6e6 <__stack+0x287>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6be:	6b 8d       	ldd	r22, Y+27	; 0x1b
     6c0:	7c 8d       	ldd	r23, Y+28	; 0x1c
     6c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     6c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     6c6:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     6ca:	dc 01       	movw	r26, r24
     6cc:	cb 01       	movw	r24, r22
     6ce:	98 a3       	std	Y+32, r25	; 0x20
     6d0:	8f 8f       	std	Y+31, r24	; 0x1f
     6d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6d4:	98 a1       	ldd	r25, Y+32	; 0x20
     6d6:	9c a3       	std	Y+36, r25	; 0x24
     6d8:	8b a3       	std	Y+35, r24	; 0x23
     6da:	8b a1       	ldd	r24, Y+35	; 0x23
     6dc:	9c a1       	ldd	r25, Y+36	; 0x24
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <__stack+0x27f>
     6e2:	9c a3       	std	Y+36, r25	; 0x24
     6e4:	8b a3       	std	Y+35, r24	; 0x23
	#endif
	_delay_ms(1);					/*for write timing diagram*/
	CLEAR_BIT(LCD_CTRL_OUT , E);	/*for write timing diagram*/
     6e6:	85 e3       	ldi	r24, 0x35	; 53
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	25 e3       	ldi	r18, 0x35	; 53
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	f9 01       	movw	r30, r18
     6f0:	20 81       	ld	r18, Z
     6f2:	2b 7f       	andi	r18, 0xFB	; 251
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 83       	st	Z, r18
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	a0 e8       	ldi	r26, 0x80	; 128
     6fe:	bf e3       	ldi	r27, 0x3F	; 63
     700:	8d 87       	std	Y+13, r24	; 0x0d
     702:	9e 87       	std	Y+14, r25	; 0x0e
     704:	af 87       	std	Y+15, r26	; 0x0f
     706:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	4a e7       	ldi	r20, 0x7A	; 122
     70e:	53 e4       	ldi	r21, 0x43	; 67
     710:	6d 85       	ldd	r22, Y+13	; 0x0d
     712:	7e 85       	ldd	r23, Y+14	; 0x0e
     714:	8f 85       	ldd	r24, Y+15	; 0x0f
     716:	98 89       	ldd	r25, Y+16	; 0x10
     718:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     71c:	dc 01       	movw	r26, r24
     71e:	cb 01       	movw	r24, r22
     720:	89 8b       	std	Y+17, r24	; 0x11
     722:	9a 8b       	std	Y+18, r25	; 0x12
     724:	ab 8b       	std	Y+19, r26	; 0x13
     726:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 e8       	ldi	r20, 0x80	; 128
     72e:	5f e3       	ldi	r21, 0x3F	; 63
     730:	69 89       	ldd	r22, Y+17	; 0x11
     732:	7a 89       	ldd	r23, Y+18	; 0x12
     734:	8b 89       	ldd	r24, Y+19	; 0x13
     736:	9c 89       	ldd	r25, Y+20	; 0x14
     738:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     73c:	88 23       	and	r24, r24
     73e:	2c f4       	brge	.+10     	; 0x74a <__stack+0x2eb>
		__ticks = 1;
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	9e 8b       	std	Y+22, r25	; 0x16
     746:	8d 8b       	std	Y+21, r24	; 0x15
     748:	3f c0       	rjmp	.+126    	; 0x7c8 <__stack+0x369>
	else if (__tmp > 65535)
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	3f ef       	ldi	r19, 0xFF	; 255
     74e:	4f e7       	ldi	r20, 0x7F	; 127
     750:	57 e4       	ldi	r21, 0x47	; 71
     752:	69 89       	ldd	r22, Y+17	; 0x11
     754:	7a 89       	ldd	r23, Y+18	; 0x12
     756:	8b 89       	ldd	r24, Y+19	; 0x13
     758:	9c 89       	ldd	r25, Y+20	; 0x14
     75a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__gesf2>
     75e:	18 16       	cp	r1, r24
     760:	4c f5       	brge	.+82     	; 0x7b4 <__stack+0x355>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e2       	ldi	r20, 0x20	; 32
     768:	51 e4       	ldi	r21, 0x41	; 65
     76a:	6d 85       	ldd	r22, Y+13	; 0x0d
     76c:	7e 85       	ldd	r23, Y+14	; 0x0e
     76e:	8f 85       	ldd	r24, Y+15	; 0x0f
     770:	98 89       	ldd	r25, Y+16	; 0x10
     772:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     776:	dc 01       	movw	r26, r24
     778:	cb 01       	movw	r24, r22
     77a:	bc 01       	movw	r22, r24
     77c:	cd 01       	movw	r24, r26
     77e:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     782:	dc 01       	movw	r26, r24
     784:	cb 01       	movw	r24, r22
     786:	9e 8b       	std	Y+22, r25	; 0x16
     788:	8d 8b       	std	Y+21, r24	; 0x15
     78a:	0f c0       	rjmp	.+30     	; 0x7aa <__stack+0x34b>
     78c:	89 e1       	ldi	r24, 0x19	; 25
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	98 8f       	std	Y+24, r25	; 0x18
     792:	8f 8b       	std	Y+23, r24	; 0x17
     794:	8f 89       	ldd	r24, Y+23	; 0x17
     796:	98 8d       	ldd	r25, Y+24	; 0x18
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <__stack+0x339>
     79c:	98 8f       	std	Y+24, r25	; 0x18
     79e:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a0:	8d 89       	ldd	r24, Y+21	; 0x15
     7a2:	9e 89       	ldd	r25, Y+22	; 0x16
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	9e 8b       	std	Y+22, r25	; 0x16
     7a8:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7aa:	8d 89       	ldd	r24, Y+21	; 0x15
     7ac:	9e 89       	ldd	r25, Y+22	; 0x16
     7ae:	89 2b       	or	r24, r25
     7b0:	69 f7       	brne	.-38     	; 0x78c <__stack+0x32d>
	_delay_ms(1);					/*for write timing diagram*/
}
     7b2:	14 c0       	rjmp	.+40     	; 0x7dc <__stack+0x37d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7b4:	69 89       	ldd	r22, Y+17	; 0x11
     7b6:	7a 89       	ldd	r23, Y+18	; 0x12
     7b8:	8b 89       	ldd	r24, Y+19	; 0x13
     7ba:	9c 89       	ldd	r25, Y+20	; 0x14
     7bc:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     7c0:	dc 01       	movw	r26, r24
     7c2:	cb 01       	movw	r24, r22
     7c4:	9e 8b       	std	Y+22, r25	; 0x16
     7c6:	8d 8b       	std	Y+21, r24	; 0x15
     7c8:	8d 89       	ldd	r24, Y+21	; 0x15
     7ca:	9e 89       	ldd	r25, Y+22	; 0x16
     7cc:	9a 8f       	std	Y+26, r25	; 0x1a
     7ce:	89 8f       	std	Y+25, r24	; 0x19
     7d0:	89 8d       	ldd	r24, Y+25	; 0x19
     7d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <__stack+0x375>
     7d8:	9a 8f       	std	Y+26, r25	; 0x1a
     7da:	89 8f       	std	Y+25, r24	; 0x19
     7dc:	00 00       	nop
     7de:	e9 96       	adiw	r28, 0x39	; 57
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	cd bf       	out	0x3d, r28	; 61
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 a_data)
{
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	e9 97       	sbiw	r28, 0x39	; 57
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
     804:	89 af       	std	Y+57, r24	; 0x39
	/*function definition*/
	SET_BIT(LCD_CTRL_OUT , RS);	/*for command mode*/
     806:	85 e3       	ldi	r24, 0x35	; 53
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	25 e3       	ldi	r18, 0x35	; 53
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	f9 01       	movw	r30, r18
     810:	20 81       	ld	r18, Z
     812:	21 60       	ori	r18, 0x01	; 1
     814:	fc 01       	movw	r30, r24
     816:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_OUT , RW);	/*for write mode*/
     818:	85 e3       	ldi	r24, 0x35	; 53
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	25 e3       	ldi	r18, 0x35	; 53
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	f9 01       	movw	r30, r18
     822:	20 81       	ld	r18, Z
     824:	2d 7f       	andi	r18, 0xFD	; 253
     826:	fc 01       	movw	r30, r24
     828:	20 83       	st	Z, r18
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	a0 e8       	ldi	r26, 0x80	; 128
     830:	bf e3       	ldi	r27, 0x3F	; 63
     832:	89 83       	std	Y+1, r24	; 0x01
     834:	9a 83       	std	Y+2, r25	; 0x02
     836:	ab 83       	std	Y+3, r26	; 0x03
     838:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	4a e7       	ldi	r20, 0x7A	; 122
     840:	53 e4       	ldi	r21, 0x43	; 67
     842:	69 81       	ldd	r22, Y+1	; 0x01
     844:	7a 81       	ldd	r23, Y+2	; 0x02
     846:	8b 81       	ldd	r24, Y+3	; 0x03
     848:	9c 81       	ldd	r25, Y+4	; 0x04
     84a:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	8f a7       	std	Y+47, r24	; 0x2f
     854:	98 ab       	std	Y+48, r25	; 0x30
     856:	a9 ab       	std	Y+49, r26	; 0x31
     858:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e8       	ldi	r20, 0x80	; 128
     860:	5f e3       	ldi	r21, 0x3F	; 63
     862:	6f a5       	ldd	r22, Y+47	; 0x2f
     864:	78 a9       	ldd	r23, Y+48	; 0x30
     866:	89 a9       	ldd	r24, Y+49	; 0x31
     868:	9a a9       	ldd	r25, Y+50	; 0x32
     86a:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     86e:	88 23       	and	r24, r24
     870:	2c f4       	brge	.+10     	; 0x87c <LCD_displayCharacter+0x8c>
		__ticks = 1;
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	9c ab       	std	Y+52, r25	; 0x34
     878:	8b ab       	std	Y+51, r24	; 0x33
     87a:	3f c0       	rjmp	.+126    	; 0x8fa <LCD_displayCharacter+0x10a>
	else if (__tmp > 65535)
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	3f ef       	ldi	r19, 0xFF	; 255
     880:	4f e7       	ldi	r20, 0x7F	; 127
     882:	57 e4       	ldi	r21, 0x47	; 71
     884:	6f a5       	ldd	r22, Y+47	; 0x2f
     886:	78 a9       	ldd	r23, Y+48	; 0x30
     888:	89 a9       	ldd	r24, Y+49	; 0x31
     88a:	9a a9       	ldd	r25, Y+50	; 0x32
     88c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__gesf2>
     890:	18 16       	cp	r1, r24
     892:	4c f5       	brge	.+82     	; 0x8e6 <LCD_displayCharacter+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	40 e2       	ldi	r20, 0x20	; 32
     89a:	51 e4       	ldi	r21, 0x41	; 65
     89c:	69 81       	ldd	r22, Y+1	; 0x01
     89e:	7a 81       	ldd	r23, Y+2	; 0x02
     8a0:	8b 81       	ldd	r24, Y+3	; 0x03
     8a2:	9c 81       	ldd	r25, Y+4	; 0x04
     8a4:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	bc 01       	movw	r22, r24
     8ae:	cd 01       	movw	r24, r26
     8b0:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     8b4:	dc 01       	movw	r26, r24
     8b6:	cb 01       	movw	r24, r22
     8b8:	9c ab       	std	Y+52, r25	; 0x34
     8ba:	8b ab       	std	Y+51, r24	; 0x33
     8bc:	0f c0       	rjmp	.+30     	; 0x8dc <LCD_displayCharacter+0xec>
     8be:	89 e1       	ldi	r24, 0x19	; 25
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	9e ab       	std	Y+54, r25	; 0x36
     8c4:	8d ab       	std	Y+53, r24	; 0x35
     8c6:	8d a9       	ldd	r24, Y+53	; 0x35
     8c8:	9e a9       	ldd	r25, Y+54	; 0x36
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <LCD_displayCharacter+0xda>
     8ce:	9e ab       	std	Y+54, r25	; 0x36
     8d0:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d2:	8b a9       	ldd	r24, Y+51	; 0x33
     8d4:	9c a9       	ldd	r25, Y+52	; 0x34
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	9c ab       	std	Y+52, r25	; 0x34
     8da:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8dc:	8b a9       	ldd	r24, Y+51	; 0x33
     8de:	9c a9       	ldd	r25, Y+52	; 0x34
     8e0:	89 2b       	or	r24, r25
     8e2:	69 f7       	brne	.-38     	; 0x8be <LCD_displayCharacter+0xce>
     8e4:	14 c0       	rjmp	.+40     	; 0x90e <LCD_displayCharacter+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8e6:	6f a5       	ldd	r22, Y+47	; 0x2f
     8e8:	78 a9       	ldd	r23, Y+48	; 0x30
     8ea:	89 a9       	ldd	r24, Y+49	; 0x31
     8ec:	9a a9       	ldd	r25, Y+50	; 0x32
     8ee:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     8f2:	dc 01       	movw	r26, r24
     8f4:	cb 01       	movw	r24, r22
     8f6:	9c ab       	std	Y+52, r25	; 0x34
     8f8:	8b ab       	std	Y+51, r24	; 0x33
     8fa:	8b a9       	ldd	r24, Y+51	; 0x33
     8fc:	9c a9       	ldd	r25, Y+52	; 0x34
     8fe:	98 af       	std	Y+56, r25	; 0x38
     900:	8f ab       	std	Y+55, r24	; 0x37
     902:	8f a9       	ldd	r24, Y+55	; 0x37
     904:	98 ad       	ldd	r25, Y+56	; 0x38
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <LCD_displayCharacter+0x116>
     90a:	98 af       	std	Y+56, r25	; 0x38
     90c:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);					/*for write timing diagram*/
	SET_BIT(LCD_CTRL_OUT , E);		/*to enable the lcd*/
     90e:	85 e3       	ldi	r24, 0x35	; 53
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	25 e3       	ldi	r18, 0x35	; 53
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	f9 01       	movw	r30, r18
     918:	20 81       	ld	r18, Z
     91a:	24 60       	ori	r18, 0x04	; 4
     91c:	fc 01       	movw	r30, r24
     91e:	20 83       	st	Z, r18
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e8       	ldi	r26, 0x80	; 128
     926:	bf e3       	ldi	r27, 0x3F	; 63
     928:	8d 83       	std	Y+5, r24	; 0x05
     92a:	9e 83       	std	Y+6, r25	; 0x06
     92c:	af 83       	std	Y+7, r26	; 0x07
     92e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	4a e7       	ldi	r20, 0x7A	; 122
     936:	53 e4       	ldi	r21, 0x43	; 67
     938:	6d 81       	ldd	r22, Y+5	; 0x05
     93a:	7e 81       	ldd	r23, Y+6	; 0x06
     93c:	8f 81       	ldd	r24, Y+7	; 0x07
     93e:	98 85       	ldd	r25, Y+8	; 0x08
     940:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     944:	dc 01       	movw	r26, r24
     946:	cb 01       	movw	r24, r22
     948:	8d a3       	std	Y+37, r24	; 0x25
     94a:	9e a3       	std	Y+38, r25	; 0x26
     94c:	af a3       	std	Y+39, r26	; 0x27
     94e:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e8       	ldi	r20, 0x80	; 128
     956:	5f e3       	ldi	r21, 0x3F	; 63
     958:	6d a1       	ldd	r22, Y+37	; 0x25
     95a:	7e a1       	ldd	r23, Y+38	; 0x26
     95c:	8f a1       	ldd	r24, Y+39	; 0x27
     95e:	98 a5       	ldd	r25, Y+40	; 0x28
     960:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     964:	88 23       	and	r24, r24
     966:	2c f4       	brge	.+10     	; 0x972 <LCD_displayCharacter+0x182>
		__ticks = 1;
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	9a a7       	std	Y+42, r25	; 0x2a
     96e:	89 a7       	std	Y+41, r24	; 0x29
     970:	3f c0       	rjmp	.+126    	; 0x9f0 <LCD_displayCharacter+0x200>
	else if (__tmp > 65535)
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	3f ef       	ldi	r19, 0xFF	; 255
     976:	4f e7       	ldi	r20, 0x7F	; 127
     978:	57 e4       	ldi	r21, 0x47	; 71
     97a:	6d a1       	ldd	r22, Y+37	; 0x25
     97c:	7e a1       	ldd	r23, Y+38	; 0x26
     97e:	8f a1       	ldd	r24, Y+39	; 0x27
     980:	98 a5       	ldd	r25, Y+40	; 0x28
     982:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__gesf2>
     986:	18 16       	cp	r1, r24
     988:	4c f5       	brge	.+82     	; 0x9dc <LCD_displayCharacter+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e2       	ldi	r20, 0x20	; 32
     990:	51 e4       	ldi	r21, 0x41	; 65
     992:	6d 81       	ldd	r22, Y+5	; 0x05
     994:	7e 81       	ldd	r23, Y+6	; 0x06
     996:	8f 81       	ldd	r24, Y+7	; 0x07
     998:	98 85       	ldd	r25, Y+8	; 0x08
     99a:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	bc 01       	movw	r22, r24
     9a4:	cd 01       	movw	r24, r26
     9a6:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	9a a7       	std	Y+42, r25	; 0x2a
     9b0:	89 a7       	std	Y+41, r24	; 0x29
     9b2:	0f c0       	rjmp	.+30     	; 0x9d2 <LCD_displayCharacter+0x1e2>
     9b4:	89 e1       	ldi	r24, 0x19	; 25
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	9c a7       	std	Y+44, r25	; 0x2c
     9ba:	8b a7       	std	Y+43, r24	; 0x2b
     9bc:	8b a5       	ldd	r24, Y+43	; 0x2b
     9be:	9c a5       	ldd	r25, Y+44	; 0x2c
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <LCD_displayCharacter+0x1d0>
     9c4:	9c a7       	std	Y+44, r25	; 0x2c
     9c6:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c8:	89 a5       	ldd	r24, Y+41	; 0x29
     9ca:	9a a5       	ldd	r25, Y+42	; 0x2a
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	9a a7       	std	Y+42, r25	; 0x2a
     9d0:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9d2:	89 a5       	ldd	r24, Y+41	; 0x29
     9d4:	9a a5       	ldd	r25, Y+42	; 0x2a
     9d6:	89 2b       	or	r24, r25
     9d8:	69 f7       	brne	.-38     	; 0x9b4 <LCD_displayCharacter+0x1c4>
     9da:	14 c0       	rjmp	.+40     	; 0xa04 <LCD_displayCharacter+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9dc:	6d a1       	ldd	r22, Y+37	; 0x25
     9de:	7e a1       	ldd	r23, Y+38	; 0x26
     9e0:	8f a1       	ldd	r24, Y+39	; 0x27
     9e2:	98 a5       	ldd	r25, Y+40	; 0x28
     9e4:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     9e8:	dc 01       	movw	r26, r24
     9ea:	cb 01       	movw	r24, r22
     9ec:	9a a7       	std	Y+42, r25	; 0x2a
     9ee:	89 a7       	std	Y+41, r24	; 0x29
     9f0:	89 a5       	ldd	r24, Y+41	; 0x29
     9f2:	9a a5       	ldd	r25, Y+42	; 0x2a
     9f4:	9e a7       	std	Y+46, r25	; 0x2e
     9f6:	8d a7       	std	Y+45, r24	; 0x2d
     9f8:	8d a5       	ldd	r24, Y+45	; 0x2d
     9fa:	9e a5       	ldd	r25, Y+46	; 0x2e
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	f1 f7       	brne	.-4      	; 0x9fc <LCD_displayCharacter+0x20c>
     a00:	9e a7       	std	Y+46, r25	; 0x2e
     a02:	8d a7       	std	Y+45, r24	; 0x2d
	PUT_UPPER_IN_UPPER(LCD_DATA_OUT , a_data);
	#else
	PUT_UPPER_IN_LOWER(LCD_DATA_OUT , a_data);
	#endif
	#else
	LCD_DATA_OUT = a_data;			/*out the command variable*/
     a04:	88 e3       	ldi	r24, 0x38	; 56
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	29 ad       	ldd	r18, Y+57	; 0x39
     a0a:	fc 01       	movw	r30, r24
     a0c:	20 83       	st	Z, r18
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	a0 e8       	ldi	r26, 0x80	; 128
     a14:	bf e3       	ldi	r27, 0x3F	; 63
     a16:	89 87       	std	Y+9, r24	; 0x09
     a18:	9a 87       	std	Y+10, r25	; 0x0a
     a1a:	ab 87       	std	Y+11, r26	; 0x0b
     a1c:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	4a e7       	ldi	r20, 0x7A	; 122
     a24:	53 e4       	ldi	r21, 0x43	; 67
     a26:	69 85       	ldd	r22, Y+9	; 0x09
     a28:	7a 85       	ldd	r23, Y+10	; 0x0a
     a2a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a2c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a2e:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     a32:	dc 01       	movw	r26, r24
     a34:	cb 01       	movw	r24, r22
     a36:	8b 8f       	std	Y+27, r24	; 0x1b
     a38:	9c 8f       	std	Y+28, r25	; 0x1c
     a3a:	ad 8f       	std	Y+29, r26	; 0x1d
     a3c:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	40 e8       	ldi	r20, 0x80	; 128
     a44:	5f e3       	ldi	r21, 0x3F	; 63
     a46:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a48:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a4e:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     a52:	88 23       	and	r24, r24
     a54:	2c f4       	brge	.+10     	; 0xa60 <LCD_displayCharacter+0x270>
		__ticks = 1;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	98 a3       	std	Y+32, r25	; 0x20
     a5c:	8f 8f       	std	Y+31, r24	; 0x1f
     a5e:	3f c0       	rjmp	.+126    	; 0xade <LCD_displayCharacter+0x2ee>
	else if (__tmp > 65535)
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	3f ef       	ldi	r19, 0xFF	; 255
     a64:	4f e7       	ldi	r20, 0x7F	; 127
     a66:	57 e4       	ldi	r21, 0x47	; 71
     a68:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a6a:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a70:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__gesf2>
     a74:	18 16       	cp	r1, r24
     a76:	4c f5       	brge	.+82     	; 0xaca <LCD_displayCharacter+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 e2       	ldi	r20, 0x20	; 32
     a7e:	51 e4       	ldi	r21, 0x41	; 65
     a80:	69 85       	ldd	r22, Y+9	; 0x09
     a82:	7a 85       	ldd	r23, Y+10	; 0x0a
     a84:	8b 85       	ldd	r24, Y+11	; 0x0b
     a86:	9c 85       	ldd	r25, Y+12	; 0x0c
     a88:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	bc 01       	movw	r22, r24
     a92:	cd 01       	movw	r24, r26
     a94:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     a98:	dc 01       	movw	r26, r24
     a9a:	cb 01       	movw	r24, r22
     a9c:	98 a3       	std	Y+32, r25	; 0x20
     a9e:	8f 8f       	std	Y+31, r24	; 0x1f
     aa0:	0f c0       	rjmp	.+30     	; 0xac0 <LCD_displayCharacter+0x2d0>
     aa2:	89 e1       	ldi	r24, 0x19	; 25
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	9a a3       	std	Y+34, r25	; 0x22
     aa8:	89 a3       	std	Y+33, r24	; 0x21
     aaa:	89 a1       	ldd	r24, Y+33	; 0x21
     aac:	9a a1       	ldd	r25, Y+34	; 0x22
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	f1 f7       	brne	.-4      	; 0xaae <LCD_displayCharacter+0x2be>
     ab2:	9a a3       	std	Y+34, r25	; 0x22
     ab4:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ab6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ab8:	98 a1       	ldd	r25, Y+32	; 0x20
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	98 a3       	std	Y+32, r25	; 0x20
     abe:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ac0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ac2:	98 a1       	ldd	r25, Y+32	; 0x20
     ac4:	89 2b       	or	r24, r25
     ac6:	69 f7       	brne	.-38     	; 0xaa2 <LCD_displayCharacter+0x2b2>
     ac8:	14 c0       	rjmp	.+40     	; 0xaf2 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aca:	6b 8d       	ldd	r22, Y+27	; 0x1b
     acc:	7c 8d       	ldd	r23, Y+28	; 0x1c
     ace:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ad0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ad2:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     ad6:	dc 01       	movw	r26, r24
     ad8:	cb 01       	movw	r24, r22
     ada:	98 a3       	std	Y+32, r25	; 0x20
     adc:	8f 8f       	std	Y+31, r24	; 0x1f
     ade:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ae0:	98 a1       	ldd	r25, Y+32	; 0x20
     ae2:	9c a3       	std	Y+36, r25	; 0x24
     ae4:	8b a3       	std	Y+35, r24	; 0x23
     ae6:	8b a1       	ldd	r24, Y+35	; 0x23
     ae8:	9c a1       	ldd	r25, Y+36	; 0x24
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	f1 f7       	brne	.-4      	; 0xaea <LCD_displayCharacter+0x2fa>
     aee:	9c a3       	std	Y+36, r25	; 0x24
     af0:	8b a3       	std	Y+35, r24	; 0x23
	#endif
	_delay_ms(1);					/*for write timing diagram*/
	CLEAR_BIT(LCD_CTRL_OUT , E);	/*for write timing diagram*/
     af2:	85 e3       	ldi	r24, 0x35	; 53
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	25 e3       	ldi	r18, 0x35	; 53
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	f9 01       	movw	r30, r18
     afc:	20 81       	ld	r18, Z
     afe:	2b 7f       	andi	r18, 0xFB	; 251
     b00:	fc 01       	movw	r30, r24
     b02:	20 83       	st	Z, r18
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	a0 e8       	ldi	r26, 0x80	; 128
     b0a:	bf e3       	ldi	r27, 0x3F	; 63
     b0c:	8d 87       	std	Y+13, r24	; 0x0d
     b0e:	9e 87       	std	Y+14, r25	; 0x0e
     b10:	af 87       	std	Y+15, r26	; 0x0f
     b12:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	4a e7       	ldi	r20, 0x7A	; 122
     b1a:	53 e4       	ldi	r21, 0x43	; 67
     b1c:	6d 85       	ldd	r22, Y+13	; 0x0d
     b1e:	7e 85       	ldd	r23, Y+14	; 0x0e
     b20:	8f 85       	ldd	r24, Y+15	; 0x0f
     b22:	98 89       	ldd	r25, Y+16	; 0x10
     b24:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     b28:	dc 01       	movw	r26, r24
     b2a:	cb 01       	movw	r24, r22
     b2c:	89 8b       	std	Y+17, r24	; 0x11
     b2e:	9a 8b       	std	Y+18, r25	; 0x12
     b30:	ab 8b       	std	Y+19, r26	; 0x13
     b32:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e8       	ldi	r20, 0x80	; 128
     b3a:	5f e3       	ldi	r21, 0x3F	; 63
     b3c:	69 89       	ldd	r22, Y+17	; 0x11
     b3e:	7a 89       	ldd	r23, Y+18	; 0x12
     b40:	8b 89       	ldd	r24, Y+19	; 0x13
     b42:	9c 89       	ldd	r25, Y+20	; 0x14
     b44:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     b48:	88 23       	and	r24, r24
     b4a:	2c f4       	brge	.+10     	; 0xb56 <LCD_displayCharacter+0x366>
		__ticks = 1;
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	9e 8b       	std	Y+22, r25	; 0x16
     b52:	8d 8b       	std	Y+21, r24	; 0x15
     b54:	3f c0       	rjmp	.+126    	; 0xbd4 <LCD_displayCharacter+0x3e4>
	else if (__tmp > 65535)
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	3f ef       	ldi	r19, 0xFF	; 255
     b5a:	4f e7       	ldi	r20, 0x7F	; 127
     b5c:	57 e4       	ldi	r21, 0x47	; 71
     b5e:	69 89       	ldd	r22, Y+17	; 0x11
     b60:	7a 89       	ldd	r23, Y+18	; 0x12
     b62:	8b 89       	ldd	r24, Y+19	; 0x13
     b64:	9c 89       	ldd	r25, Y+20	; 0x14
     b66:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__gesf2>
     b6a:	18 16       	cp	r1, r24
     b6c:	4c f5       	brge	.+82     	; 0xbc0 <LCD_displayCharacter+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	40 e2       	ldi	r20, 0x20	; 32
     b74:	51 e4       	ldi	r21, 0x41	; 65
     b76:	6d 85       	ldd	r22, Y+13	; 0x0d
     b78:	7e 85       	ldd	r23, Y+14	; 0x0e
     b7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b7c:	98 89       	ldd	r25, Y+16	; 0x10
     b7e:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	bc 01       	movw	r22, r24
     b88:	cd 01       	movw	r24, r26
     b8a:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	9e 8b       	std	Y+22, r25	; 0x16
     b94:	8d 8b       	std	Y+21, r24	; 0x15
     b96:	0f c0       	rjmp	.+30     	; 0xbb6 <LCD_displayCharacter+0x3c6>
     b98:	89 e1       	ldi	r24, 0x19	; 25
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	98 8f       	std	Y+24, r25	; 0x18
     b9e:	8f 8b       	std	Y+23, r24	; 0x17
     ba0:	8f 89       	ldd	r24, Y+23	; 0x17
     ba2:	98 8d       	ldd	r25, Y+24	; 0x18
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	f1 f7       	brne	.-4      	; 0xba4 <LCD_displayCharacter+0x3b4>
     ba8:	98 8f       	std	Y+24, r25	; 0x18
     baa:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bac:	8d 89       	ldd	r24, Y+21	; 0x15
     bae:	9e 89       	ldd	r25, Y+22	; 0x16
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	9e 8b       	std	Y+22, r25	; 0x16
     bb4:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bb6:	8d 89       	ldd	r24, Y+21	; 0x15
     bb8:	9e 89       	ldd	r25, Y+22	; 0x16
     bba:	89 2b       	or	r24, r25
     bbc:	69 f7       	brne	.-38     	; 0xb98 <LCD_displayCharacter+0x3a8>
	_delay_ms(1);					/*for write timing diagram*/
}
     bbe:	14 c0       	rjmp	.+40     	; 0xbe8 <LCD_displayCharacter+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bc0:	69 89       	ldd	r22, Y+17	; 0x11
     bc2:	7a 89       	ldd	r23, Y+18	; 0x12
     bc4:	8b 89       	ldd	r24, Y+19	; 0x13
     bc6:	9c 89       	ldd	r25, Y+20	; 0x14
     bc8:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     bcc:	dc 01       	movw	r26, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	9e 8b       	std	Y+22, r25	; 0x16
     bd2:	8d 8b       	std	Y+21, r24	; 0x15
     bd4:	8d 89       	ldd	r24, Y+21	; 0x15
     bd6:	9e 89       	ldd	r25, Y+22	; 0x16
     bd8:	9a 8f       	std	Y+26, r25	; 0x1a
     bda:	89 8f       	std	Y+25, r24	; 0x19
     bdc:	89 8d       	ldd	r24, Y+25	; 0x19
     bde:	9a 8d       	ldd	r25, Y+26	; 0x1a
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <LCD_displayCharacter+0x3f0>
     be4:	9a 8f       	std	Y+26, r25	; 0x1a
     be6:	89 8f       	std	Y+25, r24	; 0x19
     be8:	00 00       	nop
     bea:	e9 96       	adiw	r28, 0x39	; 57
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <LCD_displayString>:

void LCD_displayString(uint8 * str)
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	00 d0       	rcall	.+0      	; 0xc02 <LCD_displayString+0x6>
     c02:	1f 92       	push	r1
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	9b 83       	std	Y+3, r25	; 0x03
     c0a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
     c0c:	19 82       	std	Y+1, r1	; 0x01
	while(str[count] != NULL)
     c0e:	0e c0       	rjmp	.+28     	; 0xc2c <LCD_displayString+0x30>
	{
		LCD_displayCharacter(str[count]);
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	2a 81       	ldd	r18, Y+2	; 0x02
     c18:	3b 81       	ldd	r19, Y+3	; 0x03
     c1a:	82 0f       	add	r24, r18
     c1c:	93 1f       	adc	r25, r19
     c1e:	fc 01       	movw	r30, r24
     c20:	80 81       	ld	r24, Z
     c22:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_displayCharacter>
		count++;
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(uint8 * str)
{
	uint8 count = 0;
	while(str[count] != NULL)
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	88 2f       	mov	r24, r24
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	2a 81       	ldd	r18, Y+2	; 0x02
     c34:	3b 81       	ldd	r19, Y+3	; 0x03
     c36:	82 0f       	add	r24, r18
     c38:	93 1f       	adc	r25, r19
     c3a:	fc 01       	movw	r30, r24
     c3c:	80 81       	ld	r24, Z
     c3e:	88 2f       	mov	r24, r24
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	89 2b       	or	r24, r25
     c44:	29 f7       	brne	.-54     	; 0xc10 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[count]);
		count++;
	}
}
     c46:	00 00       	nop
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <LCD_goToColRow>:

void LCD_goToColRow(uint8 row , uint8 col)
{
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	00 d0       	rcall	.+0      	; 0xc5a <LCD_goToColRow+0x6>
     c5a:	1f 92       	push	r1
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	8a 83       	std	Y+2, r24	; 0x02
     c62:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	88 2f       	mov	r24, r24
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	91 05       	cpc	r25, r1
     c6e:	79 f0       	breq	.+30     	; 0xc8e <LCD_goToColRow+0x3a>
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	91 05       	cpc	r25, r1
     c74:	1c f4       	brge	.+6      	; 0xc7c <LCD_goToColRow+0x28>
     c76:	89 2b       	or	r24, r25
     c78:	39 f0       	breq	.+14     	; 0xc88 <LCD_goToColRow+0x34>
     c7a:	15 c0       	rjmp	.+42     	; 0xca6 <LCD_goToColRow+0x52>
     c7c:	82 30       	cpi	r24, 0x02	; 2
     c7e:	91 05       	cpc	r25, r1
     c80:	51 f0       	breq	.+20     	; 0xc96 <LCD_goToColRow+0x42>
     c82:	03 97       	sbiw	r24, 0x03	; 3
     c84:	61 f0       	breq	.+24     	; 0xc9e <LCD_goToColRow+0x4a>
     c86:	0f c0       	rjmp	.+30     	; 0xca6 <LCD_goToColRow+0x52>
	{
	case 0 :
		address = col;
     c88:	8b 81       	ldd	r24, Y+3	; 0x03
     c8a:	89 83       	std	Y+1, r24	; 0x01
		break;
     c8c:	0c c0       	rjmp	.+24     	; 0xca6 <LCD_goToColRow+0x52>
	case 1 :
		address = 0x40 + col;
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	80 5c       	subi	r24, 0xC0	; 192
     c92:	89 83       	std	Y+1, r24	; 0x01
		break;
     c94:	08 c0       	rjmp	.+16     	; 0xca6 <LCD_goToColRow+0x52>
	case 2 :
		address = 0x10 + col;
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	80 5f       	subi	r24, 0xF0	; 240
     c9a:	89 83       	std	Y+1, r24	; 0x01
		break;
     c9c:	04 c0       	rjmp	.+8      	; 0xca6 <LCD_goToColRow+0x52>
	case 3 :
		address = 0x50 + col;
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	80 5b       	subi	r24, 0xB0	; 176
     ca2:	89 83       	std	Y+1, r24	; 0x01
		break;
     ca4:	00 00       	nop
	}
	LCD_sendCommand(address | 0x80);
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	80 68       	ori	r24, 0x80	; 128
     caa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_sendCommand>
}
     cae:	00 00       	nop
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <LCD_displayInt>:
void LCD_displayInt(int a_number)
{
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	62 97       	sbiw	r28, 0x12	; 18
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	9a 8b       	std	Y+18, r25	; 0x12
     cd2:	89 8b       	std	Y+17, r24	; 0x11
	char a_ascii[16];
	itoa(a_number , a_ascii , 10);
     cd4:	89 89       	ldd	r24, Y+17	; 0x11
     cd6:	9a 89       	ldd	r25, Y+18	; 0x12
     cd8:	4a e0       	ldi	r20, 0x0A	; 10
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	9e 01       	movw	r18, r28
     cde:	2f 5f       	subi	r18, 0xFF	; 255
     ce0:	3f 4f       	sbci	r19, 0xFF	; 255
     ce2:	b9 01       	movw	r22, r18
     ce4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <itoa>
	LCD_displayString(a_ascii);
     ce8:	ce 01       	movw	r24, r28
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_displayString>
}
     cf0:	00 00       	nop
     cf2:	62 96       	adiw	r28, 0x12	; 18
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <LCD_displayOnColRow>:

void LCD_displayOnColRow(uint8 row , uint8 col , const uint8 * str)
{
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	00 d0       	rcall	.+0      	; 0xd0a <LCD_displayOnColRow+0x6>
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <LCD_displayOnColRow+0x8>
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	89 83       	std	Y+1, r24	; 0x01
     d12:	6a 83       	std	Y+2, r22	; 0x02
     d14:	5c 83       	std	Y+4, r21	; 0x04
     d16:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToColRow(row , col);
     d18:	6a 81       	ldd	r22, Y+2	; 0x02
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	0e 94 2a 06 	call	0xc54	; 0xc54 <LCD_goToColRow>
	LCD_displayString(str);
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	9c 81       	ldd	r25, Y+4	; 0x04
     d24:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_displayString>
}
     d28:	00 00       	nop
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN);
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_sendCommand>
}
     d46:	00 00       	nop
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <THERMAL_conversion>:
 */

#include"thermal_sensor.h"
volatile double Temp;
void THERMAL_conversion(void)
{
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
	Temp =((current_reading * 2.56)/1024)*100;
     d56:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <current_reading>
     d5a:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <current_reading+0x1>
     d5e:	cc 01       	movw	r24, r24
     d60:	a0 e0       	ldi	r26, 0x00	; 0
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	bc 01       	movw	r22, r24
     d66:	cd 01       	movw	r24, r26
     d68:	0e 94 b8 08 	call	0x1170	; 0x1170 <__floatunsisf>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	2a e0       	ldi	r18, 0x0A	; 10
     d72:	37 ed       	ldi	r19, 0xD7	; 215
     d74:	43 e2       	ldi	r20, 0x23	; 35
     d76:	50 e4       	ldi	r21, 0x40	; 64
     d78:	bc 01       	movw	r22, r24
     d7a:	cd 01       	movw	r24, r26
     d7c:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e8       	ldi	r20, 0x80	; 128
     d8a:	54 e4       	ldi	r21, 0x44	; 68
     d8c:	bc 01       	movw	r22, r24
     d8e:	cd 01       	movw	r24, r26
     d90:	0e 94 17 08 	call	0x102e	; 0x102e <__divsf3>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	48 ec       	ldi	r20, 0xC8	; 200
     d9e:	52 e4       	ldi	r21, 0x42	; 66
     da0:	bc 01       	movw	r22, r24
     da2:	cd 01       	movw	r24, r26
     da4:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <Temp>
     db0:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <Temp+0x1>
     db4:	a0 93 7f 00 	sts	0x007F, r26	; 0x80007f <Temp+0x2>
     db8:	b0 93 80 00 	sts	0x0080, r27	; 0x800080 <Temp+0x3>
}
     dbc:	00 00       	nop
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	08 95       	ret

00000dc4 <UART_init>:
/*********************************************************************************
 * 								Function Definitions							 *
 *********************************************************************************/

void UART_init(const UART_ConfigType * a_ptr)
{
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	00 d0       	rcall	.+0      	; 0xdca <UART_init+0x6>
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	9a 83       	std	Y+2, r25	; 0x02
     dd0:	89 83       	std	Y+1, r24	; 0x01
	UCSRA = (a_ptr->Parity_enable <<PE) | (a_ptr->Speed << U2X);
     dd2:	8b e2       	ldi	r24, 0x2B	; 43
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	29 81       	ldd	r18, Y+1	; 0x01
     dd8:	3a 81       	ldd	r19, Y+2	; 0x02
     dda:	f9 01       	movw	r30, r18
     ddc:	20 81       	ld	r18, Z
     dde:	22 2f       	mov	r18, r18
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	22 0f       	add	r18, r18
     de4:	33 1f       	adc	r19, r19
     de6:	22 0f       	add	r18, r18
     de8:	33 1f       	adc	r19, r19
     dea:	42 2f       	mov	r20, r18
     dec:	29 81       	ldd	r18, Y+1	; 0x01
     dee:	3a 81       	ldd	r19, Y+2	; 0x02
     df0:	f9 01       	movw	r30, r18
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	22 2f       	mov	r18, r18
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	22 0f       	add	r18, r18
     dfa:	33 1f       	adc	r19, r19
     dfc:	24 2b       	or	r18, r20
     dfe:	fc 01       	movw	r30, r24
     e00:	20 83       	st	Z, r18

	#endif

	#ifndef RECEIVE_INTERRUPT

	CLEAR_BIT(UCSRB , RXCIE);
     e02:	8a e2       	ldi	r24, 0x2A	; 42
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	2a e2       	ldi	r18, 0x2A	; 42
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	f9 01       	movw	r30, r18
     e0c:	20 81       	ld	r18, Z
     e0e:	2f 77       	andi	r18, 0x7F	; 127
     e10:	fc 01       	movw	r30, r24
     e12:	20 83       	st	Z, r18

	#endif

	UCSRC = (a_ptr->Char_Size << UCSZ0) | (a_ptr->Parity_type << UPM0) |
     e14:	80 e4       	ldi	r24, 0x40	; 64
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	29 81       	ldd	r18, Y+1	; 0x01
     e1a:	3a 81       	ldd	r19, Y+2	; 0x02
     e1c:	f9 01       	movw	r30, r18
     e1e:	23 81       	ldd	r18, Z+3	; 0x03
     e20:	22 2f       	mov	r18, r18
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	22 0f       	add	r18, r18
     e26:	33 1f       	adc	r19, r19
     e28:	42 2f       	mov	r20, r18
     e2a:	29 81       	ldd	r18, Y+1	; 0x01
     e2c:	3a 81       	ldd	r19, Y+2	; 0x02
     e2e:	f9 01       	movw	r30, r18
     e30:	21 81       	ldd	r18, Z+1	; 0x01
     e32:	22 2f       	mov	r18, r18
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	22 95       	swap	r18
     e38:	32 95       	swap	r19
     e3a:	30 7f       	andi	r19, 0xF0	; 240
     e3c:	32 27       	eor	r19, r18
     e3e:	20 7f       	andi	r18, 0xF0	; 240
     e40:	32 27       	eor	r19, r18
     e42:	24 2b       	or	r18, r20
     e44:	42 2f       	mov	r20, r18
     e46:	40 68       	ori	r20, 0x80	; 128
			(1<<URSEL) | (a_ptr->type << UMSEL) | (a_ptr->Stop_bit << USBS);
     e48:	29 81       	ldd	r18, Y+1	; 0x01
     e4a:	3a 81       	ldd	r19, Y+2	; 0x02
     e4c:	f9 01       	movw	r30, r18
     e4e:	25 81       	ldd	r18, Z+5	; 0x05
     e50:	22 2f       	mov	r18, r18
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	00 24       	eor	r0, r0
     e56:	36 95       	lsr	r19
     e58:	27 95       	ror	r18
     e5a:	07 94       	ror	r0
     e5c:	36 95       	lsr	r19
     e5e:	27 95       	ror	r18
     e60:	07 94       	ror	r0
     e62:	32 2f       	mov	r19, r18
     e64:	20 2d       	mov	r18, r0

	CLEAR_BIT(UCSRB , RXCIE);

	#endif

	UCSRC = (a_ptr->Char_Size << UCSZ0) | (a_ptr->Parity_type << UPM0) |
     e66:	42 2b       	or	r20, r18
			(1<<URSEL) | (a_ptr->type << UMSEL) | (a_ptr->Stop_bit << USBS);
     e68:	29 81       	ldd	r18, Y+1	; 0x01
     e6a:	3a 81       	ldd	r19, Y+2	; 0x02
     e6c:	f9 01       	movw	r30, r18
     e6e:	22 81       	ldd	r18, Z+2	; 0x02
     e70:	22 2f       	mov	r18, r18
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	22 0f       	add	r18, r18
     e76:	33 1f       	adc	r19, r19
     e78:	22 0f       	add	r18, r18
     e7a:	33 1f       	adc	r19, r19
     e7c:	22 0f       	add	r18, r18
     e7e:	33 1f       	adc	r19, r19

	CLEAR_BIT(UCSRB , RXCIE);

	#endif

	UCSRC = (a_ptr->Char_Size << UCSZ0) | (a_ptr->Parity_type << UPM0) |
     e80:	24 2b       	or	r18, r20
     e82:	fc 01       	movw	r30, r24
     e84:	20 83       	st	Z, r18
			(1<<URSEL) | (a_ptr->type << UMSEL) | (a_ptr->Stop_bit << USBS);

	UBRRH = BAUD_PRESCALE >> 8;
     e86:	80 e4       	ldi	r24, 0x40	; 64
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	fc 01       	movw	r30, r24
     e8c:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
     e8e:	89 e2       	ldi	r24, 0x29	; 41
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	2c e0       	ldi	r18, 0x0C	; 12
     e94:	fc 01       	movw	r30, r24
     e96:	20 83       	st	Z, r18

	SET_BIT(UCSRB , TXEN);
     e98:	8a e2       	ldi	r24, 0x2A	; 42
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	2a e2       	ldi	r18, 0x2A	; 42
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	f9 01       	movw	r30, r18
     ea2:	20 81       	ld	r18, Z
     ea4:	28 60       	ori	r18, 0x08	; 8
     ea6:	fc 01       	movw	r30, r24
     ea8:	20 83       	st	Z, r18

	SET_BIT(UCSRB , RXEN);
     eaa:	8a e2       	ldi	r24, 0x2A	; 42
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	2a e2       	ldi	r18, 0x2A	; 42
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	f9 01       	movw	r30, r18
     eb4:	20 81       	ld	r18, Z
     eb6:	20 61       	ori	r18, 0x10	; 16
     eb8:	fc 01       	movw	r30, r24
     eba:	20 83       	st	Z, r18

}
     ebc:	00 00       	nop
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <UART_sendByte>:

void UART_sendByte(uint8 data)
{
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	1f 92       	push	r1
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA , UDRE));
     ed4:	00 00       	nop
     ed6:	8b e2       	ldi	r24, 0x2B	; 43
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	fc 01       	movw	r30, r24
     edc:	80 81       	ld	r24, Z
     ede:	88 2f       	mov	r24, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	80 72       	andi	r24, 0x20	; 32
     ee4:	99 27       	eor	r25, r25
     ee6:	89 2b       	or	r24, r25
     ee8:	b1 f3       	breq	.-20     	; 0xed6 <UART_sendByte+0xe>

	UDR = data;
     eea:	8c e2       	ldi	r24, 0x2C	; 44
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	29 81       	ldd	r18, Y+1	; 0x01
     ef0:	fc 01       	movw	r30, r24
     ef2:	20 83       	st	Z, r18
}
     ef4:	00 00       	nop
     ef6:	0f 90       	pop	r0
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	08 95       	ret

00000efe <UART_receiveByte>:
#ifndef RECEIVE_INTERRUPT
uint8 UART_receiveByte(void)
{
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA ,RXC));
     f06:	00 00       	nop
     f08:	8b e2       	ldi	r24, 0x2B	; 43
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	fc 01       	movw	r30, r24
     f0e:	80 81       	ld	r24, Z
     f10:	88 23       	and	r24, r24
     f12:	d4 f7       	brge	.-12     	; 0xf08 <UART_receiveByte+0xa>

	//g_UART_CurrentReading = UDR;

	return UDR;
     f14:	8c e2       	ldi	r24, 0x2C	; 44
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	fc 01       	movw	r30, r24
     f1a:	80 81       	ld	r24, Z
}
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	08 95       	ret

00000f22 <UART_setReceiveCallBack>:
#endif
void UART_setReceiveCallBack(void (*a_ptr)(void))
{
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	00 d0       	rcall	.+0      	; 0xf28 <UART_setReceiveCallBack+0x6>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
	g_UART_receiveByteFunc_ptr = a_ptr;
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <g_UART_receiveByteFunc_ptr+0x1>
     f38:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <g_UART_receiveByteFunc_ptr>
}
     f3c:	00 00       	nop
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <UART_sendString>:
void UART_sendString(const uint8 * str)
{
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <UART_sendString+0x6>
     f4e:	1f 92       	push	r1
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	9b 83       	std	Y+3, r25	; 0x03
     f56:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
     f58:	19 82       	std	Y+1, r1	; 0x01

	while(str[count] != '\0')
     f5a:	0e c0       	rjmp	.+28     	; 0xf78 <UART_sendString+0x30>
	{
		UART_sendByte(str[count]);
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	2a 81       	ldd	r18, Y+2	; 0x02
     f64:	3b 81       	ldd	r19, Y+3	; 0x03
     f66:	82 0f       	add	r24, r18
     f68:	93 1f       	adc	r25, r19
     f6a:	fc 01       	movw	r30, r24
     f6c:	80 81       	ld	r24, Z
     f6e:	0e 94 64 07 	call	0xec8	; 0xec8 <UART_sendByte>
		count++;
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	89 83       	std	Y+1, r24	; 0x01
}
void UART_sendString(const uint8 * str)
{
	uint8 count = 0;

	while(str[count] != '\0')
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	2a 81       	ldd	r18, Y+2	; 0x02
     f80:	3b 81       	ldd	r19, Y+3	; 0x03
     f82:	82 0f       	add	r24, r18
     f84:	93 1f       	adc	r25, r19
     f86:	fc 01       	movw	r30, r24
     f88:	80 81       	ld	r24, Z
     f8a:	88 23       	and	r24, r24
     f8c:	39 f7       	brne	.-50     	; 0xf5c <UART_sendString+0x14>
	{
		UART_sendByte(str[count]);
		count++;
	}
}
     f8e:	00 00       	nop
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	08 95       	ret

00000f9c <UART_receiveString>:
void UART_receiveString(uint8 * Str)
{
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <UART_receiveString+0xa>
     fa6:	1f 92       	push	r1
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	9b 83       	std	Y+3, r25	; 0x03
     fae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     fb0:	19 82       	std	Y+1, r1	; 0x01
		Str[i] = UART_receiveByte();
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	2a 81       	ldd	r18, Y+2	; 0x02
     fba:	3b 81       	ldd	r19, Y+3	; 0x03
     fbc:	89 01       	movw	r16, r18
     fbe:	08 0f       	add	r16, r24
     fc0:	19 1f       	adc	r17, r25
     fc2:	0e 94 7f 07 	call	0xefe	; 0xefe <UART_receiveByte>
     fc6:	f8 01       	movw	r30, r16
     fc8:	80 83       	st	Z, r24
		while(Str[i] != '#')
     fca:	0f c0       	rjmp	.+30     	; 0xfea <UART_receiveString+0x4e>
		{
			i++;
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = UART_receiveByte();
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	2a 81       	ldd	r18, Y+2	; 0x02
     fda:	3b 81       	ldd	r19, Y+3	; 0x03
     fdc:	89 01       	movw	r16, r18
     fde:	08 0f       	add	r16, r24
     fe0:	19 1f       	adc	r17, r25
     fe2:	0e 94 7f 07 	call	0xefe	; 0xefe <UART_receiveByte>
     fe6:	f8 01       	movw	r30, r16
     fe8:	80 83       	st	Z, r24
}
void UART_receiveString(uint8 * Str)
{
	uint8 i = 0;
		Str[i] = UART_receiveByte();
		while(Str[i] != '#')
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	88 2f       	mov	r24, r24
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	2a 81       	ldd	r18, Y+2	; 0x02
     ff2:	3b 81       	ldd	r19, Y+3	; 0x03
     ff4:	82 0f       	add	r24, r18
     ff6:	93 1f       	adc	r25, r19
     ff8:	fc 01       	movw	r30, r24
     ffa:	80 81       	ld	r24, Z
     ffc:	83 32       	cpi	r24, 0x23	; 35
     ffe:	31 f7       	brne	.-52     	; 0xfcc <UART_receiveString+0x30>
		{
			i++;
			Str[i] = UART_receiveByte();
		}
		Str[i] = '\0';
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	2a 81       	ldd	r18, Y+2	; 0x02
    1008:	3b 81       	ldd	r19, Y+3	; 0x03
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	fc 01       	movw	r30, r24
    1010:	10 82       	st	Z, r1
	 * 		str++;
	 * 	}while(*str != '*');
	 *
	 * 	*str = '\0';
	 ***********************************************************************/
}
    1012:	00 00       	nop
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	08 95       	ret

00001024 <__cmpsf2>:
    1024:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_cmp>
    1028:	08 f4       	brcc	.+2      	; 0x102c <__cmpsf2+0x8>
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	08 95       	ret

0000102e <__divsf3>:
    102e:	0e 94 2b 08 	call	0x1056	; 0x1056 <__divsf3x>
    1032:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_round>
    1036:	0e 94 29 09 	call	0x1252	; 0x1252 <__fp_pscB>
    103a:	58 f0       	brcs	.+22     	; 0x1052 <__divsf3+0x24>
    103c:	0e 94 22 09 	call	0x1244	; 0x1244 <__fp_pscA>
    1040:	40 f0       	brcs	.+16     	; 0x1052 <__divsf3+0x24>
    1042:	29 f4       	brne	.+10     	; 0x104e <__divsf3+0x20>
    1044:	5f 3f       	cpi	r21, 0xFF	; 255
    1046:	29 f0       	breq	.+10     	; 0x1052 <__divsf3+0x24>
    1048:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_inf>
    104c:	51 11       	cpse	r21, r1
    104e:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_szero>
    1052:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_nan>

00001056 <__divsf3x>:
    1056:	0e 94 41 09 	call	0x1282	; 0x1282 <__fp_split3>
    105a:	68 f3       	brcs	.-38     	; 0x1036 <__divsf3+0x8>

0000105c <__divsf3_pse>:
    105c:	99 23       	and	r25, r25
    105e:	b1 f3       	breq	.-20     	; 0x104c <__divsf3+0x1e>
    1060:	55 23       	and	r21, r21
    1062:	91 f3       	breq	.-28     	; 0x1048 <__divsf3+0x1a>
    1064:	95 1b       	sub	r25, r21
    1066:	55 0b       	sbc	r21, r21
    1068:	bb 27       	eor	r27, r27
    106a:	aa 27       	eor	r26, r26
    106c:	62 17       	cp	r22, r18
    106e:	73 07       	cpc	r23, r19
    1070:	84 07       	cpc	r24, r20
    1072:	38 f0       	brcs	.+14     	; 0x1082 <__divsf3_pse+0x26>
    1074:	9f 5f       	subi	r25, 0xFF	; 255
    1076:	5f 4f       	sbci	r21, 0xFF	; 255
    1078:	22 0f       	add	r18, r18
    107a:	33 1f       	adc	r19, r19
    107c:	44 1f       	adc	r20, r20
    107e:	aa 1f       	adc	r26, r26
    1080:	a9 f3       	breq	.-22     	; 0x106c <__divsf3_pse+0x10>
    1082:	35 d0       	rcall	.+106    	; 0x10ee <__divsf3_pse+0x92>
    1084:	0e 2e       	mov	r0, r30
    1086:	3a f0       	brmi	.+14     	; 0x1096 <__divsf3_pse+0x3a>
    1088:	e0 e8       	ldi	r30, 0x80	; 128
    108a:	32 d0       	rcall	.+100    	; 0x10f0 <__divsf3_pse+0x94>
    108c:	91 50       	subi	r25, 0x01	; 1
    108e:	50 40       	sbci	r21, 0x00	; 0
    1090:	e6 95       	lsr	r30
    1092:	00 1c       	adc	r0, r0
    1094:	ca f7       	brpl	.-14     	; 0x1088 <__divsf3_pse+0x2c>
    1096:	2b d0       	rcall	.+86     	; 0x10ee <__divsf3_pse+0x92>
    1098:	fe 2f       	mov	r31, r30
    109a:	29 d0       	rcall	.+82     	; 0x10ee <__divsf3_pse+0x92>
    109c:	66 0f       	add	r22, r22
    109e:	77 1f       	adc	r23, r23
    10a0:	88 1f       	adc	r24, r24
    10a2:	bb 1f       	adc	r27, r27
    10a4:	26 17       	cp	r18, r22
    10a6:	37 07       	cpc	r19, r23
    10a8:	48 07       	cpc	r20, r24
    10aa:	ab 07       	cpc	r26, r27
    10ac:	b0 e8       	ldi	r27, 0x80	; 128
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <__divsf3_pse+0x56>
    10b0:	bb 0b       	sbc	r27, r27
    10b2:	80 2d       	mov	r24, r0
    10b4:	bf 01       	movw	r22, r30
    10b6:	ff 27       	eor	r31, r31
    10b8:	93 58       	subi	r25, 0x83	; 131
    10ba:	5f 4f       	sbci	r21, 0xFF	; 255
    10bc:	3a f0       	brmi	.+14     	; 0x10cc <__divsf3_pse+0x70>
    10be:	9e 3f       	cpi	r25, 0xFE	; 254
    10c0:	51 05       	cpc	r21, r1
    10c2:	78 f0       	brcs	.+30     	; 0x10e2 <__divsf3_pse+0x86>
    10c4:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_inf>
    10c8:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_szero>
    10cc:	5f 3f       	cpi	r21, 0xFF	; 255
    10ce:	e4 f3       	brlt	.-8      	; 0x10c8 <__divsf3_pse+0x6c>
    10d0:	98 3e       	cpi	r25, 0xE8	; 232
    10d2:	d4 f3       	brlt	.-12     	; 0x10c8 <__divsf3_pse+0x6c>
    10d4:	86 95       	lsr	r24
    10d6:	77 95       	ror	r23
    10d8:	67 95       	ror	r22
    10da:	b7 95       	ror	r27
    10dc:	f7 95       	ror	r31
    10de:	9f 5f       	subi	r25, 0xFF	; 255
    10e0:	c9 f7       	brne	.-14     	; 0x10d4 <__divsf3_pse+0x78>
    10e2:	88 0f       	add	r24, r24
    10e4:	91 1d       	adc	r25, r1
    10e6:	96 95       	lsr	r25
    10e8:	87 95       	ror	r24
    10ea:	97 f9       	bld	r25, 7
    10ec:	08 95       	ret
    10ee:	e1 e0       	ldi	r30, 0x01	; 1
    10f0:	66 0f       	add	r22, r22
    10f2:	77 1f       	adc	r23, r23
    10f4:	88 1f       	adc	r24, r24
    10f6:	bb 1f       	adc	r27, r27
    10f8:	62 17       	cp	r22, r18
    10fa:	73 07       	cpc	r23, r19
    10fc:	84 07       	cpc	r24, r20
    10fe:	ba 07       	cpc	r27, r26
    1100:	20 f0       	brcs	.+8      	; 0x110a <__divsf3_pse+0xae>
    1102:	62 1b       	sub	r22, r18
    1104:	73 0b       	sbc	r23, r19
    1106:	84 0b       	sbc	r24, r20
    1108:	ba 0b       	sbc	r27, r26
    110a:	ee 1f       	adc	r30, r30
    110c:	88 f7       	brcc	.-30     	; 0x10f0 <__divsf3_pse+0x94>
    110e:	e0 95       	com	r30
    1110:	08 95       	ret

00001112 <__fixunssfsi>:
    1112:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_splitA>
    1116:	88 f0       	brcs	.+34     	; 0x113a <__fixunssfsi+0x28>
    1118:	9f 57       	subi	r25, 0x7F	; 127
    111a:	98 f0       	brcs	.+38     	; 0x1142 <__fixunssfsi+0x30>
    111c:	b9 2f       	mov	r27, r25
    111e:	99 27       	eor	r25, r25
    1120:	b7 51       	subi	r27, 0x17	; 23
    1122:	b0 f0       	brcs	.+44     	; 0x1150 <__fixunssfsi+0x3e>
    1124:	e1 f0       	breq	.+56     	; 0x115e <__fixunssfsi+0x4c>
    1126:	66 0f       	add	r22, r22
    1128:	77 1f       	adc	r23, r23
    112a:	88 1f       	adc	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	1a f0       	brmi	.+6      	; 0x1136 <__fixunssfsi+0x24>
    1130:	ba 95       	dec	r27
    1132:	c9 f7       	brne	.-14     	; 0x1126 <__fixunssfsi+0x14>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <__fixunssfsi+0x4c>
    1136:	b1 30       	cpi	r27, 0x01	; 1
    1138:	91 f0       	breq	.+36     	; 0x115e <__fixunssfsi+0x4c>
    113a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__fp_zero>
    113e:	b1 e0       	ldi	r27, 0x01	; 1
    1140:	08 95       	ret
    1142:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__fp_zero>
    1146:	67 2f       	mov	r22, r23
    1148:	78 2f       	mov	r23, r24
    114a:	88 27       	eor	r24, r24
    114c:	b8 5f       	subi	r27, 0xF8	; 248
    114e:	39 f0       	breq	.+14     	; 0x115e <__fixunssfsi+0x4c>
    1150:	b9 3f       	cpi	r27, 0xF9	; 249
    1152:	cc f3       	brlt	.-14     	; 0x1146 <__fixunssfsi+0x34>
    1154:	86 95       	lsr	r24
    1156:	77 95       	ror	r23
    1158:	67 95       	ror	r22
    115a:	b3 95       	inc	r27
    115c:	d9 f7       	brne	.-10     	; 0x1154 <__fixunssfsi+0x42>
    115e:	3e f4       	brtc	.+14     	; 0x116e <__fixunssfsi+0x5c>
    1160:	90 95       	com	r25
    1162:	80 95       	com	r24
    1164:	70 95       	com	r23
    1166:	61 95       	neg	r22
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	8f 4f       	sbci	r24, 0xFF	; 255
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	08 95       	ret

00001170 <__floatunsisf>:
    1170:	e8 94       	clt
    1172:	09 c0       	rjmp	.+18     	; 0x1186 <__floatsisf+0x12>

00001174 <__floatsisf>:
    1174:	97 fb       	bst	r25, 7
    1176:	3e f4       	brtc	.+14     	; 0x1186 <__floatsisf+0x12>
    1178:	90 95       	com	r25
    117a:	80 95       	com	r24
    117c:	70 95       	com	r23
    117e:	61 95       	neg	r22
    1180:	7f 4f       	sbci	r23, 0xFF	; 255
    1182:	8f 4f       	sbci	r24, 0xFF	; 255
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	99 23       	and	r25, r25
    1188:	a9 f0       	breq	.+42     	; 0x11b4 <__floatsisf+0x40>
    118a:	f9 2f       	mov	r31, r25
    118c:	96 e9       	ldi	r25, 0x96	; 150
    118e:	bb 27       	eor	r27, r27
    1190:	93 95       	inc	r25
    1192:	f6 95       	lsr	r31
    1194:	87 95       	ror	r24
    1196:	77 95       	ror	r23
    1198:	67 95       	ror	r22
    119a:	b7 95       	ror	r27
    119c:	f1 11       	cpse	r31, r1
    119e:	f8 cf       	rjmp	.-16     	; 0x1190 <__floatsisf+0x1c>
    11a0:	fa f4       	brpl	.+62     	; 0x11e0 <__floatsisf+0x6c>
    11a2:	bb 0f       	add	r27, r27
    11a4:	11 f4       	brne	.+4      	; 0x11aa <__floatsisf+0x36>
    11a6:	60 ff       	sbrs	r22, 0
    11a8:	1b c0       	rjmp	.+54     	; 0x11e0 <__floatsisf+0x6c>
    11aa:	6f 5f       	subi	r22, 0xFF	; 255
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	8f 4f       	sbci	r24, 0xFF	; 255
    11b0:	9f 4f       	sbci	r25, 0xFF	; 255
    11b2:	16 c0       	rjmp	.+44     	; 0x11e0 <__floatsisf+0x6c>
    11b4:	88 23       	and	r24, r24
    11b6:	11 f0       	breq	.+4      	; 0x11bc <__floatsisf+0x48>
    11b8:	96 e9       	ldi	r25, 0x96	; 150
    11ba:	11 c0       	rjmp	.+34     	; 0x11de <__floatsisf+0x6a>
    11bc:	77 23       	and	r23, r23
    11be:	21 f0       	breq	.+8      	; 0x11c8 <__floatsisf+0x54>
    11c0:	9e e8       	ldi	r25, 0x8E	; 142
    11c2:	87 2f       	mov	r24, r23
    11c4:	76 2f       	mov	r23, r22
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <__floatsisf+0x5e>
    11c8:	66 23       	and	r22, r22
    11ca:	71 f0       	breq	.+28     	; 0x11e8 <__floatsisf+0x74>
    11cc:	96 e8       	ldi	r25, 0x86	; 134
    11ce:	86 2f       	mov	r24, r22
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	2a f0       	brmi	.+10     	; 0x11e0 <__floatsisf+0x6c>
    11d6:	9a 95       	dec	r25
    11d8:	66 0f       	add	r22, r22
    11da:	77 1f       	adc	r23, r23
    11dc:	88 1f       	adc	r24, r24
    11de:	da f7       	brpl	.-10     	; 0x11d6 <__floatsisf+0x62>
    11e0:	88 0f       	add	r24, r24
    11e2:	96 95       	lsr	r25
    11e4:	87 95       	ror	r24
    11e6:	97 f9       	bld	r25, 7
    11e8:	08 95       	ret

000011ea <__fp_cmp>:
    11ea:	99 0f       	add	r25, r25
    11ec:	00 08       	sbc	r0, r0
    11ee:	55 0f       	add	r21, r21
    11f0:	aa 0b       	sbc	r26, r26
    11f2:	e0 e8       	ldi	r30, 0x80	; 128
    11f4:	fe ef       	ldi	r31, 0xFE	; 254
    11f6:	16 16       	cp	r1, r22
    11f8:	17 06       	cpc	r1, r23
    11fa:	e8 07       	cpc	r30, r24
    11fc:	f9 07       	cpc	r31, r25
    11fe:	c0 f0       	brcs	.+48     	; 0x1230 <__fp_cmp+0x46>
    1200:	12 16       	cp	r1, r18
    1202:	13 06       	cpc	r1, r19
    1204:	e4 07       	cpc	r30, r20
    1206:	f5 07       	cpc	r31, r21
    1208:	98 f0       	brcs	.+38     	; 0x1230 <__fp_cmp+0x46>
    120a:	62 1b       	sub	r22, r18
    120c:	73 0b       	sbc	r23, r19
    120e:	84 0b       	sbc	r24, r20
    1210:	95 0b       	sbc	r25, r21
    1212:	39 f4       	brne	.+14     	; 0x1222 <__fp_cmp+0x38>
    1214:	0a 26       	eor	r0, r26
    1216:	61 f0       	breq	.+24     	; 0x1230 <__fp_cmp+0x46>
    1218:	23 2b       	or	r18, r19
    121a:	24 2b       	or	r18, r20
    121c:	25 2b       	or	r18, r21
    121e:	21 f4       	brne	.+8      	; 0x1228 <__fp_cmp+0x3e>
    1220:	08 95       	ret
    1222:	0a 26       	eor	r0, r26
    1224:	09 f4       	brne	.+2      	; 0x1228 <__fp_cmp+0x3e>
    1226:	a1 40       	sbci	r26, 0x01	; 1
    1228:	a6 95       	lsr	r26
    122a:	8f ef       	ldi	r24, 0xFF	; 255
    122c:	81 1d       	adc	r24, r1
    122e:	81 1d       	adc	r24, r1
    1230:	08 95       	ret

00001232 <__fp_inf>:
    1232:	97 f9       	bld	r25, 7
    1234:	9f 67       	ori	r25, 0x7F	; 127
    1236:	80 e8       	ldi	r24, 0x80	; 128
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	08 95       	ret

0000123e <__fp_nan>:
    123e:	9f ef       	ldi	r25, 0xFF	; 255
    1240:	80 ec       	ldi	r24, 0xC0	; 192
    1242:	08 95       	ret

00001244 <__fp_pscA>:
    1244:	00 24       	eor	r0, r0
    1246:	0a 94       	dec	r0
    1248:	16 16       	cp	r1, r22
    124a:	17 06       	cpc	r1, r23
    124c:	18 06       	cpc	r1, r24
    124e:	09 06       	cpc	r0, r25
    1250:	08 95       	ret

00001252 <__fp_pscB>:
    1252:	00 24       	eor	r0, r0
    1254:	0a 94       	dec	r0
    1256:	12 16       	cp	r1, r18
    1258:	13 06       	cpc	r1, r19
    125a:	14 06       	cpc	r1, r20
    125c:	05 06       	cpc	r0, r21
    125e:	08 95       	ret

00001260 <__fp_round>:
    1260:	09 2e       	mov	r0, r25
    1262:	03 94       	inc	r0
    1264:	00 0c       	add	r0, r0
    1266:	11 f4       	brne	.+4      	; 0x126c <__fp_round+0xc>
    1268:	88 23       	and	r24, r24
    126a:	52 f0       	brmi	.+20     	; 0x1280 <__fp_round+0x20>
    126c:	bb 0f       	add	r27, r27
    126e:	40 f4       	brcc	.+16     	; 0x1280 <__fp_round+0x20>
    1270:	bf 2b       	or	r27, r31
    1272:	11 f4       	brne	.+4      	; 0x1278 <__fp_round+0x18>
    1274:	60 ff       	sbrs	r22, 0
    1276:	04 c0       	rjmp	.+8      	; 0x1280 <__fp_round+0x20>
    1278:	6f 5f       	subi	r22, 0xFF	; 255
    127a:	7f 4f       	sbci	r23, 0xFF	; 255
    127c:	8f 4f       	sbci	r24, 0xFF	; 255
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	08 95       	ret

00001282 <__fp_split3>:
    1282:	57 fd       	sbrc	r21, 7
    1284:	90 58       	subi	r25, 0x80	; 128
    1286:	44 0f       	add	r20, r20
    1288:	55 1f       	adc	r21, r21
    128a:	59 f0       	breq	.+22     	; 0x12a2 <__fp_splitA+0x10>
    128c:	5f 3f       	cpi	r21, 0xFF	; 255
    128e:	71 f0       	breq	.+28     	; 0x12ac <__fp_splitA+0x1a>
    1290:	47 95       	ror	r20

00001292 <__fp_splitA>:
    1292:	88 0f       	add	r24, r24
    1294:	97 fb       	bst	r25, 7
    1296:	99 1f       	adc	r25, r25
    1298:	61 f0       	breq	.+24     	; 0x12b2 <__fp_splitA+0x20>
    129a:	9f 3f       	cpi	r25, 0xFF	; 255
    129c:	79 f0       	breq	.+30     	; 0x12bc <__fp_splitA+0x2a>
    129e:	87 95       	ror	r24
    12a0:	08 95       	ret
    12a2:	12 16       	cp	r1, r18
    12a4:	13 06       	cpc	r1, r19
    12a6:	14 06       	cpc	r1, r20
    12a8:	55 1f       	adc	r21, r21
    12aa:	f2 cf       	rjmp	.-28     	; 0x1290 <__fp_split3+0xe>
    12ac:	46 95       	lsr	r20
    12ae:	f1 df       	rcall	.-30     	; 0x1292 <__fp_splitA>
    12b0:	08 c0       	rjmp	.+16     	; 0x12c2 <__fp_splitA+0x30>
    12b2:	16 16       	cp	r1, r22
    12b4:	17 06       	cpc	r1, r23
    12b6:	18 06       	cpc	r1, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	f1 cf       	rjmp	.-30     	; 0x129e <__fp_splitA+0xc>
    12bc:	86 95       	lsr	r24
    12be:	71 05       	cpc	r23, r1
    12c0:	61 05       	cpc	r22, r1
    12c2:	08 94       	sec
    12c4:	08 95       	ret

000012c6 <__fp_zero>:
    12c6:	e8 94       	clt

000012c8 <__fp_szero>:
    12c8:	bb 27       	eor	r27, r27
    12ca:	66 27       	eor	r22, r22
    12cc:	77 27       	eor	r23, r23
    12ce:	cb 01       	movw	r24, r22
    12d0:	97 f9       	bld	r25, 7
    12d2:	08 95       	ret

000012d4 <__gesf2>:
    12d4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_cmp>
    12d8:	08 f4       	brcc	.+2      	; 0x12dc <__gesf2+0x8>
    12da:	8f ef       	ldi	r24, 0xFF	; 255
    12dc:	08 95       	ret

000012de <__mulsf3>:
    12de:	0e 94 82 09 	call	0x1304	; 0x1304 <__mulsf3x>
    12e2:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_round>
    12e6:	0e 94 22 09 	call	0x1244	; 0x1244 <__fp_pscA>
    12ea:	38 f0       	brcs	.+14     	; 0x12fa <__mulsf3+0x1c>
    12ec:	0e 94 29 09 	call	0x1252	; 0x1252 <__fp_pscB>
    12f0:	20 f0       	brcs	.+8      	; 0x12fa <__mulsf3+0x1c>
    12f2:	95 23       	and	r25, r21
    12f4:	11 f0       	breq	.+4      	; 0x12fa <__mulsf3+0x1c>
    12f6:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_inf>
    12fa:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_nan>
    12fe:	11 24       	eor	r1, r1
    1300:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_szero>

00001304 <__mulsf3x>:
    1304:	0e 94 41 09 	call	0x1282	; 0x1282 <__fp_split3>
    1308:	70 f3       	brcs	.-36     	; 0x12e6 <__mulsf3+0x8>

0000130a <__mulsf3_pse>:
    130a:	95 9f       	mul	r25, r21
    130c:	c1 f3       	breq	.-16     	; 0x12fe <__mulsf3+0x20>
    130e:	95 0f       	add	r25, r21
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	55 1f       	adc	r21, r21
    1314:	62 9f       	mul	r22, r18
    1316:	f0 01       	movw	r30, r0
    1318:	72 9f       	mul	r23, r18
    131a:	bb 27       	eor	r27, r27
    131c:	f0 0d       	add	r31, r0
    131e:	b1 1d       	adc	r27, r1
    1320:	63 9f       	mul	r22, r19
    1322:	aa 27       	eor	r26, r26
    1324:	f0 0d       	add	r31, r0
    1326:	b1 1d       	adc	r27, r1
    1328:	aa 1f       	adc	r26, r26
    132a:	64 9f       	mul	r22, r20
    132c:	66 27       	eor	r22, r22
    132e:	b0 0d       	add	r27, r0
    1330:	a1 1d       	adc	r26, r1
    1332:	66 1f       	adc	r22, r22
    1334:	82 9f       	mul	r24, r18
    1336:	22 27       	eor	r18, r18
    1338:	b0 0d       	add	r27, r0
    133a:	a1 1d       	adc	r26, r1
    133c:	62 1f       	adc	r22, r18
    133e:	73 9f       	mul	r23, r19
    1340:	b0 0d       	add	r27, r0
    1342:	a1 1d       	adc	r26, r1
    1344:	62 1f       	adc	r22, r18
    1346:	83 9f       	mul	r24, r19
    1348:	a0 0d       	add	r26, r0
    134a:	61 1d       	adc	r22, r1
    134c:	22 1f       	adc	r18, r18
    134e:	74 9f       	mul	r23, r20
    1350:	33 27       	eor	r19, r19
    1352:	a0 0d       	add	r26, r0
    1354:	61 1d       	adc	r22, r1
    1356:	23 1f       	adc	r18, r19
    1358:	84 9f       	mul	r24, r20
    135a:	60 0d       	add	r22, r0
    135c:	21 1d       	adc	r18, r1
    135e:	82 2f       	mov	r24, r18
    1360:	76 2f       	mov	r23, r22
    1362:	6a 2f       	mov	r22, r26
    1364:	11 24       	eor	r1, r1
    1366:	9f 57       	subi	r25, 0x7F	; 127
    1368:	50 40       	sbci	r21, 0x00	; 0
    136a:	9a f0       	brmi	.+38     	; 0x1392 <__mulsf3_pse+0x88>
    136c:	f1 f0       	breq	.+60     	; 0x13aa <__mulsf3_pse+0xa0>
    136e:	88 23       	and	r24, r24
    1370:	4a f0       	brmi	.+18     	; 0x1384 <__mulsf3_pse+0x7a>
    1372:	ee 0f       	add	r30, r30
    1374:	ff 1f       	adc	r31, r31
    1376:	bb 1f       	adc	r27, r27
    1378:	66 1f       	adc	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	88 1f       	adc	r24, r24
    137e:	91 50       	subi	r25, 0x01	; 1
    1380:	50 40       	sbci	r21, 0x00	; 0
    1382:	a9 f7       	brne	.-22     	; 0x136e <__mulsf3_pse+0x64>
    1384:	9e 3f       	cpi	r25, 0xFE	; 254
    1386:	51 05       	cpc	r21, r1
    1388:	80 f0       	brcs	.+32     	; 0x13aa <__mulsf3_pse+0xa0>
    138a:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__fp_inf>
    138e:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_szero>
    1392:	5f 3f       	cpi	r21, 0xFF	; 255
    1394:	e4 f3       	brlt	.-8      	; 0x138e <__mulsf3_pse+0x84>
    1396:	98 3e       	cpi	r25, 0xE8	; 232
    1398:	d4 f3       	brlt	.-12     	; 0x138e <__mulsf3_pse+0x84>
    139a:	86 95       	lsr	r24
    139c:	77 95       	ror	r23
    139e:	67 95       	ror	r22
    13a0:	b7 95       	ror	r27
    13a2:	f7 95       	ror	r31
    13a4:	e7 95       	ror	r30
    13a6:	9f 5f       	subi	r25, 0xFF	; 255
    13a8:	c1 f7       	brne	.-16     	; 0x139a <__mulsf3_pse+0x90>
    13aa:	fe 2b       	or	r31, r30
    13ac:	88 0f       	add	r24, r24
    13ae:	91 1d       	adc	r25, r1
    13b0:	96 95       	lsr	r25
    13b2:	87 95       	ror	r24
    13b4:	97 f9       	bld	r25, 7
    13b6:	08 95       	ret

000013b8 <itoa>:
    13b8:	45 32       	cpi	r20, 0x25	; 37
    13ba:	51 05       	cpc	r21, r1
    13bc:	20 f4       	brcc	.+8      	; 0x13c6 <itoa+0xe>
    13be:	42 30       	cpi	r20, 0x02	; 2
    13c0:	10 f0       	brcs	.+4      	; 0x13c6 <itoa+0xe>
    13c2:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__itoa_ncheck>
    13c6:	fb 01       	movw	r30, r22
    13c8:	10 82       	st	Z, r1
    13ca:	cb 01       	movw	r24, r22
    13cc:	08 95       	ret

000013ce <__itoa_ncheck>:
    13ce:	bb 27       	eor	r27, r27
    13d0:	4a 30       	cpi	r20, 0x0A	; 10
    13d2:	31 f4       	brne	.+12     	; 0x13e0 <__itoa_ncheck+0x12>
    13d4:	99 23       	and	r25, r25
    13d6:	22 f4       	brpl	.+8      	; 0x13e0 <__itoa_ncheck+0x12>
    13d8:	bd e2       	ldi	r27, 0x2D	; 45
    13da:	90 95       	com	r25
    13dc:	81 95       	neg	r24
    13de:	9f 4f       	sbci	r25, 0xFF	; 255
    13e0:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <__utoa_common>

000013e4 <__utoa_ncheck>:
    13e4:	bb 27       	eor	r27, r27

000013e6 <__utoa_common>:
    13e6:	fb 01       	movw	r30, r22
    13e8:	55 27       	eor	r21, r21
    13ea:	aa 27       	eor	r26, r26
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	aa 1f       	adc	r26, r26
    13f2:	a4 17       	cp	r26, r20
    13f4:	10 f0       	brcs	.+4      	; 0x13fa <__utoa_common+0x14>
    13f6:	a4 1b       	sub	r26, r20
    13f8:	83 95       	inc	r24
    13fa:	50 51       	subi	r21, 0x10	; 16
    13fc:	b9 f7       	brne	.-18     	; 0x13ec <__utoa_common+0x6>
    13fe:	a0 5d       	subi	r26, 0xD0	; 208
    1400:	aa 33       	cpi	r26, 0x3A	; 58
    1402:	08 f0       	brcs	.+2      	; 0x1406 <__utoa_common+0x20>
    1404:	a9 5d       	subi	r26, 0xD9	; 217
    1406:	a1 93       	st	Z+, r26
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	79 f7       	brne	.-34     	; 0x13ea <__utoa_common+0x4>
    140c:	b1 11       	cpse	r27, r1
    140e:	b1 93       	st	Z+, r27
    1410:	11 92       	st	Z+, r1
    1412:	cb 01       	movw	r24, r22
    1414:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <strrev>

00001418 <strrev>:
    1418:	dc 01       	movw	r26, r24
    141a:	fc 01       	movw	r30, r24
    141c:	67 2f       	mov	r22, r23
    141e:	71 91       	ld	r23, Z+
    1420:	77 23       	and	r23, r23
    1422:	e1 f7       	brne	.-8      	; 0x141c <strrev+0x4>
    1424:	32 97       	sbiw	r30, 0x02	; 2
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <strrev+0x18>
    1428:	7c 91       	ld	r23, X
    142a:	6d 93       	st	X+, r22
    142c:	70 83       	st	Z, r23
    142e:	62 91       	ld	r22, -Z
    1430:	ae 17       	cp	r26, r30
    1432:	bf 07       	cpc	r27, r31
    1434:	c8 f3       	brcs	.-14     	; 0x1428 <strrev+0x10>
    1436:	08 95       	ret

00001438 <_exit>:
    1438:	f8 94       	cli

0000143a <__stop_program>:
    143a:	ff cf       	rjmp	.-2      	; 0x143a <__stop_program>
