
application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000119a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000119a  0000122e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800070  00800070  0000123e  2**0
                  ALLOC
  3 .stab         00001ac4  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001175  00000000  00000000  00002d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003e79  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003e8c  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00003ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  000043f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000048dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  000048f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include"lcd.h"
#include"adc.h"
#include"thermal_sensor.h"

int main(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
      98:	1f 92       	push	r1
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
	/*initializaiton code*/
	/*
	 * creating configuration structure for adc driver
	 */
	ADC_struct ADC_config = {_2_56v , POLLING , F_CPU_8 };
      9e:	83 e0       	ldi	r24, 0x03	; 3
      a0:	89 83       	std	Y+1, r24	; 0x01
      a2:	1a 82       	std	Y+2, r1	; 0x02
      a4:	83 e0       	ldi	r24, 0x03	; 3
      a6:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 * initiating adc driver
	 */
	ADC_init(&ADC_config);
      a8:	ce 01       	movw	r24, r28
      aa:	01 96       	adiw	r24, 0x01	; 1
      ac:	0e 94 85 00 	call	0x10a	; 0x10a <ADC_init>
	/*
	 * initiating lcd driver
	 */
	LCD_init();
      b0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_init>
	/*
	 * to convert the result current_reading to temperature reading
	 */
	ADC_setCallBack(THERMAL_conversion);
      b4:	8f e6       	ldi	r24, 0x6F	; 111
      b6:	96 e0       	ldi	r25, 0x06	; 6
      b8:	0e 94 29 01 	call	0x252	; 0x252 <ADC_setCallBack>
	//CLEAR_BIT(DDRA , 2);
	/*
	 *  setting I-bit for interrupt enable in case you need it
	 */
	GLOBAL_INTERRUPT_ENABLE();
      bc:	8f e5       	ldi	r24, 0x5F	; 95
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	2f e5       	ldi	r18, 0x5F	; 95
      c2:	30 e0       	ldi	r19, 0x00	; 0
      c4:	f9 01       	movw	r30, r18
      c6:	20 81       	ld	r18, Z
      c8:	20 68       	ori	r18, 0x80	; 128
      ca:	fc 01       	movw	r30, r24
      cc:	20 83       	st	Z, r18

	LCD_displayString((uint8*)"temperature = ");
      ce:	80 e6       	ldi	r24, 0x60	; 96
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_displayString>
		/*Application code*/
		/*
		 * converting ADC2 channel in the ADC module and storing the
		 * sensor reading in "Temp" variable
		 */
		ADC_readChannel(&ADC_config , ADC2);
      d6:	62 e0       	ldi	r22, 0x02	; 2
      d8:	ce 01       	movw	r24, r28
      da:	01 96       	adiw	r24, 0x01	; 1
      dc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <ADC_readChannel>
		/*
		 * displaying that sensor reading
		 */
		LCD_goToColRow(1 , 1);
      e0:	61 e0       	ldi	r22, 0x01	; 1
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <LCD_goToColRow>
		LCD_displayInt(Temp);
      e8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Temp>
      ec:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Temp+0x1>
      f0:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <Temp+0x2>
      f4:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <Temp+0x3>
      f8:	bc 01       	movw	r22, r24
      fa:	cd 01       	movw	r24, r26
      fc:	0e 94 31 07 	call	0xe62	; 0xe62 <__fixsfsi>
     100:	dc 01       	movw	r26, r24
     102:	cb 01       	movw	r24, r22
     104:	0e 94 26 06 	call	0xc4c	; 0xc4c <LCD_displayInt>
		/*
		 * clearing the screen
		 */
	}
     108:	e6 cf       	rjmp	.-52     	; 0xd6 <main+0x44>

0000010a <ADC_init>:
volatile uint16 current_reading;
/*********************************************************************************
* 								Functions Definition							 *
 *********************************************************************************/
void ADC_init(const ADC_struct * config_ptr)
{
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	00 d0       	rcall	.+0      	; 0x110 <ADC_init+0x6>
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	9a 83       	std	Y+2, r25	; 0x02
     116:	89 83       	std	Y+1, r24	; 0x01
	/* setting initially
	 * 1. ADC0 channel
	 * 2. reference voltage
	 * 3. no left adjust for result
	 */
	ADMUX = (config_ptr->ref)<<6;
     118:	87 e2       	ldi	r24, 0x27	; 39
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	29 81       	ldd	r18, Y+1	; 0x01
     11e:	3a 81       	ldd	r19, Y+2	; 0x02
     120:	f9 01       	movw	r30, r18
     122:	20 81       	ld	r18, Z
     124:	22 95       	swap	r18
     126:	22 0f       	add	r18, r18
     128:	22 0f       	add	r18, r18
     12a:	20 7c       	andi	r18, 0xC0	; 192
     12c:	fc 01       	movw	r30, r24
     12e:	20 83       	st	Z, r18
	/*
	 * enable adc
	 * */
	SET_BIT(ADCSRA , ADEN);
     130:	86 e2       	ldi	r24, 0x26	; 38
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	26 e2       	ldi	r18, 0x26	; 38
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	f9 01       	movw	r30, r18
     13a:	20 81       	ld	r18, Z
     13c:	20 68       	ori	r18, 0x80	; 128
     13e:	fc 01       	movw	r30, r24
     140:	20 83       	st	Z, r18
	/*
	 * setting ADIE with either 0 for polling or 1 for interrupt
	 * */
	SET_VALUE(ADCSRA , ADIE , config_ptr->type);
     142:	86 e2       	ldi	r24, 0x26	; 38
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	26 e2       	ldi	r18, 0x26	; 38
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	f9 01       	movw	r30, r18
     14c:	20 81       	ld	r18, Z
     14e:	27 7f       	andi	r18, 0xF7	; 247
     150:	fc 01       	movw	r30, r24
     152:	20 83       	st	Z, r18
     154:	86 e2       	ldi	r24, 0x26	; 38
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	26 e2       	ldi	r18, 0x26	; 38
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	f9 01       	movw	r30, r18
     15e:	20 81       	ld	r18, Z
     160:	42 2f       	mov	r20, r18
     162:	29 81       	ldd	r18, Y+1	; 0x01
     164:	3a 81       	ldd	r19, Y+2	; 0x02
     166:	f9 01       	movw	r30, r18
     168:	21 81       	ldd	r18, Z+1	; 0x01
     16a:	22 2f       	mov	r18, r18
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	22 0f       	add	r18, r18
     170:	33 1f       	adc	r19, r19
     172:	22 0f       	add	r18, r18
     174:	33 1f       	adc	r19, r19
     176:	22 0f       	add	r18, r18
     178:	33 1f       	adc	r19, r19
     17a:	24 2b       	or	r18, r20
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18
	/*
	 * setting the prescale value in ADCSRA register
	 * */
	ADCSRA =(ADCSRA & 0xF8) | config_ptr->prescaler;
     180:	86 e2       	ldi	r24, 0x26	; 38
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	26 e2       	ldi	r18, 0x26	; 38
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	f9 01       	movw	r30, r18
     18a:	20 81       	ld	r18, Z
     18c:	42 2f       	mov	r20, r18
     18e:	48 7f       	andi	r20, 0xF8	; 248
     190:	29 81       	ldd	r18, Y+1	; 0x01
     192:	3a 81       	ldd	r19, Y+2	; 0x02
     194:	f9 01       	movw	r30, r18
     196:	22 81       	ldd	r18, Z+2	; 0x02
     198:	24 2b       	or	r18, r20
     19a:	fc 01       	movw	r30, r24
     19c:	20 83       	st	Z, r18
}
     19e:	00 00       	nop
     1a0:	0f 90       	pop	r0
     1a2:	0f 90       	pop	r0
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	08 95       	ret

000001aa <ADC_readChannel>:

void ADC_readChannel(const ADC_struct * config_ptr,ADC_channel a_channel)
{
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	00 d0       	rcall	.+0      	; 0x1b0 <ADC_readChannel+0x6>
     1b0:	1f 92       	push	r1
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	9a 83       	std	Y+2, r25	; 0x02
     1b8:	89 83       	std	Y+1, r24	; 0x01
     1ba:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * setting the channel that will be converted
	 * */
	ADMUX = (ADMUX & 0xE0) |a_channel;
     1bc:	87 e2       	ldi	r24, 0x27	; 39
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	27 e2       	ldi	r18, 0x27	; 39
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	f9 01       	movw	r30, r18
     1c6:	20 81       	ld	r18, Z
     1c8:	32 2f       	mov	r19, r18
     1ca:	30 7e       	andi	r19, 0xE0	; 224
     1cc:	2b 81       	ldd	r18, Y+3	; 0x03
     1ce:	23 2b       	or	r18, r19
     1d0:	fc 01       	movw	r30, r24
     1d2:	20 83       	st	Z, r18
	/*
	 * start conversion
	 * */
	SET_BIT(ADCSRA , ADSC);
     1d4:	86 e2       	ldi	r24, 0x26	; 38
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	26 e2       	ldi	r18, 0x26	; 38
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	f9 01       	movw	r30, r18
     1de:	20 81       	ld	r18, Z
     1e0:	20 64       	ori	r18, 0x40	; 64
     1e2:	fc 01       	movw	r30, r24
     1e4:	20 83       	st	Z, r18
	/*
	 * polling service routine
	 */
	if(config_ptr->type == POLLING)
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ea:	fc 01       	movw	r30, r24
     1ec:	81 81       	ldd	r24, Z+1	; 0x01
     1ee:	88 23       	and	r24, r24
     1f0:	49 f5       	brne	.+82     	; 0x244 <ADC_readChannel+0x9a>
	{
		/*
		 * wait until conversion at adc module is over
		 */
		while(BIT_IS_CLEAR(ADCSRA , ADIF)){};
     1f2:	00 00       	nop
     1f4:	86 e2       	ldi	r24, 0x26	; 38
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	fc 01       	movw	r30, r24
     1fa:	80 81       	ld	r24, Z
     1fc:	88 2f       	mov	r24, r24
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	80 71       	andi	r24, 0x10	; 16
     202:	99 27       	eor	r25, r25
     204:	89 2b       	or	r24, r25
     206:	b1 f3       	breq	.-20     	; 0x1f4 <ADC_readChannel+0x4a>
		/*
		 * clearing the interrupt module flag
		 */
		SET_BIT(ADCSRA , ADIF);
     208:	86 e2       	ldi	r24, 0x26	; 38
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	26 e2       	ldi	r18, 0x26	; 38
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	f9 01       	movw	r30, r18
     212:	20 81       	ld	r18, Z
     214:	20 61       	ori	r18, 0x10	; 16
     216:	fc 01       	movw	r30, r24
     218:	20 83       	st	Z, r18
		/*
		 * storing conversion result in current_reading global variable
		 */
		current_reading = ADC;
     21a:	84 e2       	ldi	r24, 0x24	; 36
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	fc 01       	movw	r30, r24
     220:	80 81       	ld	r24, Z
     222:	91 81       	ldd	r25, Z+1	; 0x01
     224:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <current_reading+0x1>
     228:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <current_reading>
		/*
		 * callback function of the hardware sensor conversion for result
		 */
		if(ADC_interruptFunc_ptr != NULL)
     22c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
     230:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
     234:	89 2b       	or	r24, r25
     236:	31 f0       	breq	.+12     	; 0x244 <ADC_readChannel+0x9a>
			{
				ADC_interruptFunc_ptr();
     238:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
     23c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
     240:	fc 01       	movw	r30, r24
     242:	09 95       	icall
			}
	}
}
     244:	00 00       	nop
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	08 95       	ret

00000252 <ADC_setCallBack>:
void ADC_setCallBack(void (*a_ptr)(void))
{
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	00 d0       	rcall	.+0      	; 0x258 <ADC_setCallBack+0x6>
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
     25c:	9a 83       	std	Y+2, r25	; 0x02
     25e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * passing the address of the call back function
	 * */
	ADC_interruptFunc_ptr = a_ptr;
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	9a 81       	ldd	r25, Y+2	; 0x02
     264:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
     268:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
}
     26c:	00 00       	nop
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <__vector_14>:
/*********************************************************************************
* 								Interrupt service routines							 *
 *********************************************************************************/
ISR(ADC_vect)
{
     278:	1f 92       	push	r1
     27a:	0f 92       	push	r0
     27c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     280:	0f 92       	push	r0
     282:	11 24       	eor	r1, r1
     284:	2f 93       	push	r18
     286:	3f 93       	push	r19
     288:	4f 93       	push	r20
     28a:	5f 93       	push	r21
     28c:	6f 93       	push	r22
     28e:	7f 93       	push	r23
     290:	8f 93       	push	r24
     292:	9f 93       	push	r25
     294:	af 93       	push	r26
     296:	bf 93       	push	r27
     298:	ef 93       	push	r30
     29a:	ff 93       	push	r31
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * storing conversion result in current_reading global variable
	 */
	current_reading = ADC;
     2a4:	84 e2       	ldi	r24, 0x24	; 36
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	fc 01       	movw	r30, r24
     2aa:	80 81       	ld	r24, Z
     2ac:	91 81       	ldd	r25, Z+1	; 0x01
     2ae:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <current_reading+0x1>
     2b2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <current_reading>
	if(ADC_interruptFunc_ptr != NULL)
     2b6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
     2ba:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
     2be:	89 2b       	or	r24, r25
     2c0:	31 f0       	breq	.+12     	; 0x2ce <__vector_14+0x56>
	{
		ADC_interruptFunc_ptr();
     2c2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
     2c6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
     2ca:	fc 01       	movw	r30, r24
     2cc:	09 95       	icall
	}
}
     2ce:	00 00       	nop
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	ff 91       	pop	r31
     2d6:	ef 91       	pop	r30
     2d8:	bf 91       	pop	r27
     2da:	af 91       	pop	r26
     2dc:	9f 91       	pop	r25
     2de:	8f 91       	pop	r24
     2e0:	7f 91       	pop	r23
     2e2:	6f 91       	pop	r22
     2e4:	5f 91       	pop	r21
     2e6:	4f 91       	pop	r20
     2e8:	3f 91       	pop	r19
     2ea:	2f 91       	pop	r18
     2ec:	0f 90       	pop	r0
     2ee:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2f2:	0f 90       	pop	r0
     2f4:	1f 90       	pop	r1
     2f6:	18 95       	reti

000002f8 <LCD_init>:
 *******************************************************************************/
#include"lcd.h"

/*--------------------------------------FUNCTION DEFINITIONS---------------------------------------------*/
void LCD_init(void)
{
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(LCD_CTRL_DIR , RS);	/* make RS pin o/p pin*/
     300:	81 e3       	ldi	r24, 0x31	; 49
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	21 e3       	ldi	r18, 0x31	; 49
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	f9 01       	movw	r30, r18
     30a:	20 81       	ld	r18, Z
     30c:	20 61       	ori	r18, 0x10	; 16
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18
	SET_BIT(LCD_CTRL_DIR , RW);	/* make RW pin o/p pin*/
     312:	81 e3       	ldi	r24, 0x31	; 49
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	21 e3       	ldi	r18, 0x31	; 49
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	f9 01       	movw	r30, r18
     31c:	20 81       	ld	r18, Z
     31e:	20 62       	ori	r18, 0x20	; 32
     320:	fc 01       	movw	r30, r24
     322:	20 83       	st	Z, r18
	SET_BIT(LCD_CTRL_DIR , E);	/*make E pin o/p pin*/
     324:	81 e3       	ldi	r24, 0x31	; 49
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	21 e3       	ldi	r18, 0x31	; 49
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	f9 01       	movw	r30, r18
     32e:	20 81       	ld	r18, Z
     330:	20 64       	ori	r18, 0x40	; 64
     332:	fc 01       	movw	r30, r24
     334:	20 83       	st	Z, r18
#endif
	LCD_sendCommand(SWITCH_4_BIT_MODE);
	LCD_sendCommand(TWO_LINE_4_BITS);
#endif
#ifndef LCD_4_BITS_MODE
	SET_UPPER(LCD_DATA_DIR);
     336:	84 e3       	ldi	r24, 0x34	; 52
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	24 e3       	ldi	r18, 0x34	; 52
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	f9 01       	movw	r30, r18
     340:	20 81       	ld	r18, Z
     342:	2f 60       	ori	r18, 0x0F	; 15
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
	SET_LOWER(LCD_DATA_DIR);				/* make data port o/p port*/
     348:	84 e3       	ldi	r24, 0x34	; 52
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	24 e3       	ldi	r18, 0x34	; 52
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	f9 01       	movw	r30, r18
     352:	20 81       	ld	r18, Z
     354:	20 6f       	ori	r18, 0xF0	; 240
     356:	fc 01       	movw	r30, r24
     358:	20 83       	st	Z, r18
	LCD_sendCommand(TWO_LINE_8_BITS);		/* 2lines + 8 bits mode*/
     35a:	88 e3       	ldi	r24, 0x38	; 56
     35c:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_sendCommand>
#endif
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);		/* Cursor off */
     360:	8c e0       	ldi	r24, 0x0C	; 12
     362:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN);		/* clear screen*/
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_sendCommand>
}
     36c:	00 00       	nop
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command)
{
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e9 97       	sbiw	r28, 0x39	; 57
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	89 af       	std	Y+57, r24	; 0x39
	/*function definition*/
	CLEAR_BIT(LCD_CTRL_OUT , RS);	/*for command mode*/
     38a:	82 e3       	ldi	r24, 0x32	; 50
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	22 e3       	ldi	r18, 0x32	; 50
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	f9 01       	movw	r30, r18
     394:	20 81       	ld	r18, Z
     396:	2f 7e       	andi	r18, 0xEF	; 239
     398:	fc 01       	movw	r30, r24
     39a:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_OUT , RW);	/*for write mode*/
     39c:	82 e3       	ldi	r24, 0x32	; 50
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	22 e3       	ldi	r18, 0x32	; 50
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	f9 01       	movw	r30, r18
     3a6:	20 81       	ld	r18, Z
     3a8:	2f 7d       	andi	r18, 0xDF	; 223
     3aa:	fc 01       	movw	r30, r24
     3ac:	20 83       	st	Z, r18
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	a0 e8       	ldi	r26, 0x80	; 128
     3b4:	bf e3       	ldi	r27, 0x3F	; 63
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	9a 83       	std	Y+2, r25	; 0x02
     3ba:	ab 83       	std	Y+3, r26	; 0x03
     3bc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	4a e7       	ldi	r20, 0x7A	; 122
     3c4:	53 e4       	ldi	r21, 0x43	; 67
     3c6:	69 81       	ldd	r22, Y+1	; 0x01
     3c8:	7a 81       	ldd	r23, Y+2	; 0x02
     3ca:	8b 81       	ldd	r24, Y+3	; 0x03
     3cc:	9c 81       	ldd	r25, Y+4	; 0x04
     3ce:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     3d2:	dc 01       	movw	r26, r24
     3d4:	cb 01       	movw	r24, r22
     3d6:	8f a7       	std	Y+47, r24	; 0x2f
     3d8:	98 ab       	std	Y+48, r25	; 0x30
     3da:	a9 ab       	std	Y+49, r26	; 0x31
     3dc:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 e8       	ldi	r20, 0x80	; 128
     3e4:	5f e3       	ldi	r21, 0x3F	; 63
     3e6:	6f a5       	ldd	r22, Y+47	; 0x2f
     3e8:	78 a9       	ldd	r23, Y+48	; 0x30
     3ea:	89 a9       	ldd	r24, Y+49	; 0x31
     3ec:	9a a9       	ldd	r25, Y+50	; 0x32
     3ee:	0e 94 ba 06 	call	0xd74	; 0xd74 <__cmpsf2>
     3f2:	88 23       	and	r24, r24
     3f4:	2c f4       	brge	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
		__ticks = 1;
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	9c ab       	std	Y+52, r25	; 0x34
     3fc:	8b ab       	std	Y+51, r24	; 0x33
     3fe:	3f c0       	rjmp	.+126    	; 0x47e <__stack+0x1f>
	else if (__tmp > 65535)
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	3f ef       	ldi	r19, 0xFF	; 255
     404:	4f e7       	ldi	r20, 0x7F	; 127
     406:	57 e4       	ldi	r21, 0x47	; 71
     408:	6f a5       	ldd	r22, Y+47	; 0x2f
     40a:	78 a9       	ldd	r23, Y+48	; 0x30
     40c:	89 a9       	ldd	r24, Y+49	; 0x31
     40e:	9a a9       	ldd	r25, Y+50	; 0x32
     410:	0e 94 19 08 	call	0x1032	; 0x1032 <__gesf2>
     414:	18 16       	cp	r1, r24
     416:	4c f5       	brge	.+82     	; 0x46a <__stack+0xb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e2       	ldi	r20, 0x20	; 32
     41e:	51 e4       	ldi	r21, 0x41	; 65
     420:	69 81       	ldd	r22, Y+1	; 0x01
     422:	7a 81       	ldd	r23, Y+2	; 0x02
     424:	8b 81       	ldd	r24, Y+3	; 0x03
     426:	9c 81       	ldd	r25, Y+4	; 0x04
     428:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     42c:	dc 01       	movw	r26, r24
     42e:	cb 01       	movw	r24, r22
     430:	bc 01       	movw	r22, r24
     432:	cd 01       	movw	r24, r26
     434:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     438:	dc 01       	movw	r26, r24
     43a:	cb 01       	movw	r24, r22
     43c:	9c ab       	std	Y+52, r25	; 0x34
     43e:	8b ab       	std	Y+51, r24	; 0x33
     440:	0f c0       	rjmp	.+30     	; 0x460 <__stack+0x1>
     442:	89 e1       	ldi	r24, 0x19	; 25
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	9e ab       	std	Y+54, r25	; 0x36
     448:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     44a:	8d a9       	ldd	r24, Y+53	; 0x35
     44c:	9e a9       	ldd	r25, Y+54	; 0x36
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     452:	9e ab       	std	Y+54, r25	; 0x36
     454:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     456:	8b a9       	ldd	r24, Y+51	; 0x33
     458:	9c a9       	ldd	r25, Y+52	; 0x34
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	9c ab       	std	Y+52, r25	; 0x34
     45e:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     460:	8b a9       	ldd	r24, Y+51	; 0x33
     462:	9c a9       	ldd	r25, Y+52	; 0x34
     464:	89 2b       	or	r24, r25
     466:	69 f7       	brne	.-38     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     468:	14 c0       	rjmp	.+40     	; 0x492 <__stack+0x33>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     46a:	6f a5       	ldd	r22, Y+47	; 0x2f
     46c:	78 a9       	ldd	r23, Y+48	; 0x30
     46e:	89 a9       	ldd	r24, Y+49	; 0x31
     470:	9a a9       	ldd	r25, Y+50	; 0x32
     472:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     476:	dc 01       	movw	r26, r24
     478:	cb 01       	movw	r24, r22
     47a:	9c ab       	std	Y+52, r25	; 0x34
     47c:	8b ab       	std	Y+51, r24	; 0x33
     47e:	8b a9       	ldd	r24, Y+51	; 0x33
     480:	9c a9       	ldd	r25, Y+52	; 0x34
     482:	98 af       	std	Y+56, r25	; 0x38
     484:	8f ab       	std	Y+55, r24	; 0x37
     486:	8f a9       	ldd	r24, Y+55	; 0x37
     488:	98 ad       	ldd	r25, Y+56	; 0x38
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <__stack+0x2b>
     48e:	98 af       	std	Y+56, r25	; 0x38
     490:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);					/*for write timing diagram*/
	SET_BIT(LCD_CTRL_OUT , E);		/*to enable the lcd*/
     492:	82 e3       	ldi	r24, 0x32	; 50
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	22 e3       	ldi	r18, 0x32	; 50
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	f9 01       	movw	r30, r18
     49c:	20 81       	ld	r18, Z
     49e:	20 64       	ori	r18, 0x40	; 64
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 83       	st	Z, r18
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	a0 e8       	ldi	r26, 0x80	; 128
     4aa:	bf e3       	ldi	r27, 0x3F	; 63
     4ac:	8d 83       	std	Y+5, r24	; 0x05
     4ae:	9e 83       	std	Y+6, r25	; 0x06
     4b0:	af 83       	std	Y+7, r26	; 0x07
     4b2:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	4a e7       	ldi	r20, 0x7A	; 122
     4ba:	53 e4       	ldi	r21, 0x43	; 67
     4bc:	6d 81       	ldd	r22, Y+5	; 0x05
     4be:	7e 81       	ldd	r23, Y+6	; 0x06
     4c0:	8f 81       	ldd	r24, Y+7	; 0x07
     4c2:	98 85       	ldd	r25, Y+8	; 0x08
     4c4:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     4c8:	dc 01       	movw	r26, r24
     4ca:	cb 01       	movw	r24, r22
     4cc:	8d a3       	std	Y+37, r24	; 0x25
     4ce:	9e a3       	std	Y+38, r25	; 0x26
     4d0:	af a3       	std	Y+39, r26	; 0x27
     4d2:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	40 e8       	ldi	r20, 0x80	; 128
     4da:	5f e3       	ldi	r21, 0x3F	; 63
     4dc:	6d a1       	ldd	r22, Y+37	; 0x25
     4de:	7e a1       	ldd	r23, Y+38	; 0x26
     4e0:	8f a1       	ldd	r24, Y+39	; 0x27
     4e2:	98 a5       	ldd	r25, Y+40	; 0x28
     4e4:	0e 94 ba 06 	call	0xd74	; 0xd74 <__cmpsf2>
     4e8:	88 23       	and	r24, r24
     4ea:	2c f4       	brge	.+10     	; 0x4f6 <__stack+0x97>
		__ticks = 1;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	9a a7       	std	Y+42, r25	; 0x2a
     4f2:	89 a7       	std	Y+41, r24	; 0x29
     4f4:	3f c0       	rjmp	.+126    	; 0x574 <__stack+0x115>
	else if (__tmp > 65535)
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	3f ef       	ldi	r19, 0xFF	; 255
     4fa:	4f e7       	ldi	r20, 0x7F	; 127
     4fc:	57 e4       	ldi	r21, 0x47	; 71
     4fe:	6d a1       	ldd	r22, Y+37	; 0x25
     500:	7e a1       	ldd	r23, Y+38	; 0x26
     502:	8f a1       	ldd	r24, Y+39	; 0x27
     504:	98 a5       	ldd	r25, Y+40	; 0x28
     506:	0e 94 19 08 	call	0x1032	; 0x1032 <__gesf2>
     50a:	18 16       	cp	r1, r24
     50c:	4c f5       	brge	.+82     	; 0x560 <__stack+0x101>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	40 e2       	ldi	r20, 0x20	; 32
     514:	51 e4       	ldi	r21, 0x41	; 65
     516:	6d 81       	ldd	r22, Y+5	; 0x05
     518:	7e 81       	ldd	r23, Y+6	; 0x06
     51a:	8f 81       	ldd	r24, Y+7	; 0x07
     51c:	98 85       	ldd	r25, Y+8	; 0x08
     51e:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     522:	dc 01       	movw	r26, r24
     524:	cb 01       	movw	r24, r22
     526:	bc 01       	movw	r22, r24
     528:	cd 01       	movw	r24, r26
     52a:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	9a a7       	std	Y+42, r25	; 0x2a
     534:	89 a7       	std	Y+41, r24	; 0x29
     536:	0f c0       	rjmp	.+30     	; 0x556 <__stack+0xf7>
     538:	89 e1       	ldi	r24, 0x19	; 25
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	9c a7       	std	Y+44, r25	; 0x2c
     53e:	8b a7       	std	Y+43, r24	; 0x2b
     540:	8b a5       	ldd	r24, Y+43	; 0x2b
     542:	9c a5       	ldd	r25, Y+44	; 0x2c
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <__stack+0xe5>
     548:	9c a7       	std	Y+44, r25	; 0x2c
     54a:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     54c:	89 a5       	ldd	r24, Y+41	; 0x29
     54e:	9a a5       	ldd	r25, Y+42	; 0x2a
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	9a a7       	std	Y+42, r25	; 0x2a
     554:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     556:	89 a5       	ldd	r24, Y+41	; 0x29
     558:	9a a5       	ldd	r25, Y+42	; 0x2a
     55a:	89 2b       	or	r24, r25
     55c:	69 f7       	brne	.-38     	; 0x538 <__stack+0xd9>
     55e:	14 c0       	rjmp	.+40     	; 0x588 <__stack+0x129>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     560:	6d a1       	ldd	r22, Y+37	; 0x25
     562:	7e a1       	ldd	r23, Y+38	; 0x26
     564:	8f a1       	ldd	r24, Y+39	; 0x27
     566:	98 a5       	ldd	r25, Y+40	; 0x28
     568:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	9a a7       	std	Y+42, r25	; 0x2a
     572:	89 a7       	std	Y+41, r24	; 0x29
     574:	89 a5       	ldd	r24, Y+41	; 0x29
     576:	9a a5       	ldd	r25, Y+42	; 0x2a
     578:	9e a7       	std	Y+46, r25	; 0x2e
     57a:	8d a7       	std	Y+45, r24	; 0x2d
     57c:	8d a5       	ldd	r24, Y+45	; 0x2d
     57e:	9e a5       	ldd	r25, Y+46	; 0x2e
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <__stack+0x121>
     584:	9e a7       	std	Y+46, r25	; 0x2e
     586:	8d a7       	std	Y+45, r24	; 0x2d
	PUT_UPPER_IN_UPPER(LCD_DATA_OUT , command);
	#else
	PUT_UPPER_IN_LOWER(LCD_DATA_OUT , command);
	#endif
	#else
	LCD_DATA_OUT = command;			/*out the command variable*/
     588:	85 e3       	ldi	r24, 0x35	; 53
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	29 ad       	ldd	r18, Y+57	; 0x39
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	a0 e8       	ldi	r26, 0x80	; 128
     598:	bf e3       	ldi	r27, 0x3F	; 63
     59a:	89 87       	std	Y+9, r24	; 0x09
     59c:	9a 87       	std	Y+10, r25	; 0x0a
     59e:	ab 87       	std	Y+11, r26	; 0x0b
     5a0:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	4a e7       	ldi	r20, 0x7A	; 122
     5a8:	53 e4       	ldi	r21, 0x43	; 67
     5aa:	69 85       	ldd	r22, Y+9	; 0x09
     5ac:	7a 85       	ldd	r23, Y+10	; 0x0a
     5ae:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b0:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b2:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     5b6:	dc 01       	movw	r26, r24
     5b8:	cb 01       	movw	r24, r22
     5ba:	8b 8f       	std	Y+27, r24	; 0x1b
     5bc:	9c 8f       	std	Y+28, r25	; 0x1c
     5be:	ad 8f       	std	Y+29, r26	; 0x1d
     5c0:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	40 e8       	ldi	r20, 0x80	; 128
     5c8:	5f e3       	ldi	r21, 0x3F	; 63
     5ca:	6b 8d       	ldd	r22, Y+27	; 0x1b
     5cc:	7c 8d       	ldd	r23, Y+28	; 0x1c
     5ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
     5d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     5d2:	0e 94 ba 06 	call	0xd74	; 0xd74 <__cmpsf2>
     5d6:	88 23       	and	r24, r24
     5d8:	2c f4       	brge	.+10     	; 0x5e4 <__stack+0x185>
		__ticks = 1;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	98 a3       	std	Y+32, r25	; 0x20
     5e0:	8f 8f       	std	Y+31, r24	; 0x1f
     5e2:	3f c0       	rjmp	.+126    	; 0x662 <__stack+0x203>
	else if (__tmp > 65535)
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	3f ef       	ldi	r19, 0xFF	; 255
     5e8:	4f e7       	ldi	r20, 0x7F	; 127
     5ea:	57 e4       	ldi	r21, 0x47	; 71
     5ec:	6b 8d       	ldd	r22, Y+27	; 0x1b
     5ee:	7c 8d       	ldd	r23, Y+28	; 0x1c
     5f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     5f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     5f4:	0e 94 19 08 	call	0x1032	; 0x1032 <__gesf2>
     5f8:	18 16       	cp	r1, r24
     5fa:	4c f5       	brge	.+82     	; 0x64e <__stack+0x1ef>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	40 e2       	ldi	r20, 0x20	; 32
     602:	51 e4       	ldi	r21, 0x41	; 65
     604:	69 85       	ldd	r22, Y+9	; 0x09
     606:	7a 85       	ldd	r23, Y+10	; 0x0a
     608:	8b 85       	ldd	r24, Y+11	; 0x0b
     60a:	9c 85       	ldd	r25, Y+12	; 0x0c
     60c:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     610:	dc 01       	movw	r26, r24
     612:	cb 01       	movw	r24, r22
     614:	bc 01       	movw	r22, r24
     616:	cd 01       	movw	r24, r26
     618:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	98 a3       	std	Y+32, r25	; 0x20
     622:	8f 8f       	std	Y+31, r24	; 0x1f
     624:	0f c0       	rjmp	.+30     	; 0x644 <__stack+0x1e5>
     626:	89 e1       	ldi	r24, 0x19	; 25
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	9a a3       	std	Y+34, r25	; 0x22
     62c:	89 a3       	std	Y+33, r24	; 0x21
     62e:	89 a1       	ldd	r24, Y+33	; 0x21
     630:	9a a1       	ldd	r25, Y+34	; 0x22
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	f1 f7       	brne	.-4      	; 0x632 <__stack+0x1d3>
     636:	9a a3       	std	Y+34, r25	; 0x22
     638:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     63a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     63c:	98 a1       	ldd	r25, Y+32	; 0x20
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	98 a3       	std	Y+32, r25	; 0x20
     642:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     644:	8f 8d       	ldd	r24, Y+31	; 0x1f
     646:	98 a1       	ldd	r25, Y+32	; 0x20
     648:	89 2b       	or	r24, r25
     64a:	69 f7       	brne	.-38     	; 0x626 <__stack+0x1c7>
     64c:	14 c0       	rjmp	.+40     	; 0x676 <__stack+0x217>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     64e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     650:	7c 8d       	ldd	r23, Y+28	; 0x1c
     652:	8d 8d       	ldd	r24, Y+29	; 0x1d
     654:	9e 8d       	ldd	r25, Y+30	; 0x1e
     656:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     65a:	dc 01       	movw	r26, r24
     65c:	cb 01       	movw	r24, r22
     65e:	98 a3       	std	Y+32, r25	; 0x20
     660:	8f 8f       	std	Y+31, r24	; 0x1f
     662:	8f 8d       	ldd	r24, Y+31	; 0x1f
     664:	98 a1       	ldd	r25, Y+32	; 0x20
     666:	9c a3       	std	Y+36, r25	; 0x24
     668:	8b a3       	std	Y+35, r24	; 0x23
     66a:	8b a1       	ldd	r24, Y+35	; 0x23
     66c:	9c a1       	ldd	r25, Y+36	; 0x24
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <__stack+0x20f>
     672:	9c a3       	std	Y+36, r25	; 0x24
     674:	8b a3       	std	Y+35, r24	; 0x23
	#endif
	_delay_ms(1);					/*for write timing diagram*/
	CLEAR_BIT(LCD_CTRL_OUT , E);	/*for write timing diagram*/
     676:	82 e3       	ldi	r24, 0x32	; 50
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	22 e3       	ldi	r18, 0x32	; 50
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	f9 01       	movw	r30, r18
     680:	20 81       	ld	r18, Z
     682:	2f 7b       	andi	r18, 0xBF	; 191
     684:	fc 01       	movw	r30, r24
     686:	20 83       	st	Z, r18
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	a0 e8       	ldi	r26, 0x80	; 128
     68e:	bf e3       	ldi	r27, 0x3F	; 63
     690:	8d 87       	std	Y+13, r24	; 0x0d
     692:	9e 87       	std	Y+14, r25	; 0x0e
     694:	af 87       	std	Y+15, r26	; 0x0f
     696:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	4a e7       	ldi	r20, 0x7A	; 122
     69e:	53 e4       	ldi	r21, 0x43	; 67
     6a0:	6d 85       	ldd	r22, Y+13	; 0x0d
     6a2:	7e 85       	ldd	r23, Y+14	; 0x0e
     6a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     6a6:	98 89       	ldd	r25, Y+16	; 0x10
     6a8:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     6ac:	dc 01       	movw	r26, r24
     6ae:	cb 01       	movw	r24, r22
     6b0:	89 8b       	std	Y+17, r24	; 0x11
     6b2:	9a 8b       	std	Y+18, r25	; 0x12
     6b4:	ab 8b       	std	Y+19, r26	; 0x13
     6b6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	40 e8       	ldi	r20, 0x80	; 128
     6be:	5f e3       	ldi	r21, 0x3F	; 63
     6c0:	69 89       	ldd	r22, Y+17	; 0x11
     6c2:	7a 89       	ldd	r23, Y+18	; 0x12
     6c4:	8b 89       	ldd	r24, Y+19	; 0x13
     6c6:	9c 89       	ldd	r25, Y+20	; 0x14
     6c8:	0e 94 ba 06 	call	0xd74	; 0xd74 <__cmpsf2>
     6cc:	88 23       	and	r24, r24
     6ce:	2c f4       	brge	.+10     	; 0x6da <__stack+0x27b>
		__ticks = 1;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	9e 8b       	std	Y+22, r25	; 0x16
     6d6:	8d 8b       	std	Y+21, r24	; 0x15
     6d8:	3f c0       	rjmp	.+126    	; 0x758 <__stack+0x2f9>
	else if (__tmp > 65535)
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	3f ef       	ldi	r19, 0xFF	; 255
     6de:	4f e7       	ldi	r20, 0x7F	; 127
     6e0:	57 e4       	ldi	r21, 0x47	; 71
     6e2:	69 89       	ldd	r22, Y+17	; 0x11
     6e4:	7a 89       	ldd	r23, Y+18	; 0x12
     6e6:	8b 89       	ldd	r24, Y+19	; 0x13
     6e8:	9c 89       	ldd	r25, Y+20	; 0x14
     6ea:	0e 94 19 08 	call	0x1032	; 0x1032 <__gesf2>
     6ee:	18 16       	cp	r1, r24
     6f0:	4c f5       	brge	.+82     	; 0x744 <__stack+0x2e5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	40 e2       	ldi	r20, 0x20	; 32
     6f8:	51 e4       	ldi	r21, 0x41	; 65
     6fa:	6d 85       	ldd	r22, Y+13	; 0x0d
     6fc:	7e 85       	ldd	r23, Y+14	; 0x0e
     6fe:	8f 85       	ldd	r24, Y+15	; 0x0f
     700:	98 89       	ldd	r25, Y+16	; 0x10
     702:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     706:	dc 01       	movw	r26, r24
     708:	cb 01       	movw	r24, r22
     70a:	bc 01       	movw	r22, r24
     70c:	cd 01       	movw	r24, r26
     70e:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     712:	dc 01       	movw	r26, r24
     714:	cb 01       	movw	r24, r22
     716:	9e 8b       	std	Y+22, r25	; 0x16
     718:	8d 8b       	std	Y+21, r24	; 0x15
     71a:	0f c0       	rjmp	.+30     	; 0x73a <__stack+0x2db>
     71c:	89 e1       	ldi	r24, 0x19	; 25
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	98 8f       	std	Y+24, r25	; 0x18
     722:	8f 8b       	std	Y+23, r24	; 0x17
     724:	8f 89       	ldd	r24, Y+23	; 0x17
     726:	98 8d       	ldd	r25, Y+24	; 0x18
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <__stack+0x2c9>
     72c:	98 8f       	std	Y+24, r25	; 0x18
     72e:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     730:	8d 89       	ldd	r24, Y+21	; 0x15
     732:	9e 89       	ldd	r25, Y+22	; 0x16
     734:	01 97       	sbiw	r24, 0x01	; 1
     736:	9e 8b       	std	Y+22, r25	; 0x16
     738:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73a:	8d 89       	ldd	r24, Y+21	; 0x15
     73c:	9e 89       	ldd	r25, Y+22	; 0x16
     73e:	89 2b       	or	r24, r25
     740:	69 f7       	brne	.-38     	; 0x71c <__stack+0x2bd>
	_delay_ms(1);					/*for write timing diagram*/
}
     742:	14 c0       	rjmp	.+40     	; 0x76c <__stack+0x30d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     744:	69 89       	ldd	r22, Y+17	; 0x11
     746:	7a 89       	ldd	r23, Y+18	; 0x12
     748:	8b 89       	ldd	r24, Y+19	; 0x13
     74a:	9c 89       	ldd	r25, Y+20	; 0x14
     74c:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     750:	dc 01       	movw	r26, r24
     752:	cb 01       	movw	r24, r22
     754:	9e 8b       	std	Y+22, r25	; 0x16
     756:	8d 8b       	std	Y+21, r24	; 0x15
     758:	8d 89       	ldd	r24, Y+21	; 0x15
     75a:	9e 89       	ldd	r25, Y+22	; 0x16
     75c:	9a 8f       	std	Y+26, r25	; 0x1a
     75e:	89 8f       	std	Y+25, r24	; 0x19
     760:	89 8d       	ldd	r24, Y+25	; 0x19
     762:	9a 8d       	ldd	r25, Y+26	; 0x1a
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <__stack+0x305>
     768:	9a 8f       	std	Y+26, r25	; 0x1a
     76a:	89 8f       	std	Y+25, r24	; 0x19
     76c:	00 00       	nop
     76e:	e9 96       	adiw	r28, 0x39	; 57
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 a_data)
{
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	e9 97       	sbiw	r28, 0x39	; 57
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	de bf       	out	0x3e, r29	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	cd bf       	out	0x3d, r28	; 61
     794:	89 af       	std	Y+57, r24	; 0x39
	/*function definition*/
	SET_BIT(LCD_CTRL_OUT , RS);	/*for command mode*/
     796:	82 e3       	ldi	r24, 0x32	; 50
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	22 e3       	ldi	r18, 0x32	; 50
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	f9 01       	movw	r30, r18
     7a0:	20 81       	ld	r18, Z
     7a2:	20 61       	ori	r18, 0x10	; 16
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_OUT , RW);	/*for write mode*/
     7a8:	82 e3       	ldi	r24, 0x32	; 50
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	22 e3       	ldi	r18, 0x32	; 50
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	f9 01       	movw	r30, r18
     7b2:	20 81       	ld	r18, Z
     7b4:	2f 7d       	andi	r18, 0xDF	; 223
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	a0 e8       	ldi	r26, 0x80	; 128
     7c0:	bf e3       	ldi	r27, 0x3F	; 63
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	9a 83       	std	Y+2, r25	; 0x02
     7c6:	ab 83       	std	Y+3, r26	; 0x03
     7c8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	4a e7       	ldi	r20, 0x7A	; 122
     7d0:	53 e4       	ldi	r21, 0x43	; 67
     7d2:	69 81       	ldd	r22, Y+1	; 0x01
     7d4:	7a 81       	ldd	r23, Y+2	; 0x02
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	9c 81       	ldd	r25, Y+4	; 0x04
     7da:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     7de:	dc 01       	movw	r26, r24
     7e0:	cb 01       	movw	r24, r22
     7e2:	8f a7       	std	Y+47, r24	; 0x2f
     7e4:	98 ab       	std	Y+48, r25	; 0x30
     7e6:	a9 ab       	std	Y+49, r26	; 0x31
     7e8:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	40 e8       	ldi	r20, 0x80	; 128
     7f0:	5f e3       	ldi	r21, 0x3F	; 63
     7f2:	6f a5       	ldd	r22, Y+47	; 0x2f
     7f4:	78 a9       	ldd	r23, Y+48	; 0x30
     7f6:	89 a9       	ldd	r24, Y+49	; 0x31
     7f8:	9a a9       	ldd	r25, Y+50	; 0x32
     7fa:	0e 94 ba 06 	call	0xd74	; 0xd74 <__cmpsf2>
     7fe:	88 23       	and	r24, r24
     800:	2c f4       	brge	.+10     	; 0x80c <LCD_displayCharacter+0x8c>
		__ticks = 1;
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	9c ab       	std	Y+52, r25	; 0x34
     808:	8b ab       	std	Y+51, r24	; 0x33
     80a:	3f c0       	rjmp	.+126    	; 0x88a <LCD_displayCharacter+0x10a>
	else if (__tmp > 65535)
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	3f ef       	ldi	r19, 0xFF	; 255
     810:	4f e7       	ldi	r20, 0x7F	; 127
     812:	57 e4       	ldi	r21, 0x47	; 71
     814:	6f a5       	ldd	r22, Y+47	; 0x2f
     816:	78 a9       	ldd	r23, Y+48	; 0x30
     818:	89 a9       	ldd	r24, Y+49	; 0x31
     81a:	9a a9       	ldd	r25, Y+50	; 0x32
     81c:	0e 94 19 08 	call	0x1032	; 0x1032 <__gesf2>
     820:	18 16       	cp	r1, r24
     822:	4c f5       	brge	.+82     	; 0x876 <LCD_displayCharacter+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	40 e2       	ldi	r20, 0x20	; 32
     82a:	51 e4       	ldi	r21, 0x41	; 65
     82c:	69 81       	ldd	r22, Y+1	; 0x01
     82e:	7a 81       	ldd	r23, Y+2	; 0x02
     830:	8b 81       	ldd	r24, Y+3	; 0x03
     832:	9c 81       	ldd	r25, Y+4	; 0x04
     834:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	bc 01       	movw	r22, r24
     83e:	cd 01       	movw	r24, r26
     840:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     844:	dc 01       	movw	r26, r24
     846:	cb 01       	movw	r24, r22
     848:	9c ab       	std	Y+52, r25	; 0x34
     84a:	8b ab       	std	Y+51, r24	; 0x33
     84c:	0f c0       	rjmp	.+30     	; 0x86c <LCD_displayCharacter+0xec>
     84e:	89 e1       	ldi	r24, 0x19	; 25
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	9e ab       	std	Y+54, r25	; 0x36
     854:	8d ab       	std	Y+53, r24	; 0x35
     856:	8d a9       	ldd	r24, Y+53	; 0x35
     858:	9e a9       	ldd	r25, Y+54	; 0x36
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <LCD_displayCharacter+0xda>
     85e:	9e ab       	std	Y+54, r25	; 0x36
     860:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     862:	8b a9       	ldd	r24, Y+51	; 0x33
     864:	9c a9       	ldd	r25, Y+52	; 0x34
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	9c ab       	std	Y+52, r25	; 0x34
     86a:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     86c:	8b a9       	ldd	r24, Y+51	; 0x33
     86e:	9c a9       	ldd	r25, Y+52	; 0x34
     870:	89 2b       	or	r24, r25
     872:	69 f7       	brne	.-38     	; 0x84e <LCD_displayCharacter+0xce>
     874:	14 c0       	rjmp	.+40     	; 0x89e <LCD_displayCharacter+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     876:	6f a5       	ldd	r22, Y+47	; 0x2f
     878:	78 a9       	ldd	r23, Y+48	; 0x30
     87a:	89 a9       	ldd	r24, Y+49	; 0x31
     87c:	9a a9       	ldd	r25, Y+50	; 0x32
     87e:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     882:	dc 01       	movw	r26, r24
     884:	cb 01       	movw	r24, r22
     886:	9c ab       	std	Y+52, r25	; 0x34
     888:	8b ab       	std	Y+51, r24	; 0x33
     88a:	8b a9       	ldd	r24, Y+51	; 0x33
     88c:	9c a9       	ldd	r25, Y+52	; 0x34
     88e:	98 af       	std	Y+56, r25	; 0x38
     890:	8f ab       	std	Y+55, r24	; 0x37
     892:	8f a9       	ldd	r24, Y+55	; 0x37
     894:	98 ad       	ldd	r25, Y+56	; 0x38
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <LCD_displayCharacter+0x116>
     89a:	98 af       	std	Y+56, r25	; 0x38
     89c:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);					/*for write timing diagram*/
	SET_BIT(LCD_CTRL_OUT , E);		/*to enable the lcd*/
     89e:	82 e3       	ldi	r24, 0x32	; 50
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	22 e3       	ldi	r18, 0x32	; 50
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	f9 01       	movw	r30, r18
     8a8:	20 81       	ld	r18, Z
     8aa:	20 64       	ori	r18, 0x40	; 64
     8ac:	fc 01       	movw	r30, r24
     8ae:	20 83       	st	Z, r18
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e8       	ldi	r26, 0x80	; 128
     8b6:	bf e3       	ldi	r27, 0x3F	; 63
     8b8:	8d 83       	std	Y+5, r24	; 0x05
     8ba:	9e 83       	std	Y+6, r25	; 0x06
     8bc:	af 83       	std	Y+7, r26	; 0x07
     8be:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	4a e7       	ldi	r20, 0x7A	; 122
     8c6:	53 e4       	ldi	r21, 0x43	; 67
     8c8:	6d 81       	ldd	r22, Y+5	; 0x05
     8ca:	7e 81       	ldd	r23, Y+6	; 0x06
     8cc:	8f 81       	ldd	r24, Y+7	; 0x07
     8ce:	98 85       	ldd	r25, Y+8	; 0x08
     8d0:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     8d4:	dc 01       	movw	r26, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	8d a3       	std	Y+37, r24	; 0x25
     8da:	9e a3       	std	Y+38, r25	; 0x26
     8dc:	af a3       	std	Y+39, r26	; 0x27
     8de:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e8       	ldi	r20, 0x80	; 128
     8e6:	5f e3       	ldi	r21, 0x3F	; 63
     8e8:	6d a1       	ldd	r22, Y+37	; 0x25
     8ea:	7e a1       	ldd	r23, Y+38	; 0x26
     8ec:	8f a1       	ldd	r24, Y+39	; 0x27
     8ee:	98 a5       	ldd	r25, Y+40	; 0x28
     8f0:	0e 94 ba 06 	call	0xd74	; 0xd74 <__cmpsf2>
     8f4:	88 23       	and	r24, r24
     8f6:	2c f4       	brge	.+10     	; 0x902 <LCD_displayCharacter+0x182>
		__ticks = 1;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	9a a7       	std	Y+42, r25	; 0x2a
     8fe:	89 a7       	std	Y+41, r24	; 0x29
     900:	3f c0       	rjmp	.+126    	; 0x980 <LCD_displayCharacter+0x200>
	else if (__tmp > 65535)
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	3f ef       	ldi	r19, 0xFF	; 255
     906:	4f e7       	ldi	r20, 0x7F	; 127
     908:	57 e4       	ldi	r21, 0x47	; 71
     90a:	6d a1       	ldd	r22, Y+37	; 0x25
     90c:	7e a1       	ldd	r23, Y+38	; 0x26
     90e:	8f a1       	ldd	r24, Y+39	; 0x27
     910:	98 a5       	ldd	r25, Y+40	; 0x28
     912:	0e 94 19 08 	call	0x1032	; 0x1032 <__gesf2>
     916:	18 16       	cp	r1, r24
     918:	4c f5       	brge	.+82     	; 0x96c <LCD_displayCharacter+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e2       	ldi	r20, 0x20	; 32
     920:	51 e4       	ldi	r21, 0x41	; 65
     922:	6d 81       	ldd	r22, Y+5	; 0x05
     924:	7e 81       	ldd	r23, Y+6	; 0x06
     926:	8f 81       	ldd	r24, Y+7	; 0x07
     928:	98 85       	ldd	r25, Y+8	; 0x08
     92a:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     92e:	dc 01       	movw	r26, r24
     930:	cb 01       	movw	r24, r22
     932:	bc 01       	movw	r22, r24
     934:	cd 01       	movw	r24, r26
     936:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	9a a7       	std	Y+42, r25	; 0x2a
     940:	89 a7       	std	Y+41, r24	; 0x29
     942:	0f c0       	rjmp	.+30     	; 0x962 <LCD_displayCharacter+0x1e2>
     944:	89 e1       	ldi	r24, 0x19	; 25
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	9c a7       	std	Y+44, r25	; 0x2c
     94a:	8b a7       	std	Y+43, r24	; 0x2b
     94c:	8b a5       	ldd	r24, Y+43	; 0x2b
     94e:	9c a5       	ldd	r25, Y+44	; 0x2c
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	f1 f7       	brne	.-4      	; 0x950 <LCD_displayCharacter+0x1d0>
     954:	9c a7       	std	Y+44, r25	; 0x2c
     956:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     958:	89 a5       	ldd	r24, Y+41	; 0x29
     95a:	9a a5       	ldd	r25, Y+42	; 0x2a
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	9a a7       	std	Y+42, r25	; 0x2a
     960:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     962:	89 a5       	ldd	r24, Y+41	; 0x29
     964:	9a a5       	ldd	r25, Y+42	; 0x2a
     966:	89 2b       	or	r24, r25
     968:	69 f7       	brne	.-38     	; 0x944 <LCD_displayCharacter+0x1c4>
     96a:	14 c0       	rjmp	.+40     	; 0x994 <LCD_displayCharacter+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     96c:	6d a1       	ldd	r22, Y+37	; 0x25
     96e:	7e a1       	ldd	r23, Y+38	; 0x26
     970:	8f a1       	ldd	r24, Y+39	; 0x27
     972:	98 a5       	ldd	r25, Y+40	; 0x28
     974:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	9a a7       	std	Y+42, r25	; 0x2a
     97e:	89 a7       	std	Y+41, r24	; 0x29
     980:	89 a5       	ldd	r24, Y+41	; 0x29
     982:	9a a5       	ldd	r25, Y+42	; 0x2a
     984:	9e a7       	std	Y+46, r25	; 0x2e
     986:	8d a7       	std	Y+45, r24	; 0x2d
     988:	8d a5       	ldd	r24, Y+45	; 0x2d
     98a:	9e a5       	ldd	r25, Y+46	; 0x2e
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <LCD_displayCharacter+0x20c>
     990:	9e a7       	std	Y+46, r25	; 0x2e
     992:	8d a7       	std	Y+45, r24	; 0x2d
	PUT_UPPER_IN_UPPER(LCD_DATA_OUT , a_data);
	#else
	PUT_UPPER_IN_LOWER(LCD_DATA_OUT , a_data);
	#endif
	#else
	LCD_DATA_OUT = a_data;			/*out the command variable*/
     994:	85 e3       	ldi	r24, 0x35	; 53
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	29 ad       	ldd	r18, Y+57	; 0x39
     99a:	fc 01       	movw	r30, r24
     99c:	20 83       	st	Z, r18
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e8       	ldi	r26, 0x80	; 128
     9a4:	bf e3       	ldi	r27, 0x3F	; 63
     9a6:	89 87       	std	Y+9, r24	; 0x09
     9a8:	9a 87       	std	Y+10, r25	; 0x0a
     9aa:	ab 87       	std	Y+11, r26	; 0x0b
     9ac:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	4a e7       	ldi	r20, 0x7A	; 122
     9b4:	53 e4       	ldi	r21, 0x43	; 67
     9b6:	69 85       	ldd	r22, Y+9	; 0x09
     9b8:	7a 85       	ldd	r23, Y+10	; 0x0a
     9ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     9bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     9be:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     9c2:	dc 01       	movw	r26, r24
     9c4:	cb 01       	movw	r24, r22
     9c6:	8b 8f       	std	Y+27, r24	; 0x1b
     9c8:	9c 8f       	std	Y+28, r25	; 0x1c
     9ca:	ad 8f       	std	Y+29, r26	; 0x1d
     9cc:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	40 e8       	ldi	r20, 0x80	; 128
     9d4:	5f e3       	ldi	r21, 0x3F	; 63
     9d6:	6b 8d       	ldd	r22, Y+27	; 0x1b
     9d8:	7c 8d       	ldd	r23, Y+28	; 0x1c
     9da:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9de:	0e 94 ba 06 	call	0xd74	; 0xd74 <__cmpsf2>
     9e2:	88 23       	and	r24, r24
     9e4:	2c f4       	brge	.+10     	; 0x9f0 <LCD_displayCharacter+0x270>
		__ticks = 1;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	98 a3       	std	Y+32, r25	; 0x20
     9ec:	8f 8f       	std	Y+31, r24	; 0x1f
     9ee:	3f c0       	rjmp	.+126    	; 0xa6e <LCD_displayCharacter+0x2ee>
	else if (__tmp > 65535)
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f e7       	ldi	r20, 0x7F	; 127
     9f6:	57 e4       	ldi	r21, 0x47	; 71
     9f8:	6b 8d       	ldd	r22, Y+27	; 0x1b
     9fa:	7c 8d       	ldd	r23, Y+28	; 0x1c
     9fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a00:	0e 94 19 08 	call	0x1032	; 0x1032 <__gesf2>
     a04:	18 16       	cp	r1, r24
     a06:	4c f5       	brge	.+82     	; 0xa5a <LCD_displayCharacter+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	40 e2       	ldi	r20, 0x20	; 32
     a0e:	51 e4       	ldi	r21, 0x41	; 65
     a10:	69 85       	ldd	r22, Y+9	; 0x09
     a12:	7a 85       	ldd	r23, Y+10	; 0x0a
     a14:	8b 85       	ldd	r24, Y+11	; 0x0b
     a16:	9c 85       	ldd	r25, Y+12	; 0x0c
     a18:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     a1c:	dc 01       	movw	r26, r24
     a1e:	cb 01       	movw	r24, r22
     a20:	bc 01       	movw	r22, r24
     a22:	cd 01       	movw	r24, r26
     a24:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     a28:	dc 01       	movw	r26, r24
     a2a:	cb 01       	movw	r24, r22
     a2c:	98 a3       	std	Y+32, r25	; 0x20
     a2e:	8f 8f       	std	Y+31, r24	; 0x1f
     a30:	0f c0       	rjmp	.+30     	; 0xa50 <LCD_displayCharacter+0x2d0>
     a32:	89 e1       	ldi	r24, 0x19	; 25
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	9a a3       	std	Y+34, r25	; 0x22
     a38:	89 a3       	std	Y+33, r24	; 0x21
     a3a:	89 a1       	ldd	r24, Y+33	; 0x21
     a3c:	9a a1       	ldd	r25, Y+34	; 0x22
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <LCD_displayCharacter+0x2be>
     a42:	9a a3       	std	Y+34, r25	; 0x22
     a44:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a46:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a48:	98 a1       	ldd	r25, Y+32	; 0x20
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	98 a3       	std	Y+32, r25	; 0x20
     a4e:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a50:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a52:	98 a1       	ldd	r25, Y+32	; 0x20
     a54:	89 2b       	or	r24, r25
     a56:	69 f7       	brne	.-38     	; 0xa32 <LCD_displayCharacter+0x2b2>
     a58:	14 c0       	rjmp	.+40     	; 0xa82 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a5a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a5c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a60:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a62:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     a66:	dc 01       	movw	r26, r24
     a68:	cb 01       	movw	r24, r22
     a6a:	98 a3       	std	Y+32, r25	; 0x20
     a6c:	8f 8f       	std	Y+31, r24	; 0x1f
     a6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a70:	98 a1       	ldd	r25, Y+32	; 0x20
     a72:	9c a3       	std	Y+36, r25	; 0x24
     a74:	8b a3       	std	Y+35, r24	; 0x23
     a76:	8b a1       	ldd	r24, Y+35	; 0x23
     a78:	9c a1       	ldd	r25, Y+36	; 0x24
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	f1 f7       	brne	.-4      	; 0xa7a <LCD_displayCharacter+0x2fa>
     a7e:	9c a3       	std	Y+36, r25	; 0x24
     a80:	8b a3       	std	Y+35, r24	; 0x23
	#endif
	_delay_ms(1);					/*for write timing diagram*/
	CLEAR_BIT(LCD_CTRL_OUT , E);	/*for write timing diagram*/
     a82:	82 e3       	ldi	r24, 0x32	; 50
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	22 e3       	ldi	r18, 0x32	; 50
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	f9 01       	movw	r30, r18
     a8c:	20 81       	ld	r18, Z
     a8e:	2f 7b       	andi	r18, 0xBF	; 191
     a90:	fc 01       	movw	r30, r24
     a92:	20 83       	st	Z, r18
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	a0 e8       	ldi	r26, 0x80	; 128
     a9a:	bf e3       	ldi	r27, 0x3F	; 63
     a9c:	8d 87       	std	Y+13, r24	; 0x0d
     a9e:	9e 87       	std	Y+14, r25	; 0x0e
     aa0:	af 87       	std	Y+15, r26	; 0x0f
     aa2:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	4a e7       	ldi	r20, 0x7A	; 122
     aaa:	53 e4       	ldi	r21, 0x43	; 67
     aac:	6d 85       	ldd	r22, Y+13	; 0x0d
     aae:	7e 85       	ldd	r23, Y+14	; 0x0e
     ab0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ab2:	98 89       	ldd	r25, Y+16	; 0x10
     ab4:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     ab8:	dc 01       	movw	r26, r24
     aba:	cb 01       	movw	r24, r22
     abc:	89 8b       	std	Y+17, r24	; 0x11
     abe:	9a 8b       	std	Y+18, r25	; 0x12
     ac0:	ab 8b       	std	Y+19, r26	; 0x13
     ac2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	40 e8       	ldi	r20, 0x80	; 128
     aca:	5f e3       	ldi	r21, 0x3F	; 63
     acc:	69 89       	ldd	r22, Y+17	; 0x11
     ace:	7a 89       	ldd	r23, Y+18	; 0x12
     ad0:	8b 89       	ldd	r24, Y+19	; 0x13
     ad2:	9c 89       	ldd	r25, Y+20	; 0x14
     ad4:	0e 94 ba 06 	call	0xd74	; 0xd74 <__cmpsf2>
     ad8:	88 23       	and	r24, r24
     ada:	2c f4       	brge	.+10     	; 0xae6 <LCD_displayCharacter+0x366>
		__ticks = 1;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	9e 8b       	std	Y+22, r25	; 0x16
     ae2:	8d 8b       	std	Y+21, r24	; 0x15
     ae4:	3f c0       	rjmp	.+126    	; 0xb64 <LCD_displayCharacter+0x3e4>
	else if (__tmp > 65535)
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	3f ef       	ldi	r19, 0xFF	; 255
     aea:	4f e7       	ldi	r20, 0x7F	; 127
     aec:	57 e4       	ldi	r21, 0x47	; 71
     aee:	69 89       	ldd	r22, Y+17	; 0x11
     af0:	7a 89       	ldd	r23, Y+18	; 0x12
     af2:	8b 89       	ldd	r24, Y+19	; 0x13
     af4:	9c 89       	ldd	r25, Y+20	; 0x14
     af6:	0e 94 19 08 	call	0x1032	; 0x1032 <__gesf2>
     afa:	18 16       	cp	r1, r24
     afc:	4c f5       	brge	.+82     	; 0xb50 <LCD_displayCharacter+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e2       	ldi	r20, 0x20	; 32
     b04:	51 e4       	ldi	r21, 0x41	; 65
     b06:	6d 85       	ldd	r22, Y+13	; 0x0d
     b08:	7e 85       	ldd	r23, Y+14	; 0x0e
     b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b0c:	98 89       	ldd	r25, Y+16	; 0x10
     b0e:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     b12:	dc 01       	movw	r26, r24
     b14:	cb 01       	movw	r24, r22
     b16:	bc 01       	movw	r22, r24
     b18:	cd 01       	movw	r24, r26
     b1a:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	9e 8b       	std	Y+22, r25	; 0x16
     b24:	8d 8b       	std	Y+21, r24	; 0x15
     b26:	0f c0       	rjmp	.+30     	; 0xb46 <LCD_displayCharacter+0x3c6>
     b28:	89 e1       	ldi	r24, 0x19	; 25
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	98 8f       	std	Y+24, r25	; 0x18
     b2e:	8f 8b       	std	Y+23, r24	; 0x17
     b30:	8f 89       	ldd	r24, Y+23	; 0x17
     b32:	98 8d       	ldd	r25, Y+24	; 0x18
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	f1 f7       	brne	.-4      	; 0xb34 <LCD_displayCharacter+0x3b4>
     b38:	98 8f       	std	Y+24, r25	; 0x18
     b3a:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b3c:	8d 89       	ldd	r24, Y+21	; 0x15
     b3e:	9e 89       	ldd	r25, Y+22	; 0x16
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	9e 8b       	std	Y+22, r25	; 0x16
     b44:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b46:	8d 89       	ldd	r24, Y+21	; 0x15
     b48:	9e 89       	ldd	r25, Y+22	; 0x16
     b4a:	89 2b       	or	r24, r25
     b4c:	69 f7       	brne	.-38     	; 0xb28 <LCD_displayCharacter+0x3a8>
	_delay_ms(1);					/*for write timing diagram*/
}
     b4e:	14 c0       	rjmp	.+40     	; 0xb78 <LCD_displayCharacter+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b50:	69 89       	ldd	r22, Y+17	; 0x11
     b52:	7a 89       	ldd	r23, Y+18	; 0x12
     b54:	8b 89       	ldd	r24, Y+19	; 0x13
     b56:	9c 89       	ldd	r25, Y+20	; 0x14
     b58:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	9e 8b       	std	Y+22, r25	; 0x16
     b62:	8d 8b       	std	Y+21, r24	; 0x15
     b64:	8d 89       	ldd	r24, Y+21	; 0x15
     b66:	9e 89       	ldd	r25, Y+22	; 0x16
     b68:	9a 8f       	std	Y+26, r25	; 0x1a
     b6a:	89 8f       	std	Y+25, r24	; 0x19
     b6c:	89 8d       	ldd	r24, Y+25	; 0x19
     b6e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <LCD_displayCharacter+0x3f0>
     b74:	9a 8f       	std	Y+26, r25	; 0x1a
     b76:	89 8f       	std	Y+25, r24	; 0x19
     b78:	00 00       	nop
     b7a:	e9 96       	adiw	r28, 0x39	; 57
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	de bf       	out	0x3e, r29	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	cd bf       	out	0x3d, r28	; 61
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <LCD_displayString>:

void LCD_displayString(uint8 * str)
{
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	00 d0       	rcall	.+0      	; 0xb92 <LCD_displayString+0x6>
     b92:	1f 92       	push	r1
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	9b 83       	std	Y+3, r25	; 0x03
     b9a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
     b9c:	19 82       	std	Y+1, r1	; 0x01
	while(str[count] != NULL)
     b9e:	0e c0       	rjmp	.+28     	; 0xbbc <LCD_displayString+0x30>
	{
		LCD_displayCharacter(str[count]);
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	2a 81       	ldd	r18, Y+2	; 0x02
     ba8:	3b 81       	ldd	r19, Y+3	; 0x03
     baa:	82 0f       	add	r24, r18
     bac:	93 1f       	adc	r25, r19
     bae:	fc 01       	movw	r30, r24
     bb0:	80 81       	ld	r24, Z
     bb2:	0e 94 c0 03 	call	0x780	; 0x780 <LCD_displayCharacter>
		count++;
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	8f 5f       	subi	r24, 0xFF	; 255
     bba:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(uint8 * str)
{
	uint8 count = 0;
	while(str[count] != NULL)
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	88 2f       	mov	r24, r24
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	2a 81       	ldd	r18, Y+2	; 0x02
     bc4:	3b 81       	ldd	r19, Y+3	; 0x03
     bc6:	82 0f       	add	r24, r18
     bc8:	93 1f       	adc	r25, r19
     bca:	fc 01       	movw	r30, r24
     bcc:	80 81       	ld	r24, Z
     bce:	88 2f       	mov	r24, r24
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	89 2b       	or	r24, r25
     bd4:	29 f7       	brne	.-54     	; 0xba0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[count]);
		count++;
	}
}
     bd6:	00 00       	nop
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	08 95       	ret

00000be4 <LCD_goToColRow>:

void LCD_goToColRow(uint8 row , uint8 col)
{
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	00 d0       	rcall	.+0      	; 0xbea <LCD_goToColRow+0x6>
     bea:	1f 92       	push	r1
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
     bf0:	8a 83       	std	Y+2, r24	; 0x02
     bf2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	88 2f       	mov	r24, r24
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	91 05       	cpc	r25, r1
     bfe:	79 f0       	breq	.+30     	; 0xc1e <LCD_goToColRow+0x3a>
     c00:	82 30       	cpi	r24, 0x02	; 2
     c02:	91 05       	cpc	r25, r1
     c04:	1c f4       	brge	.+6      	; 0xc0c <LCD_goToColRow+0x28>
     c06:	89 2b       	or	r24, r25
     c08:	39 f0       	breq	.+14     	; 0xc18 <LCD_goToColRow+0x34>
     c0a:	15 c0       	rjmp	.+42     	; 0xc36 <LCD_goToColRow+0x52>
     c0c:	82 30       	cpi	r24, 0x02	; 2
     c0e:	91 05       	cpc	r25, r1
     c10:	51 f0       	breq	.+20     	; 0xc26 <LCD_goToColRow+0x42>
     c12:	03 97       	sbiw	r24, 0x03	; 3
     c14:	61 f0       	breq	.+24     	; 0xc2e <LCD_goToColRow+0x4a>
     c16:	0f c0       	rjmp	.+30     	; 0xc36 <LCD_goToColRow+0x52>
	{
	case 0 :
		address = col;
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	89 83       	std	Y+1, r24	; 0x01
		break;
     c1c:	0c c0       	rjmp	.+24     	; 0xc36 <LCD_goToColRow+0x52>
	case 1 :
		address = 0x40 + col;
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	80 5c       	subi	r24, 0xC0	; 192
     c22:	89 83       	std	Y+1, r24	; 0x01
		break;
     c24:	08 c0       	rjmp	.+16     	; 0xc36 <LCD_goToColRow+0x52>
	case 2 :
		address = 0x10 + col;
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	80 5f       	subi	r24, 0xF0	; 240
     c2a:	89 83       	std	Y+1, r24	; 0x01
		break;
     c2c:	04 c0       	rjmp	.+8      	; 0xc36 <LCD_goToColRow+0x52>
	case 3 :
		address = 0x50 + col;
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	80 5b       	subi	r24, 0xB0	; 176
     c32:	89 83       	std	Y+1, r24	; 0x01
		break;
     c34:	00 00       	nop
	}
	LCD_sendCommand(address | 0x80);
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	80 68       	ori	r24, 0x80	; 128
     c3a:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_sendCommand>
}
     c3e:	00 00       	nop
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <LCD_displayInt>:
void LCD_displayInt(int a_number)
{
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	62 97       	sbiw	r28, 0x12	; 18
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	9a 8b       	std	Y+18, r25	; 0x12
     c62:	89 8b       	std	Y+17, r24	; 0x11
	char a_ascii[16];
	itoa(a_number , a_ascii , 10);
     c64:	89 89       	ldd	r24, Y+17	; 0x11
     c66:	9a 89       	ldd	r25, Y+18	; 0x12
     c68:	4a e0       	ldi	r20, 0x0A	; 10
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	9e 01       	movw	r18, r28
     c6e:	2f 5f       	subi	r18, 0xFF	; 255
     c70:	3f 4f       	sbci	r19, 0xFF	; 255
     c72:	b9 01       	movw	r22, r18
     c74:	0e 94 8b 08 	call	0x1116	; 0x1116 <itoa>
	LCD_displayString(a_ascii);
     c78:	ce 01       	movw	r24, r28
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_displayString>
}
     c80:	00 00       	nop
     c82:	62 96       	adiw	r28, 0x12	; 18
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <LCD_displayOnColRow>:

void LCD_displayOnColRow(uint8 row , uint8 col , const uint8 * str)
{
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	00 d0       	rcall	.+0      	; 0xc9a <LCD_displayOnColRow+0x6>
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <LCD_displayOnColRow+0x8>
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	89 83       	std	Y+1, r24	; 0x01
     ca2:	6a 83       	std	Y+2, r22	; 0x02
     ca4:	5c 83       	std	Y+4, r21	; 0x04
     ca6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToColRow(row , col);
     ca8:	6a 81       	ldd	r22, Y+2	; 0x02
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <LCD_goToColRow>
	LCD_displayString(str);
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_displayString>
}
     cb8:	00 00       	nop
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN);
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_sendCommand>
}
     cd6:	00 00       	nop
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	08 95       	ret

00000cde <THERMAL_conversion>:
 */

#include"thermal_sensor.h"
volatile double Temp;
void THERMAL_conversion(void)
{
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
	Temp = current_reading;
     ce6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <current_reading>
     cea:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <current_reading+0x1>
     cee:	cc 01       	movw	r24, r24
     cf0:	a0 e0       	ldi	r26, 0x00	; 0
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	bc 01       	movw	r22, r24
     cf6:	cd 01       	movw	r24, r26
     cf8:	0e 94 67 07 	call	0xece	; 0xece <__floatunsisf>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Temp>
     d04:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <Temp+0x1>
     d08:	a0 93 76 00 	sts	0x0076, r26	; 0x800076 <Temp+0x2>
     d0c:	b0 93 77 00 	sts	0x0077, r27	; 0x800077 <Temp+0x3>
	Temp =((Temp * 2.56)/1024.0)*100;
     d10:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Temp>
     d14:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Temp+0x1>
     d18:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <Temp+0x2>
     d1c:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <Temp+0x3>
     d20:	2a e0       	ldi	r18, 0x0A	; 10
     d22:	37 ed       	ldi	r19, 0xD7	; 215
     d24:	43 e2       	ldi	r20, 0x23	; 35
     d26:	50 e4       	ldi	r21, 0x40	; 64
     d28:	bc 01       	movw	r22, r24
     d2a:	cd 01       	movw	r24, r26
     d2c:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e8       	ldi	r20, 0x80	; 128
     d3a:	54 e4       	ldi	r21, 0x44	; 68
     d3c:	bc 01       	movw	r22, r24
     d3e:	cd 01       	movw	r24, r26
     d40:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__divsf3>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	48 ec       	ldi	r20, 0xC8	; 200
     d4e:	52 e4       	ldi	r21, 0x42	; 66
     d50:	bc 01       	movw	r22, r24
     d52:	cd 01       	movw	r24, r26
     d54:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Temp>
     d60:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <Temp+0x1>
     d64:	a0 93 76 00 	sts	0x0076, r26	; 0x800076 <Temp+0x2>
     d68:	b0 93 77 00 	sts	0x0077, r27	; 0x800077 <Temp+0x3>
}
     d6c:	00 00       	nop
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	08 95       	ret

00000d74 <__cmpsf2>:
     d74:	0e 94 a4 07 	call	0xf48	; 0xf48 <__fp_cmp>
     d78:	08 f4       	brcc	.+2      	; 0xd7c <__cmpsf2+0x8>
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	08 95       	ret

00000d7e <__divsf3>:
     d7e:	0e 94 d3 06 	call	0xda6	; 0xda6 <__divsf3x>
     d82:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <__fp_round>
     d86:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__fp_pscB>
     d8a:	58 f0       	brcs	.+22     	; 0xda2 <__divsf3+0x24>
     d8c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__fp_pscA>
     d90:	40 f0       	brcs	.+16     	; 0xda2 <__divsf3+0x24>
     d92:	29 f4       	brne	.+10     	; 0xd9e <__divsf3+0x20>
     d94:	5f 3f       	cpi	r21, 0xFF	; 255
     d96:	29 f0       	breq	.+10     	; 0xda2 <__divsf3+0x24>
     d98:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__fp_inf>
     d9c:	51 11       	cpse	r21, r1
     d9e:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__fp_szero>
     da2:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__fp_nan>

00000da6 <__divsf3x>:
     da6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__fp_split3>
     daa:	68 f3       	brcs	.-38     	; 0xd86 <__divsf3+0x8>

00000dac <__divsf3_pse>:
     dac:	99 23       	and	r25, r25
     dae:	b1 f3       	breq	.-20     	; 0xd9c <__divsf3+0x1e>
     db0:	55 23       	and	r21, r21
     db2:	91 f3       	breq	.-28     	; 0xd98 <__divsf3+0x1a>
     db4:	95 1b       	sub	r25, r21
     db6:	55 0b       	sbc	r21, r21
     db8:	bb 27       	eor	r27, r27
     dba:	aa 27       	eor	r26, r26
     dbc:	62 17       	cp	r22, r18
     dbe:	73 07       	cpc	r23, r19
     dc0:	84 07       	cpc	r24, r20
     dc2:	38 f0       	brcs	.+14     	; 0xdd2 <__divsf3_pse+0x26>
     dc4:	9f 5f       	subi	r25, 0xFF	; 255
     dc6:	5f 4f       	sbci	r21, 0xFF	; 255
     dc8:	22 0f       	add	r18, r18
     dca:	33 1f       	adc	r19, r19
     dcc:	44 1f       	adc	r20, r20
     dce:	aa 1f       	adc	r26, r26
     dd0:	a9 f3       	breq	.-22     	; 0xdbc <__divsf3_pse+0x10>
     dd2:	35 d0       	rcall	.+106    	; 0xe3e <__divsf3_pse+0x92>
     dd4:	0e 2e       	mov	r0, r30
     dd6:	3a f0       	brmi	.+14     	; 0xde6 <__divsf3_pse+0x3a>
     dd8:	e0 e8       	ldi	r30, 0x80	; 128
     dda:	32 d0       	rcall	.+100    	; 0xe40 <__divsf3_pse+0x94>
     ddc:	91 50       	subi	r25, 0x01	; 1
     dde:	50 40       	sbci	r21, 0x00	; 0
     de0:	e6 95       	lsr	r30
     de2:	00 1c       	adc	r0, r0
     de4:	ca f7       	brpl	.-14     	; 0xdd8 <__divsf3_pse+0x2c>
     de6:	2b d0       	rcall	.+86     	; 0xe3e <__divsf3_pse+0x92>
     de8:	fe 2f       	mov	r31, r30
     dea:	29 d0       	rcall	.+82     	; 0xe3e <__divsf3_pse+0x92>
     dec:	66 0f       	add	r22, r22
     dee:	77 1f       	adc	r23, r23
     df0:	88 1f       	adc	r24, r24
     df2:	bb 1f       	adc	r27, r27
     df4:	26 17       	cp	r18, r22
     df6:	37 07       	cpc	r19, r23
     df8:	48 07       	cpc	r20, r24
     dfa:	ab 07       	cpc	r26, r27
     dfc:	b0 e8       	ldi	r27, 0x80	; 128
     dfe:	09 f0       	breq	.+2      	; 0xe02 <__divsf3_pse+0x56>
     e00:	bb 0b       	sbc	r27, r27
     e02:	80 2d       	mov	r24, r0
     e04:	bf 01       	movw	r22, r30
     e06:	ff 27       	eor	r31, r31
     e08:	93 58       	subi	r25, 0x83	; 131
     e0a:	5f 4f       	sbci	r21, 0xFF	; 255
     e0c:	3a f0       	brmi	.+14     	; 0xe1c <__divsf3_pse+0x70>
     e0e:	9e 3f       	cpi	r25, 0xFE	; 254
     e10:	51 05       	cpc	r21, r1
     e12:	78 f0       	brcs	.+30     	; 0xe32 <__divsf3_pse+0x86>
     e14:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__fp_inf>
     e18:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__fp_szero>
     e1c:	5f 3f       	cpi	r21, 0xFF	; 255
     e1e:	e4 f3       	brlt	.-8      	; 0xe18 <__divsf3_pse+0x6c>
     e20:	98 3e       	cpi	r25, 0xE8	; 232
     e22:	d4 f3       	brlt	.-12     	; 0xe18 <__divsf3_pse+0x6c>
     e24:	86 95       	lsr	r24
     e26:	77 95       	ror	r23
     e28:	67 95       	ror	r22
     e2a:	b7 95       	ror	r27
     e2c:	f7 95       	ror	r31
     e2e:	9f 5f       	subi	r25, 0xFF	; 255
     e30:	c9 f7       	brne	.-14     	; 0xe24 <__divsf3_pse+0x78>
     e32:	88 0f       	add	r24, r24
     e34:	91 1d       	adc	r25, r1
     e36:	96 95       	lsr	r25
     e38:	87 95       	ror	r24
     e3a:	97 f9       	bld	r25, 7
     e3c:	08 95       	ret
     e3e:	e1 e0       	ldi	r30, 0x01	; 1
     e40:	66 0f       	add	r22, r22
     e42:	77 1f       	adc	r23, r23
     e44:	88 1f       	adc	r24, r24
     e46:	bb 1f       	adc	r27, r27
     e48:	62 17       	cp	r22, r18
     e4a:	73 07       	cpc	r23, r19
     e4c:	84 07       	cpc	r24, r20
     e4e:	ba 07       	cpc	r27, r26
     e50:	20 f0       	brcs	.+8      	; 0xe5a <__divsf3_pse+0xae>
     e52:	62 1b       	sub	r22, r18
     e54:	73 0b       	sbc	r23, r19
     e56:	84 0b       	sbc	r24, r20
     e58:	ba 0b       	sbc	r27, r26
     e5a:	ee 1f       	adc	r30, r30
     e5c:	88 f7       	brcc	.-30     	; 0xe40 <__divsf3_pse+0x94>
     e5e:	e0 95       	com	r30
     e60:	08 95       	ret

00000e62 <__fixsfsi>:
     e62:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixunssfsi>
     e66:	68 94       	set
     e68:	b1 11       	cpse	r27, r1
     e6a:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__fp_szero>
     e6e:	08 95       	ret

00000e70 <__fixunssfsi>:
     e70:	0e 94 f8 07 	call	0xff0	; 0xff0 <__fp_splitA>
     e74:	88 f0       	brcs	.+34     	; 0xe98 <__fixunssfsi+0x28>
     e76:	9f 57       	subi	r25, 0x7F	; 127
     e78:	98 f0       	brcs	.+38     	; 0xea0 <__fixunssfsi+0x30>
     e7a:	b9 2f       	mov	r27, r25
     e7c:	99 27       	eor	r25, r25
     e7e:	b7 51       	subi	r27, 0x17	; 23
     e80:	b0 f0       	brcs	.+44     	; 0xeae <__fixunssfsi+0x3e>
     e82:	e1 f0       	breq	.+56     	; 0xebc <__fixunssfsi+0x4c>
     e84:	66 0f       	add	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	88 1f       	adc	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	1a f0       	brmi	.+6      	; 0xe94 <__fixunssfsi+0x24>
     e8e:	ba 95       	dec	r27
     e90:	c9 f7       	brne	.-14     	; 0xe84 <__fixunssfsi+0x14>
     e92:	14 c0       	rjmp	.+40     	; 0xebc <__fixunssfsi+0x4c>
     e94:	b1 30       	cpi	r27, 0x01	; 1
     e96:	91 f0       	breq	.+36     	; 0xebc <__fixunssfsi+0x4c>
     e98:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_zero>
     e9c:	b1 e0       	ldi	r27, 0x01	; 1
     e9e:	08 95       	ret
     ea0:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__fp_zero>
     ea4:	67 2f       	mov	r22, r23
     ea6:	78 2f       	mov	r23, r24
     ea8:	88 27       	eor	r24, r24
     eaa:	b8 5f       	subi	r27, 0xF8	; 248
     eac:	39 f0       	breq	.+14     	; 0xebc <__fixunssfsi+0x4c>
     eae:	b9 3f       	cpi	r27, 0xF9	; 249
     eb0:	cc f3       	brlt	.-14     	; 0xea4 <__fixunssfsi+0x34>
     eb2:	86 95       	lsr	r24
     eb4:	77 95       	ror	r23
     eb6:	67 95       	ror	r22
     eb8:	b3 95       	inc	r27
     eba:	d9 f7       	brne	.-10     	; 0xeb2 <__fixunssfsi+0x42>
     ebc:	3e f4       	brtc	.+14     	; 0xecc <__fixunssfsi+0x5c>
     ebe:	90 95       	com	r25
     ec0:	80 95       	com	r24
     ec2:	70 95       	com	r23
     ec4:	61 95       	neg	r22
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	8f 4f       	sbci	r24, 0xFF	; 255
     eca:	9f 4f       	sbci	r25, 0xFF	; 255
     ecc:	08 95       	ret

00000ece <__floatunsisf>:
     ece:	e8 94       	clt
     ed0:	09 c0       	rjmp	.+18     	; 0xee4 <__floatsisf+0x12>

00000ed2 <__floatsisf>:
     ed2:	97 fb       	bst	r25, 7
     ed4:	3e f4       	brtc	.+14     	; 0xee4 <__floatsisf+0x12>
     ed6:	90 95       	com	r25
     ed8:	80 95       	com	r24
     eda:	70 95       	com	r23
     edc:	61 95       	neg	r22
     ede:	7f 4f       	sbci	r23, 0xFF	; 255
     ee0:	8f 4f       	sbci	r24, 0xFF	; 255
     ee2:	9f 4f       	sbci	r25, 0xFF	; 255
     ee4:	99 23       	and	r25, r25
     ee6:	a9 f0       	breq	.+42     	; 0xf12 <__floatsisf+0x40>
     ee8:	f9 2f       	mov	r31, r25
     eea:	96 e9       	ldi	r25, 0x96	; 150
     eec:	bb 27       	eor	r27, r27
     eee:	93 95       	inc	r25
     ef0:	f6 95       	lsr	r31
     ef2:	87 95       	ror	r24
     ef4:	77 95       	ror	r23
     ef6:	67 95       	ror	r22
     ef8:	b7 95       	ror	r27
     efa:	f1 11       	cpse	r31, r1
     efc:	f8 cf       	rjmp	.-16     	; 0xeee <__floatsisf+0x1c>
     efe:	fa f4       	brpl	.+62     	; 0xf3e <__floatsisf+0x6c>
     f00:	bb 0f       	add	r27, r27
     f02:	11 f4       	brne	.+4      	; 0xf08 <__floatsisf+0x36>
     f04:	60 ff       	sbrs	r22, 0
     f06:	1b c0       	rjmp	.+54     	; 0xf3e <__floatsisf+0x6c>
     f08:	6f 5f       	subi	r22, 0xFF	; 255
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	8f 4f       	sbci	r24, 0xFF	; 255
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	16 c0       	rjmp	.+44     	; 0xf3e <__floatsisf+0x6c>
     f12:	88 23       	and	r24, r24
     f14:	11 f0       	breq	.+4      	; 0xf1a <__floatsisf+0x48>
     f16:	96 e9       	ldi	r25, 0x96	; 150
     f18:	11 c0       	rjmp	.+34     	; 0xf3c <__floatsisf+0x6a>
     f1a:	77 23       	and	r23, r23
     f1c:	21 f0       	breq	.+8      	; 0xf26 <__floatsisf+0x54>
     f1e:	9e e8       	ldi	r25, 0x8E	; 142
     f20:	87 2f       	mov	r24, r23
     f22:	76 2f       	mov	r23, r22
     f24:	05 c0       	rjmp	.+10     	; 0xf30 <__floatsisf+0x5e>
     f26:	66 23       	and	r22, r22
     f28:	71 f0       	breq	.+28     	; 0xf46 <__floatsisf+0x74>
     f2a:	96 e8       	ldi	r25, 0x86	; 134
     f2c:	86 2f       	mov	r24, r22
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	2a f0       	brmi	.+10     	; 0xf3e <__floatsisf+0x6c>
     f34:	9a 95       	dec	r25
     f36:	66 0f       	add	r22, r22
     f38:	77 1f       	adc	r23, r23
     f3a:	88 1f       	adc	r24, r24
     f3c:	da f7       	brpl	.-10     	; 0xf34 <__floatsisf+0x62>
     f3e:	88 0f       	add	r24, r24
     f40:	96 95       	lsr	r25
     f42:	87 95       	ror	r24
     f44:	97 f9       	bld	r25, 7
     f46:	08 95       	ret

00000f48 <__fp_cmp>:
     f48:	99 0f       	add	r25, r25
     f4a:	00 08       	sbc	r0, r0
     f4c:	55 0f       	add	r21, r21
     f4e:	aa 0b       	sbc	r26, r26
     f50:	e0 e8       	ldi	r30, 0x80	; 128
     f52:	fe ef       	ldi	r31, 0xFE	; 254
     f54:	16 16       	cp	r1, r22
     f56:	17 06       	cpc	r1, r23
     f58:	e8 07       	cpc	r30, r24
     f5a:	f9 07       	cpc	r31, r25
     f5c:	c0 f0       	brcs	.+48     	; 0xf8e <__fp_cmp+0x46>
     f5e:	12 16       	cp	r1, r18
     f60:	13 06       	cpc	r1, r19
     f62:	e4 07       	cpc	r30, r20
     f64:	f5 07       	cpc	r31, r21
     f66:	98 f0       	brcs	.+38     	; 0xf8e <__fp_cmp+0x46>
     f68:	62 1b       	sub	r22, r18
     f6a:	73 0b       	sbc	r23, r19
     f6c:	84 0b       	sbc	r24, r20
     f6e:	95 0b       	sbc	r25, r21
     f70:	39 f4       	brne	.+14     	; 0xf80 <__fp_cmp+0x38>
     f72:	0a 26       	eor	r0, r26
     f74:	61 f0       	breq	.+24     	; 0xf8e <__fp_cmp+0x46>
     f76:	23 2b       	or	r18, r19
     f78:	24 2b       	or	r18, r20
     f7a:	25 2b       	or	r18, r21
     f7c:	21 f4       	brne	.+8      	; 0xf86 <__fp_cmp+0x3e>
     f7e:	08 95       	ret
     f80:	0a 26       	eor	r0, r26
     f82:	09 f4       	brne	.+2      	; 0xf86 <__fp_cmp+0x3e>
     f84:	a1 40       	sbci	r26, 0x01	; 1
     f86:	a6 95       	lsr	r26
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	81 1d       	adc	r24, r1
     f8c:	81 1d       	adc	r24, r1
     f8e:	08 95       	ret

00000f90 <__fp_inf>:
     f90:	97 f9       	bld	r25, 7
     f92:	9f 67       	ori	r25, 0x7F	; 127
     f94:	80 e8       	ldi	r24, 0x80	; 128
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	08 95       	ret

00000f9c <__fp_nan>:
     f9c:	9f ef       	ldi	r25, 0xFF	; 255
     f9e:	80 ec       	ldi	r24, 0xC0	; 192
     fa0:	08 95       	ret

00000fa2 <__fp_pscA>:
     fa2:	00 24       	eor	r0, r0
     fa4:	0a 94       	dec	r0
     fa6:	16 16       	cp	r1, r22
     fa8:	17 06       	cpc	r1, r23
     faa:	18 06       	cpc	r1, r24
     fac:	09 06       	cpc	r0, r25
     fae:	08 95       	ret

00000fb0 <__fp_pscB>:
     fb0:	00 24       	eor	r0, r0
     fb2:	0a 94       	dec	r0
     fb4:	12 16       	cp	r1, r18
     fb6:	13 06       	cpc	r1, r19
     fb8:	14 06       	cpc	r1, r20
     fba:	05 06       	cpc	r0, r21
     fbc:	08 95       	ret

00000fbe <__fp_round>:
     fbe:	09 2e       	mov	r0, r25
     fc0:	03 94       	inc	r0
     fc2:	00 0c       	add	r0, r0
     fc4:	11 f4       	brne	.+4      	; 0xfca <__fp_round+0xc>
     fc6:	88 23       	and	r24, r24
     fc8:	52 f0       	brmi	.+20     	; 0xfde <__fp_round+0x20>
     fca:	bb 0f       	add	r27, r27
     fcc:	40 f4       	brcc	.+16     	; 0xfde <__fp_round+0x20>
     fce:	bf 2b       	or	r27, r31
     fd0:	11 f4       	brne	.+4      	; 0xfd6 <__fp_round+0x18>
     fd2:	60 ff       	sbrs	r22, 0
     fd4:	04 c0       	rjmp	.+8      	; 0xfde <__fp_round+0x20>
     fd6:	6f 5f       	subi	r22, 0xFF	; 255
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	8f 4f       	sbci	r24, 0xFF	; 255
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	08 95       	ret

00000fe0 <__fp_split3>:
     fe0:	57 fd       	sbrc	r21, 7
     fe2:	90 58       	subi	r25, 0x80	; 128
     fe4:	44 0f       	add	r20, r20
     fe6:	55 1f       	adc	r21, r21
     fe8:	59 f0       	breq	.+22     	; 0x1000 <__fp_splitA+0x10>
     fea:	5f 3f       	cpi	r21, 0xFF	; 255
     fec:	71 f0       	breq	.+28     	; 0x100a <__fp_splitA+0x1a>
     fee:	47 95       	ror	r20

00000ff0 <__fp_splitA>:
     ff0:	88 0f       	add	r24, r24
     ff2:	97 fb       	bst	r25, 7
     ff4:	99 1f       	adc	r25, r25
     ff6:	61 f0       	breq	.+24     	; 0x1010 <__fp_splitA+0x20>
     ff8:	9f 3f       	cpi	r25, 0xFF	; 255
     ffa:	79 f0       	breq	.+30     	; 0x101a <__fp_splitA+0x2a>
     ffc:	87 95       	ror	r24
     ffe:	08 95       	ret
    1000:	12 16       	cp	r1, r18
    1002:	13 06       	cpc	r1, r19
    1004:	14 06       	cpc	r1, r20
    1006:	55 1f       	adc	r21, r21
    1008:	f2 cf       	rjmp	.-28     	; 0xfee <__fp_split3+0xe>
    100a:	46 95       	lsr	r20
    100c:	f1 df       	rcall	.-30     	; 0xff0 <__fp_splitA>
    100e:	08 c0       	rjmp	.+16     	; 0x1020 <__fp_splitA+0x30>
    1010:	16 16       	cp	r1, r22
    1012:	17 06       	cpc	r1, r23
    1014:	18 06       	cpc	r1, r24
    1016:	99 1f       	adc	r25, r25
    1018:	f1 cf       	rjmp	.-30     	; 0xffc <__fp_splitA+0xc>
    101a:	86 95       	lsr	r24
    101c:	71 05       	cpc	r23, r1
    101e:	61 05       	cpc	r22, r1
    1020:	08 94       	sec
    1022:	08 95       	ret

00001024 <__fp_zero>:
    1024:	e8 94       	clt

00001026 <__fp_szero>:
    1026:	bb 27       	eor	r27, r27
    1028:	66 27       	eor	r22, r22
    102a:	77 27       	eor	r23, r23
    102c:	cb 01       	movw	r24, r22
    102e:	97 f9       	bld	r25, 7
    1030:	08 95       	ret

00001032 <__gesf2>:
    1032:	0e 94 a4 07 	call	0xf48	; 0xf48 <__fp_cmp>
    1036:	08 f4       	brcc	.+2      	; 0x103a <__gesf2+0x8>
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	08 95       	ret

0000103c <__mulsf3>:
    103c:	0e 94 31 08 	call	0x1062	; 0x1062 <__mulsf3x>
    1040:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <__fp_round>
    1044:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__fp_pscA>
    1048:	38 f0       	brcs	.+14     	; 0x1058 <__mulsf3+0x1c>
    104a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__fp_pscB>
    104e:	20 f0       	brcs	.+8      	; 0x1058 <__mulsf3+0x1c>
    1050:	95 23       	and	r25, r21
    1052:	11 f0       	breq	.+4      	; 0x1058 <__mulsf3+0x1c>
    1054:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__fp_inf>
    1058:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__fp_nan>
    105c:	11 24       	eor	r1, r1
    105e:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__fp_szero>

00001062 <__mulsf3x>:
    1062:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__fp_split3>
    1066:	70 f3       	brcs	.-36     	; 0x1044 <__mulsf3+0x8>

00001068 <__mulsf3_pse>:
    1068:	95 9f       	mul	r25, r21
    106a:	c1 f3       	breq	.-16     	; 0x105c <__mulsf3+0x20>
    106c:	95 0f       	add	r25, r21
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	55 1f       	adc	r21, r21
    1072:	62 9f       	mul	r22, r18
    1074:	f0 01       	movw	r30, r0
    1076:	72 9f       	mul	r23, r18
    1078:	bb 27       	eor	r27, r27
    107a:	f0 0d       	add	r31, r0
    107c:	b1 1d       	adc	r27, r1
    107e:	63 9f       	mul	r22, r19
    1080:	aa 27       	eor	r26, r26
    1082:	f0 0d       	add	r31, r0
    1084:	b1 1d       	adc	r27, r1
    1086:	aa 1f       	adc	r26, r26
    1088:	64 9f       	mul	r22, r20
    108a:	66 27       	eor	r22, r22
    108c:	b0 0d       	add	r27, r0
    108e:	a1 1d       	adc	r26, r1
    1090:	66 1f       	adc	r22, r22
    1092:	82 9f       	mul	r24, r18
    1094:	22 27       	eor	r18, r18
    1096:	b0 0d       	add	r27, r0
    1098:	a1 1d       	adc	r26, r1
    109a:	62 1f       	adc	r22, r18
    109c:	73 9f       	mul	r23, r19
    109e:	b0 0d       	add	r27, r0
    10a0:	a1 1d       	adc	r26, r1
    10a2:	62 1f       	adc	r22, r18
    10a4:	83 9f       	mul	r24, r19
    10a6:	a0 0d       	add	r26, r0
    10a8:	61 1d       	adc	r22, r1
    10aa:	22 1f       	adc	r18, r18
    10ac:	74 9f       	mul	r23, r20
    10ae:	33 27       	eor	r19, r19
    10b0:	a0 0d       	add	r26, r0
    10b2:	61 1d       	adc	r22, r1
    10b4:	23 1f       	adc	r18, r19
    10b6:	84 9f       	mul	r24, r20
    10b8:	60 0d       	add	r22, r0
    10ba:	21 1d       	adc	r18, r1
    10bc:	82 2f       	mov	r24, r18
    10be:	76 2f       	mov	r23, r22
    10c0:	6a 2f       	mov	r22, r26
    10c2:	11 24       	eor	r1, r1
    10c4:	9f 57       	subi	r25, 0x7F	; 127
    10c6:	50 40       	sbci	r21, 0x00	; 0
    10c8:	9a f0       	brmi	.+38     	; 0x10f0 <__mulsf3_pse+0x88>
    10ca:	f1 f0       	breq	.+60     	; 0x1108 <__mulsf3_pse+0xa0>
    10cc:	88 23       	and	r24, r24
    10ce:	4a f0       	brmi	.+18     	; 0x10e2 <__mulsf3_pse+0x7a>
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	bb 1f       	adc	r27, r27
    10d6:	66 1f       	adc	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	88 1f       	adc	r24, r24
    10dc:	91 50       	subi	r25, 0x01	; 1
    10de:	50 40       	sbci	r21, 0x00	; 0
    10e0:	a9 f7       	brne	.-22     	; 0x10cc <__mulsf3_pse+0x64>
    10e2:	9e 3f       	cpi	r25, 0xFE	; 254
    10e4:	51 05       	cpc	r21, r1
    10e6:	80 f0       	brcs	.+32     	; 0x1108 <__mulsf3_pse+0xa0>
    10e8:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__fp_inf>
    10ec:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__fp_szero>
    10f0:	5f 3f       	cpi	r21, 0xFF	; 255
    10f2:	e4 f3       	brlt	.-8      	; 0x10ec <__mulsf3_pse+0x84>
    10f4:	98 3e       	cpi	r25, 0xE8	; 232
    10f6:	d4 f3       	brlt	.-12     	; 0x10ec <__mulsf3_pse+0x84>
    10f8:	86 95       	lsr	r24
    10fa:	77 95       	ror	r23
    10fc:	67 95       	ror	r22
    10fe:	b7 95       	ror	r27
    1100:	f7 95       	ror	r31
    1102:	e7 95       	ror	r30
    1104:	9f 5f       	subi	r25, 0xFF	; 255
    1106:	c1 f7       	brne	.-16     	; 0x10f8 <__mulsf3_pse+0x90>
    1108:	fe 2b       	or	r31, r30
    110a:	88 0f       	add	r24, r24
    110c:	91 1d       	adc	r25, r1
    110e:	96 95       	lsr	r25
    1110:	87 95       	ror	r24
    1112:	97 f9       	bld	r25, 7
    1114:	08 95       	ret

00001116 <itoa>:
    1116:	45 32       	cpi	r20, 0x25	; 37
    1118:	51 05       	cpc	r21, r1
    111a:	20 f4       	brcc	.+8      	; 0x1124 <itoa+0xe>
    111c:	42 30       	cpi	r20, 0x02	; 2
    111e:	10 f0       	brcs	.+4      	; 0x1124 <itoa+0xe>
    1120:	0c 94 96 08 	jmp	0x112c	; 0x112c <__itoa_ncheck>
    1124:	fb 01       	movw	r30, r22
    1126:	10 82       	st	Z, r1
    1128:	cb 01       	movw	r24, r22
    112a:	08 95       	ret

0000112c <__itoa_ncheck>:
    112c:	bb 27       	eor	r27, r27
    112e:	4a 30       	cpi	r20, 0x0A	; 10
    1130:	31 f4       	brne	.+12     	; 0x113e <__itoa_ncheck+0x12>
    1132:	99 23       	and	r25, r25
    1134:	22 f4       	brpl	.+8      	; 0x113e <__itoa_ncheck+0x12>
    1136:	bd e2       	ldi	r27, 0x2D	; 45
    1138:	90 95       	com	r25
    113a:	81 95       	neg	r24
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <__utoa_common>

00001142 <__utoa_ncheck>:
    1142:	bb 27       	eor	r27, r27

00001144 <__utoa_common>:
    1144:	fb 01       	movw	r30, r22
    1146:	55 27       	eor	r21, r21
    1148:	aa 27       	eor	r26, r26
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	aa 1f       	adc	r26, r26
    1150:	a4 17       	cp	r26, r20
    1152:	10 f0       	brcs	.+4      	; 0x1158 <__utoa_common+0x14>
    1154:	a4 1b       	sub	r26, r20
    1156:	83 95       	inc	r24
    1158:	50 51       	subi	r21, 0x10	; 16
    115a:	b9 f7       	brne	.-18     	; 0x114a <__utoa_common+0x6>
    115c:	a0 5d       	subi	r26, 0xD0	; 208
    115e:	aa 33       	cpi	r26, 0x3A	; 58
    1160:	08 f0       	brcs	.+2      	; 0x1164 <__utoa_common+0x20>
    1162:	a9 5d       	subi	r26, 0xD9	; 217
    1164:	a1 93       	st	Z+, r26
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	79 f7       	brne	.-34     	; 0x1148 <__utoa_common+0x4>
    116a:	b1 11       	cpse	r27, r1
    116c:	b1 93       	st	Z+, r27
    116e:	11 92       	st	Z+, r1
    1170:	cb 01       	movw	r24, r22
    1172:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <strrev>

00001176 <strrev>:
    1176:	dc 01       	movw	r26, r24
    1178:	fc 01       	movw	r30, r24
    117a:	67 2f       	mov	r22, r23
    117c:	71 91       	ld	r23, Z+
    117e:	77 23       	and	r23, r23
    1180:	e1 f7       	brne	.-8      	; 0x117a <strrev+0x4>
    1182:	32 97       	sbiw	r30, 0x02	; 2
    1184:	04 c0       	rjmp	.+8      	; 0x118e <strrev+0x18>
    1186:	7c 91       	ld	r23, X
    1188:	6d 93       	st	X+, r22
    118a:	70 83       	st	Z, r23
    118c:	62 91       	ld	r22, -Z
    118e:	ae 17       	cp	r26, r30
    1190:	bf 07       	cpc	r27, r31
    1192:	c8 f3       	brcs	.-14     	; 0x1186 <strrev+0x10>
    1194:	08 95       	ret

00001196 <_exit>:
    1196:	f8 94       	cli

00001198 <__stop_program>:
    1198:	ff cf       	rjmp	.-2      	; 0x1198 <__stop_program>
